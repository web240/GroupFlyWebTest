//declare var $: any;
//declare var jQuery: any;
//declare var xtag: any;
//declare var CKEDITOR: any;
//declare var WebUploader: any;

////【扩展接口】
//interface IComponentExtend {
//    afterCreate?(element): void;
//    afterInsert?(element): void;
//    afterRemove?(element): void;
//    afterAttributeChange?(element, attrName: string, oldValue, newValue): void;

//    beforeInit?(element): void;
//    afterInit?(element): void;

//}

////【组件基类】
//abstract class BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        this.extension = extension || {};
//        this.properties = new Array();
//        this.methods = new Array();

//        this.addProperties("elementname,state,containerid,viewmodel,customattr,onaftercreate,onafterinsert,onafterremove,onafterattributechange,onbeforeinit,onafterinit");
//        this.addboolProperties("iscustomelement,initcompleted,autoinit,readonly");
//        this.addViewStateProperty("children");
//        this.addMethod("init", `function() { control.init(this); this.initcompleted = true; }`);
//        this.addMethod("overrideEventHandler", `function(name, func) { 
//                                                    this.xtag["EventHandlers"][name] = [];
//                                                    this.xtag["EventHandlers"][name].push(func);
//                                                }`);
//        this.addMethod("registerEventHandler", `function(name, func) { 
//                                                    if(!this.xtag["EventHandlers"][name]){ 
//                                                        this.xtag["EventHandlers"][name] = [];
//                                                    }
//                                                    this.xtag["EventHandlers"][name].push(func);
//                                                }`);
//        this.addMethod("triggerEventHandler", `function(name,params) { 
//                                                    var element = this;
//                                                    var handlers = this.xtag["EventHandlers"][name];
//                                                    if(handlers) {
//                                                        $(handlers).each(function () {
//                                                            this.apply(element,params);
//                                                        });
//                                                    }
//                                                }`);
//        this.addMethod("addEvent", `function(name, func) { 
//                                                    var element = this;
//                                                    if(!this.xtag["broadcastEvents"][name]){ 
//                                                        this.xtag["broadcastEvents"][name] = [];
//                                                    }
//                                                    this.xtag["broadcastEvents"][name].push(func);
//                                                }`);
//        this.addMethod("fireEvent", `function(name,params) { 
//                                                    var element = this;
//                                                    var event = { name : name, target : element };
//                                                    var handlers = this.xtag["EventHandlers"][name];
//                                                    if(!params){ params = []; }

//                                                    if(handlers) {
//                                                        var newParams = [event].concact(params);
//                                                        $(handlers).each(function () {
//                                                            this.apply(element,newParams);
//                                                        });
//                                                    }
//                                                    $(element.children).each(function () {
//                                                        this.fireEvent(element,params,event);
//                                                    });
//                                                    element.parent.fireEvent(element,params,event);
//                                                }`);
//        this.addMethod("save",`function(){
//            var element = this;
//            var changes = [];
//            try{
//                window.ajaxLoading();
//                changes = element.getChanges();
//            }
//            catch(err){
//                element.warning(err.message);
//                window.ajaxLoadEnd();
//                return;
//            }
            
//            platformAjax({
//                url: document.body.listsaveurl,
//                data: {changes: JSON.stringify(changes)},
//                success: function(result) {
//                    element.triggerEventHandler("onSaveSuccess");
//                },
//                finallyCall: function(result) {
//                    element.triggerEventHandler("onafterSave");
//                }
//            });
//        }`);
//        this.addMethod("getChange",`function(){ return []; }`);
//        this.addMethod("getChanges",`function(){ 
//            var element = this;
//            var change = this.getChange();
//            var childrenChanges = [];
//            if(element.children){
//                $(element.children).each(function(){
//                    childrenChanges =  childrenChanges.concact(this.getChanges());
//                });
//            }
//            var merge = function(changes){
//                var mergedChanges = [];
//                $(changes).each(function(){
//                    var existedChanges = window.getObjFromArray(mergedChanges,id,this.id);
//                    if(existedChanges && existedChanges.length > 0){
//                        var existedChange = existedChanges[0];
//                        switch(existedChange.$){
//                            case "C":
//                                if(this.$ == "D"){
//                                    mergedChanges = window.removeObjFromArray(mergedChanges,id,this.id)
//                                }
//                                else{
//                                    for(var name in this){
//                                        existedChange[name] = this[name];
//                                    }
//                                }
//                                break;
//                            case "U":
//                                if(this.$ == "U"){
//                                    for(var name in this){
//                                        existedChange[name] = this[name];
//                                    }
//                                }
//                                else if(this.$ == "D"){
//                                    mergedChanges.push(this);
//                                }
//                                break;
//                            case "D":
//                                if(this.$ == "C"){
//                                    mergedChanges.push(this);
//                                }
//                                break;
//                        }
//                    }
//                    else{
//                        mergedChanges.push(this);
//                    }
//                });
//            };

//            return merge(change.concact(childrenChanges));
//         }`);
//        this.addMethod("set", `function(name, obj) { this.xtag[name] = obj; }`);
//        this.addMethod("set", `function(name, obj) { this.xtag[name] = obj; }`);
//        this.addMethod("get", `function(name) { return this.xtag[name]; }`);
//        this.addMethod("setCustomAttr", `function(attr,value){ this.get("customAttrObj")[attr] = value; }`);
//        this.addMethod("getCustomAttr", `function(attr){ return this.get("customAttrObj")[attr]; }`);
//        this.addMethod("setExtraParams", `function(attr,value){ this.get("ExtraParams")[attr] = value; }`);
//        this.addMethod("getExtraParams", `function(attr){ return this.get("ExtraParams")[attr]; }`);
//        this.addMethod("createLinkbutton", "function(text, iconCls, onclick,options){ return control.createLinkbutton(text, iconCls, onclick,options); }");
//        this.addMethod("GetUniqueId", `function(prefix){ return control.GetUniqueId(prefix); }`);
//        this.addMethod("warning", `function(message) { control.warning(message); }`);
//        this.addMethod("setState", `function(state) { control.setState(this,state); }`);
//        this.addMethod("addChild", `function(child){ 
//            if(!this.children){
//                this.children = [];
//            }
//            this.children.push(child);
//            child.parent = this;
//        }`);
//    }
//    //标签名称
//    protected elementName: string;
//    //标签静态内容
//    protected content: string;
//    //继承自
//    protected extends: string;
//    //自动初始化
//    protected autoInit: boolean;
//    //属性列表
//    protected properties: Array<string>;
//    //方法列表
//    protected methods: Array<string>;

//    //扩展对象
//    private extension: IComponentExtend;

//    //默认方法
//    protected defaultMethod = "function() { }";
//    //默认属性
//    protected defaultProperty = "{ attribute: {} }";

//    //添加属性
//    protected addProperty(name: string, value?: string) {
//        if (name) {
//            if (!value) {
//                value = this.defaultProperty;
//            }
//            this.properties[name] = value;
//        }
//    }
//    //添加bool属性
//    protected addboolProperty(name: string) {
//        this.addProperty(name, "{ attribute: { boolean:true } }");
//    }
//    //批量添加属性
//    protected addProperties(names: string) {
//        var nameArray = names.split(',');
//        for (var key in nameArray) {
//            this.addProperty(nameArray[key]);
//        }

//    }
//    //批量添加属性
//    protected addboolProperties(names: string) {
//        var nameArray = names.split(',');
//        for (var key in nameArray) {
//            this.addboolProperty(nameArray[key]);
//        }

//    }

//    //添加只读属性（存储于组件视图状态中，名称同属性名）
//    protected addReadonlyProperty(name: string) {
//        this.addProperty(name, `{ attribute: {}, get: function()  { return this.get("` + name + `"); } }`);
//    }

//    //添加视图状态属性（存储于组件视图状态中，名称同属性名）
//    protected addViewStateProperty(name: string) {
//        this.addProperty(name, `{ attribute: {}, set: function(val) { this.set("` + name + `",val); }, get: function()  { return this.get("` + name + `"); } }`);
//    }

//    //批量添加只读属性
//    protected addReadonlyProperties(names: string) {
//        var nameArray = names.split(',');
//        for (var key in nameArray) {
//            this.addReadonlyProperty(nameArray[key]);
//        }

//    }


//    //添加方法
//    protected addMethod(name: string, value?: string) {
//        if (name) {
//            if (!value) {
//                value = this.defaultMethod;
//            }
//            this.methods[name] = value;
//        }
//    }
//    //批量添加方法
//    protected addMethods(names: string) {
//        var nameArray = names.split(',');
//        for (var key in nameArray) {
//            this.addMethod(nameArray[key]);
//        }

//    }
//    //注册属性
//    protected setProperties() {
//        var accessors = "";
//        for (var key in this.properties) {
//            if (accessors == "") {
//                accessors = key + ":" + this.properties[key];
//            }
//            else {
//                accessors += "," + key + ":" + this.properties[key];
//            }
//        }
//        return accessors;
//    }
//    //注册方法
//    protected setMethods() {
//        var methods = "";
//        for (var key in this.methods) {
//            if (methods == "") {
//                methods = key + ":" + this.methods[key];
//            }
//            else {
//                methods += "," + key + ":" + this.methods[key];
//            }
//        }
//        return methods;
//    }

//    protected createLinkbutton(text: string, iconCls: string, onclick: Function, options?: any) {
//        var tool = document.createElement("a");
//        $(tool).attr("title", text);
//        $(tool).css("margin", "2px");
//        tool.innerText = text;
//        $(tool).linkbutton({
//            iconCls: iconCls + " iconfont"
//        });
//        var option = $(tool).linkbutton('options');
//        $(tool).bind('click', function () {
//            if (!option.disabled) {
//                onclick();
//            }
//        });
//        if (options) {
//            for (var p in options) {
//                if (options.hasOwnProperty(p)) {
//                    $(tool).attr(p, options[p]);
//                }
//            }
//        }
//        return tool;
//    }
//    //创建内容（各元素自定义）
//    protected initContent(element) { }

//    //初始化
//    protected init(element) {
//        var control = this;
//        if (!element.initcompleted) {
//            if (this.extension.beforeInit) {
//                this.extension.beforeInit(element);
//            }
//            element.triggerEventHandler("onbeforeinit");
//            if (element.onbeforeinit) {
//                eval(element.onbeforeinit);
//            }

//            element.addEvent("onSave",function(){
//                if (element.istop || !element.parent) {
//                    element.save();
//                }
//            });

//            this.initContent(element);
//            $(element).addClass("Components");
//            if (!element.id) { element.id = this.GetUniqueId(this.elementName); }
//            element.initcompleted = true;

//            if (this.extension.afterInit) {
//                this.extension.afterInit(element);
//            }
//            element.triggerEventHandler("onafterinit");
//            if (element.onafterinit) {
//                eval(element.onafterinit);
//            }
//        }
//    }

//    //创建后事件
//    protected create(element) {
//        var control = this;
//        if (element.autoinit) {
//            $(element).ready(function () {
//                control.init(element);
//            });
//        }
//    }


//    //插入后事件
//    protected insert(element) { }

//    //属性修改后事件
//    protected attributeChange(element, attrName: string, oldValue, newValue) { }

//    //移除后事件
//    protected remove(element) { }

//    //注册元素
//    public register() {

//        if (!xtag.tags[this.elementName.toLowerCase()]) {

//            var accessors = this.setProperties();
//            var methods = this.setMethods();
//            var extendsfrom = this.extends ? "extends: '" + this.extends + "'," : "";
//            var control = this;
//            eval(`xtag.register(control.elementName, {
//                ` + extendsfrom + `
//                content: control.content,
//                accessors: {` + accessors +
//                `},
//                lifecycle: {
//                    created: function () {
//                        if(this.customattr) {  this.set("customAttrObj", control.stringToObject(this.customattr)); }
//                        else { this.set("customAttrObj",{}); }
//                        if(control.autoInit){  this.autoinit = true; }
//                        this.set("broadcastEvents",[]);
//                        this.set("EventHandlers",[]);
//                        this.set("ExtraParams",[]);
//                        this.iscustomelement = true;
//                        this.elementname = control.elementName.toLowerCase();

//                        control.create(this);
//                        if (control.extension.afterCreate) {
//                            control.extension.afterCreate(this);
//                        }
//                        if(this.onaftercreate){
//                            eval(this.onaftercreate);
//                        }
//                    },
//                    inserted: function () {
//                        control.insert(this);
//                        if (control.extension.afterInsert) {
//                            control.extension.afterInsert(this);
//                        }
//                        if(this.onafterinsert){
//                            eval(this.onafterinsert);
//                        }
//                    },
//                    removed: function () {
//                        control.remove(this);
//                        if (control.extension.afterRemove) {
//                            control.extension.afterRemove(this);
//                        }
//                        if(this.onafterremove){
//                            eval(this.onafterremove);
//                        }
//                    },
//                    attributeChanged: function (attrName, oldValue, newValue) {
//                        control.attributeChange(this,attrName, oldValue, newValue);
//                        if (control.extension.afterAttributeChange) {
//                            control.extension.afterAttributeChange(this,attrName,oldValue,newValue);
//                        }
//                        if(this.onafterattributechange){
//                            eval(this.onafterattributechange);
//                        }
//                    }
//                },
//                methods: {` + methods + `
//                }
//            });`);
//        }
//    }

//    //查询对象属性数
//    protected getPropertyCount(obj: Object, exceptions?: Array<string>) {
//        var count = 0;
//        for (var i in obj) {
//            if (obj.hasOwnProperty(i)) {
//                if (!exceptions || exceptions.indexOf(i) < 0) {
//                    count++;
//                }
//            }
//        }
//        return count;
//    }

//    //字符串转对象
//    protected stringToObject(str: string) {
//        return eval("(" + str + ")");
//    }
//    //生成控件Id
//    protected GetUniqueId(prefix?: string) {
//        return prefix + Date.parse(new Date().toString()).toString(16) + Math.floor(Math.random() * 10000);
//    }

//    //提示框
//    protected warning(message: string) {
//        $.messager.alert('提示', message);
//    }

//    //确认框
//    protected confirm(message: string, func: Function) {
//        $.messager.confirm('请确认', message, function (r) {
//            if (r) {
//                func();
//            }
//        });
//    }

//    //判断对象是否是字符串  
//    protected isString(obj) {
//        return Object.prototype.toString.call(obj) === "[object String]";
//    }
//    protected safeToString(obj: Object) {
//        if (!obj) {
//            return '';
//        }
//        return obj.toString();
//    }
//    protected includeJS(source) {
//        if (source) {
//            var oScript = document.createElement("script");
//            oScript.type = "text/javascript";
//            oScript.src = source;
//            if ($("head")[0].innerHTML.indexOf(source) === -1) {
//                $('head').append(oScript);
//            }
//        }
//    }
//    protected includeStyle(source) {
//        if (source) {
//            var link = document.createElement("link");
//            link.type = "text/css";
//            link.rel = "stylesheet";
//            link.href = source;
//            $('head').append(link);
//        }
//    }



//    protected setState(element, state: string) {
//        if (state != element.state) {
//            element.state = state;
//            element.triggerEventHandler("onStateChange");
//        }
//    }

//    protected ajax(element, option) {
//        if (element.xtag["EventHandlers"]["onAjaxError"]) {
//            option.error = function (rezult) {
//                element.triggerEventHandler("onAjaxError", [rezult]);
//            };
//        }
//        window["platformAjax"](option);
//    }
//}

////【面板】
//class GfPanel extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Panel";
//        this.addProperties("title,href,width,height");
//        this.addProperty("contents", `{ attribute: {}, get: function()  { return this.get("contents"); } }`);
//        this.addProperty("div", `{ attribute: {}, get: function()  { return this.get("div"); } }`);
//        this.addMethod("maximize", `function(){
//                                        $(this.get('div')).panel('maximize');
//                                    }`);
//        this.addMethod("restore", "function(){ $(this.get('div')).panel('restore'); }");
//        this.addMethod("clearContent", `function(){ 
//                                            $(this.get('div')).html(''); 
//                                            this.set("contents",[]);
//                                        }`);
//        this.addMethod("appendContent", `function(component){ 
//                                            $(component).appendTo(this.get('div'));
//                                            this.get("contents").push(component);
//                                        }`);
//    }

//    protected initContent(element) {
//        element.set("contents", []);
//        var div = document.createElement("div");
//        element.set("div", div);
//        element.appendChild(div);
//        element.set("max", false);
//        var control = this;
//        $(div).css("padding", "2px");
//        $(div).panel({
//            title: element.title || '',
//            width: element.width || 800,
//            height: element.height || 600,
//            resizable: true,
//            maximizable: true,
//            cache: false,
//            onMaximize: function () {
//                element.set("max", true);
//                element.triggerEventHandler("onMaximize");
//            },
//            onRestore: function () {
//                element.set("max", false);
//                element.triggerEventHandler("onRestore");
//            },
//            modal: element.modal
//        });

//    }
//}

////【对话框】
//class GfDialog extends GfPanel {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Dialog";
//        this.addboolProperties("modal");
//        this.methods["maximize"] = `function(){
//                                        $(this.get('div')).dialog('maximize');
//                                    }`;
//        this.methods["restore"] = "function(){ $(this.get('div')).dialog('restore'); }";
//        this.addMethod("open", `function(){ 
//                                    var div = this.get('div');
//                                    $(div).dialog({ 
//                                        title: this.title, 
//                                        /*width : this.width,
//                                        height : this.height,*/
//                                        modal : this.modal
//                                    }); 
//                                    if(this.href){
//                                        $(div).dialog({ href : this.href });
//                                    }
//                                    this.restore();
//                                    $(div).dialog('open'); 
//                                    this.triggerEventHandler("onOpen");
//                                }`);
//        this.addMethod("close", `function(){ 
//                                    $(this.get('div')).dialog('close');
//                                }`);
//    }

//    protected initContent(element) {
//        element.set("contents", []);
//        var div = document.createElement("div");
//        element.set("div", div);
//        element.appendChild(div);
//        element.set("max", false);
//        var control = this;
//        $(div).css("padding", "2px");
//        $(div).dialog({
//            title: element.title || 'Dialog',
//            width: element.width || 1200,
//            height: element.height || 600,
//            closed: true,
//            resizable: true,
//            maximizable: true,
//            cache: false,
//            onMaximize: function () {
//                element.set("max", true);
//                element.triggerEventHandler("onMaximize");
//            },
//            onRestore: function () {
//                element.set("max", false);
//                element.triggerEventHandler("onRestore");
//            },
//            onBeforeClose: function () {
//                element.triggerEventHandler("onBeforeClose");
//            },
//            onClose: function () {
//                element.triggerEventHandler("onClose");
//            },
//            modal: element.modal
//        });
//        $(div).dialog("header").dblclick(function (event) {
//            if (element.get("max")) {
//                $(div).dialog("restore");
//                element.set("max", false);
//            }
//            else {
//                $(div).dialog("maximize");
//                element.set("max", true);
//            }
//        });

//    }
//}

////【对象视图】
//class GfObjektView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektView";
//        this.addReadonlyProperty("toolbar");
//        this.addProperty("inputs", "{ attribute: {}, get: function()  { return this.xtag.inputs;} }");
//        this.addProperties("objektid,klass,title,leftwidth,rightwidth");
//        this.addMethod("load", `function(state,inspectChange) {  
//                                    var element = this;
//                                    if(!state){
//                                        state = element.state;
//                                    }
//                                    var func = function(){
//                                            element.state = state;
//                                            control.buildPropertyControls(element);
//                                        };
//                                    if(inspectChange && control.haschange(this)){
//                                        control.confirm('有未保存的修改，是否放弃？', func);
//                                    }
//                                    else{
//                                        func();
//                                    } 
//                                }`);
//        this.addMethod("save", `function() { control.save(this); }`);
//        this.addMethod("setChangeObject", `function(change) { control.setChangeObject(this,change); }`);
//        this.addMethod("close", `function(){ document.body["closeDialog"](this.objektid);}`);
//    }

//    protected initContent(element) {
//        if (!element.state) element.state = "read";
//        var div = document.createElement("div");
//        element.set("div", div);
//        element.appendChild(div);

//        var toolbar = document.createElement("Gf-ToolBar");

//        var hidetools: any = ["open", "add", "del", "subclass", "query", "exporter"];
//        if (element.hidetools) {
//            if (element.hidetools == 'all') {
//                hidetools = 'all';
//            }
//            else {
//                hidetools = hidetools.concat(this.stringToObject(element.hidetools));
//            }
//        }
//        toolbar["hidetools"] = hidetools;

//        toolbar["registerEventHandler"]("toolCommand", function (toolname) {
//            switch (toolname) {
//                case "edit": element.setState("edit"); break;
//                case "read": element.load("read", true); break;
//                case "refresh": element.load("", true); break;
//                case "save":
//                    if (element.state == "edit") {
//                        element.save();
//                    }
//                    break;
//            }
//        });
//        toolbar["registerEventHandler"]("toolCommandSuccess", function (toolname) {
//            if (toolname == 'trash' || toolname == 'untrash') {
//                element.load("", false);
//                element.triggerEventHandler("onaftersave");
//            }
//        });

//        element.set("toolbar", toolbar);

//        var layout = document.createElement("div");
//        element.set("layout", layout);
//        div.appendChild(layout);

//        $(layout).layout({
//            fit: true
//        });

//        $(layout).layout('add', {
//            region: 'center',
//            collapsible: true,
//            split: true
//        });
//        $(layout).layout('add', {
//            region: 'west',
//            width: element.leftwidth || 500,
//            collapsible: true,
//            split: true
//        });
//        $(layout).layout('add', {
//            region: 'north',
//            height: 36,
//            collapsible: false,
//            split: false
//        });
//        $(layout).layout('add', {
//            region: 'south',
//            height: 350,
//            collapsible: false,
//            split: true
//        });

//        var center = $(layout).find('.layout-panel-center').find('.layout-body');
//        var north = $(layout).find('.layout-panel-north').find('.layout-body');
//        var west = $(layout).find('.layout-panel-west').find('.layout-body');
//        var south = $(layout).find('.layout-panel-south').find('.layout-body');
//        element.set("center", center);
//        element.set("west", west);
//        element.set("south", south);
//        element.set("top", north);
//        $(north).css("border-bottom", "1px solid lightgray");
//        $(north).append(toolbar);
//        toolbar["init"]();


//        var control = this;
//        $(div).css("width", "100%");
//        $(div).css("height", "100%");

//        var tabid = control.GetUniqueId("tab");
//        center.html(`<div id="` + tabid + `" is="Gf-Tabs" class="frametabs" fit lazyload autoinit></div>`);
//        element.set("tabid", tabid);

//        element.registerEventHandler("oninitLoaded", function () {
//            toolbar["triggerEventHandler"]("toolCommand", ["permission"]);
//        });
//        this.buildPropertyControls(element, true);

//    }

//    protected setState(element, state) {
//        var forminputs = element.get("inputs");
//        $(forminputs).each(function () {
//            this.setState(state);
//        });
//        //var tab = document.querySelector("#" + element.get("tabid"));
//        var toolbar = element.get("toolbar");
//        toolbar.setState(state);
//        super.setState(element, state);
//    }

//    protected buildPropertyControls(element, firstLoad) {
//        var control = this;
//        var change = element.get("changeObject");
//        if (change && change["dataType"]) {
//            var datatype = JSON.parse(change["dataType"]);
//            element.set("PropertyDataType", datatype.id);
//        }

//        control.ajax(element, {
//            url: document.body["getobjwithmetaurl"],
//            data: { id: element.objektid, klass: element.klass, dataTypeId: element.get("PropertyDataType") },
//            success: function (result) {
//                var toolbar = element.get("toolbar");
//                var tabid = element.get("tabid");
//                var tab = document.getElementById(tabid);
//                var layout = element.get("layout");
//                var center = element.get("center");
//                var west = element.get("west");
//                var north = element.get("north");
//                var south = element.get("south");
//                var obj = JSON.parse(result.Data);
//                element.set("ServerObjekt", obj);
//                toolbar.selected = [
//                    {
//                        id: obj.id.value,
//                        permission: obj.permission.value,
//                        permissioncode: obj.permissioncode,
//                        combinedtitle: obj.combinedtitle,
//                        isTrash: obj.isTrash.value
//                    }
//                ];

//                var table = document.createElement("table");
//                $(table).addClass("ObjektView");

//                var inputs = [];
//                for (var propertyname in obj) {
//                    var property = obj[propertyname]
//                    if (property.hidden == "false") {
//                        var elementname = property['elementname'];

//                            var tr = document.createElement("tr");
//                            var th = document.createElement("th");
//                            $(th).addClass("PropertyLabel");
//                            $(th).attr("title", property["description"]);
//                            var label = property['required'] == "true" ? "*" + property["label"] : property["label"];
//                            $(th).text(label + "：");
//                            var td = document.createElement("td");
//                            $(td).addClass("PropertyValue");
//                            $(tr).append(th).append(td);
//                            $(table).append(tr);
//                            if (elementname) {
//                                var ui = document.createElement(elementname);
//                                $(td).append(ui);
//                                ui['name'] = property['name'];
//                                ui['label'] = property['label'];
//                                ui['description'] = property['description'];
//                                ui['filterid'] = property['filterid'];
//                                ui['objektid'] = property['objektid'];
//                                ui['propertyname'] = property['propertyname'];
//                                ui['width'] = property['width'];
//                                ui['height'] = property['height'];
//                                ui['state'] = property['state'];
//                                ui['autosave'] = property['autosave'] == "true";
//                                ui['readonly'] = property['readonly'] == "true";
//                                ui['hidden'] = property['hidden'] == "true";
//                                ui['required'] = property['required'] == "true";
//                                ui['prec'] = property['prec'];
//                                ui['scale'] = property['scale'];

//                            if (elementname == 'Gf-ObjektPropertyView') {
//                                ui['value'] = JSON.stringify(property['value']);
//                                ui['idfield'] = property['idfield'];
//                                ui['namefield'] = property['namefield'];
//                                ui['href'] = property['href'];
//                                ui['klass'] = property['klass'];
//                            }
//                            else if (elementname == 'Gf-ListPropertyView') {
//                                ui['value'] = JSON.stringify(property['value']);
//                                ui['valuefield'] = property['valuefield'];
//                                ui['textfield'] = property['textfield'];
//                                ui['defaultoption'] = property['defaultoption'];
//                                ui['data'] = property['data'];
//                                if (property['value'] && property['value'].color) {
//                                    $(td).css("background-color", "#" + property['value'].color);
//                                }
//                            }
//                            else {
//                                ui['value'] = property['value'];
//                            }
//                            //ui["init"]();
//                            inputs.push(ui);
//                        }
//                        else {
//                            $(td).html(property['value']);
//                        }

//                    }

//                    }
//                    element.set("inputs", inputs);

//                if (obj.roccnames.length == 0) {
//                    center.html("");
//                    center.removeClass("panel-noscroll");
//                    center.append(table);
//                    $(layout).layout("remove", "west");
//                    $(layout).layout("remove", "south");
//                    element.set("hasRelated", false);
//                }
//                else {
//                    if (obj.viewLayout == 'Vertical') {
//                        $(tab).appendTo(south[0])
//                        south.addClass("panel-noscroll");
//                        center.html("");
//                        center.append(table);
//                        center.removeClass("panel-noscroll");
//                        $(layout).layout("remove", "west");
//                    }
//                    else {
//                        $(layout).layout("remove", "south");
//                        west.find("table").remove();
//                        west.append(table);
//                    }
//                    element.set("hasRelated", true);
//                    tab["lazyload"] = true;
//                    tab["init"]();
//                    tab["closeAll"]();
//                    $(obj.roccnames).each(function () {
//                        var klass = this.split('-')[0];
//                        var title = this.split('-')[1];
//                        var id = control.GetUniqueId(klass);
//                        var href = document.body["rocviewurl"] + "?klass=" + klass + "&id=" + element.objektid + "&sourceKlass=" + element.klass;
//                        tab["add"](id, title, href, "", false);
//                    });
//                    tab["overrideEventHandler"]("onLazyLoad", function (index) {
//                        var subTab = tab["getTab"](index);
//                        var grid = $(subTab).find("Gf-ObjektCollectionView")[0];
//                        if (grid && tab["state"] == "edit")
//                            grid.setState("edit");
//                    });
//                    tab["overrideEventHandler"]("onStateChange", function () {
//                        var tabs = tab["getAllTabs"]();
//                        $(tabs).each(function () {
//                            var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                            if (grid) {
//                                grid.setState(tab["state"]);
//                            }
//                        });
//                    });
//                    if (firstLoad) {
//                        element.registerEventHandler("onStateChange", function () {
//                            if (element.state == "edit")
//                                tab["setState"](element.state);
//                        });
//                    }
//                    tab["setState"](element.state);
//                    tab["select"](0);
//                }

//                //后处理
//                for (var inputitem in inputs) {
//                    inputs[inputitem]["init"]();
//                }

//                $(element.get("layout")).layout("resize", { width: '100%', height: '100%' });
//                control.setState(element, element.state);
//                if (firstLoad) {
//                    $(inputs).each(function () {
//                        var input = this;
//                        if (change && input.propertyname in change) {
//                            if (input.initcompleted)
//                                input.setValue(change[input.name]);
//                            else
//                                input.registerEventHandler("onafterinit", function () {
//                                    input.setValue(change[input.name]);
//                                });
//                        }
//                    });
//                    element.triggerEventHandler("oninitLoaded");
//                }
//            }
//        });
//    }

//    protected haschange(element) {
//        var haschange = false;
//        $(element.inputs).each(function () {
//            if (this.haschange) {
//                haschange = true;
//            }
//        });
//        if (element.get("hasRelated")) {
//            //列表保存
//            var tab = document.querySelector("#" + element.get("tabid"));
//            var subTabs = tab["getAllTabs"]();
//            $(subTabs).each(function () {
//                var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                if (grid) {
//                    if (grid.haschange)
//                        haschange = true;
//                }
//            });
//        }
//        return haschange;
//    }

//    protected setChangeObject(element, change) {
//        element.set("changeObject", change);
//    }

//    protected save(element) {
//        var ServerObjekt = element.get("ServerObjekt");
//        var forminputs = element.get("inputs");
//        var obj = element.get("changeObject") || {};
//        var haschange = false;
//        var validate = true;

//        var savelists = function () {
//            if (element.get("hasRelated")) {
//                //列表保存
//                var tab = document.querySelector("#" + element.get("tabid"));
//                var subTabs = tab["getAllTabs"]();
//                $(subTabs).each(function () {
//                    var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                    if (grid) {
//                        //处理klass的id
//                        if (element.klass == 'Klass' && obj.name) {
//                            var extra = grid.getExtraParams("saveList");
//                            extra = obj.name + "@Klass," + extra.split(',')[1];
//                            grid.setExtraParams("saveList", extra);
//                        }
//                        grid["saveList"](haschange);
//                    }
//                });
//            }
//        };
//        if (element.get("hasRelated")) {
//            //列表保存
//            var tab = document.querySelector("#" + element.get("tabid"));
//            var subTabs = tab["getAllTabs"]();
//            $(subTabs).each(function () {
//                var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                if (grid && !grid.endEditRows()) {
//                    validate = false;
//                }
//            });
//        }
//        //属性校验
//        $(forminputs).each(function () {
//            if (this.haschange) {
//                haschange = true;
//                obj[this.propertyname] = this.getValue();
//            }
//            else {
//                delete obj[this.propertyname];
//            }
//            if (!this.validate()) {
//                validate = false;
//            }
//        });
//        if (!haschange && this.getPropertyCount(obj) > 0) {
//            haschange = true;
//        }
//        if (haschange && validate) {
//            window["platformAjax"]({
//                url: document.body["editurl"],
//                data: { id: element.objektid, klass: element.klass, obj: JSON.stringify(obj) },
//                success: function (result) {
//                    savelists();
//                    element.objektid = result.Data;
//                    element.load("", false);
//                    element.triggerEventHandler("onaftersave");
//                }
//            });
//        }
//        else if (validate) {
//            savelists();
//        }
//    }
//}

////【工具栏】
//class GfToolBar extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ToolBar";
//        this.addProperty("selected",
//            `{attribute:{},
//         get: function() { return this.get("selected"); },
//         set: function(val) { this.set("selected", val); control.checkToShow(this); }}`);
//        this.addViewStateProperty("hidetools");
//        this.addReadonlyProperty("toolbarDiv");
//        this.addMethod("selectButton", `function(toolname){ control.setButtonSelectByName(this,toolname,true); }`);
//        this.addMethod("unSelectButton", `function(toolname){ control.setButtonSelectByName(this,toolname,false); }`);
//        this.addMethod("addButton", `function(option){ control.addButton(this,option); }`);
//        this.addMethod("addTool", `function(option){ control.addTool(this,option); }`);
//        this.addMethod("showTool", `function(toolname){ control.setToolVisibleByName(this,toolname,true); }`);
//        this.addMethod("hideTool", `function(toolname){ control.setToolVisibleByName(this,toolname,false); }`);
//    }

//    protected setToolVisibleByName(element, toolname: string, visible: boolean) {
//        var tool = this.getToolByName(element, toolname);
//        this.setToolVisible(tool, visible);
//    }

//    protected setToolVisible(tool, visible: boolean) {
//        if (visible) {
//            $(tool).show();
//            $(tool).css("display", "inline-block");
//        }
//        else {
//            $(tool).hide();
//        }
//    }

//    protected setButtonSelectByName(element, toolname: string, select: boolean) {
//        var tool = this.getToolByName(element, toolname);
//        var method = select ? "select" : "unselect";
//        $(tool).linkbutton(method);
//    }

//    protected getToolByName(element, toolname: string) {
//        var toolbar = element.get("toolbar");
//        for (var name in toolbar) {
//            if (name == toolname) {
//                return toolbar[name];
//            }
//        }
//    }

//    protected addButton(element, option) {
//        var button = this.createLinkbutton(option.label, option.icon, function () {
//            element.triggerEventHandler("toolCommand", [option.name]);
//        }, option.whenToShow);

//        option.tool = button;
//        this.addTool(element, option);
//    }

//    protected addTool(element, option) {
//        var tool = option.tool;
//        var toolbar = element.get("toolbar");

//        if (option.whenToShow) {
//            if (option.whenToShow.stateToShow) {
//                $(tool).attr("stateToShow", option.whenToShow.stateToShow);
//            }
//            if (option.whenToShow.selectToShow) {
//                $(tool).attr("selectToShow", option.whenToShow.selectToShow);
//            }
//        }
//        if (option.before) {
//            for (var toolname in toolbar) {
//                if (toolname == option.before) {
//                    $(toolbar[toolname]).before(tool);
//                }
//            }
//        }
//        else if (option.after) {
//            for (var toolname in toolbar) {
//                if (toolname == option.after) {
//                    $(toolbar[toolname]).after(tool);
//                }
//            }
//        }
//        else {
//            var toolbarDiv = element.get("toolbarDiv");
//            $(toolbarDiv).append(tool);
//        }
//        toolbar[option.name] = tool;
//    }

//    protected setState(element, state) {

//        super.setState(element, state);
//        this.checkToShow(element);
//    }

//    protected checkToShow(element) {
//        var control = this;
//        var total = 0;
//        var readCounts = 0;
//        var deleteCounts = 0;
//        var toolbar = element.get("toolbar");
//        var selected = element.selected;
//        if (selected) {
//            total = selected.length;
//            $(selected).each(function () {

//                var canRead = this.permissioncode[1] === "1";
//                var canDelete = this.permissioncode[4] === "1";
//                if (canRead) {
//                    readCounts += 1;
//                }
//                if (canDelete) {
//                    deleteCounts += 1;
//                }
//            });

//            var checkState = function (tool, stateToShow) {
//                var show = (!stateToShow || stateToShow === element.state);
//                control.setToolVisible(tool, show);
//            };

//            var checkObjKlass = function (array) {
//                var isKlass = true;
//                if (array && array.length > 0) {
//                    $(array).each(function () {
//                        if (!control.isString(this.id)) {
//                            this.id = this.id.value;
//                        }
//                        var klass = this.id.split('@')[1];
//                        if (klass.toLowerCase() != 'klass') {
//                            isKlass = false;
//                        }
//                    });
//                }
//                else {
//                    isKlass = false;
//                }
//                return isKlass;
//            }

//            var checkTrash = function (array, isTrash) {
//                var cando = true;
//                if (array && array.length > 0) {
//                    $(array).each(function () {
//                        if (this.isTrash.toString().toLowerCase() == isTrash.toString().toLowerCase())
//                            cando = false;
//                    });
//                }
//                else {
//                    cando = false;
//                }
//                return cando;
//            };

//            var checkPermission = function (array) {
//                if (!array || array.length == 0) {
//                    return false;
//                }
//                var obj = array[0];
//                if (obj.$ && obj.$ == 'C') {
//                    return false;
//                }
//                //有当前对象的授权权或者当前权限对象的查看权
//                var canAuthorize = obj.permissioncode[4] == '1';
//                var canRead = false;
//                if (obj.permission) {
//                    var permissioncode = obj.permission.permissioncode;
//                    canRead = (permissioncode && permissioncode[1] == '1');
//                }
//                $.parser.parse();
//                return (canAuthorize || canRead);
//            };

//            for (var toolname in toolbar) {
//                var tool = toolbar[toolname];
//                var stateToShow = $(tool).attr("stateToShow");
//                var selectToShow = $(tool).attr("selectToShow");

//                if (selectToShow == "singleSelect") {
//                    if (total != 1) {
//                        $(tool).hide();
//                    }
//                    else if (toolname == "open" && readCounts != 1) {
//                        $(tool).hide();
//                    }
//                    else if (toolname == "permission") {
//                        if (!checkPermission(selected)) {
//                            $(tool).hide();
//                        }
//                        else {
//                            if (!tool["initcompleted"]) {
//                                tool["init"]();
//                            }
//                            $(tool).show();
//                        }
//                    }
//                    else {
//                        checkState(tool, stateToShow);
//                    }
//                }
//                else if (selectToShow == "select") {
//                    if (total == 0) {
//                        $(tool).hide();
//                    }
//                    else if (toolname == "del" && deleteCounts != total) {
//                        $(tool).hide();
//                    }
//                    else if (toolname == "trash" && (deleteCounts != total || !checkTrash(selected, true))) {
//                        $(tool).hide();
//                    }
//                    else if (toolname == "untrash" && (deleteCounts != total || !checkTrash(selected, false))) {
//                        $(tool).hide();
//                    }
//                    else if (toolname == "uml" && !checkObjKlass(selected)) {
//                        $(tool).hide();
//                    }
//                    else {
//                        checkState(tool, stateToShow);
//                    }
//                }
//                else {
//                    checkState(tool, stateToShow);
//                }


//            }
//            element.triggerEventHandler("onCheckToShow");
//        }

//        if (element.hidetools) {
//            if (element.hidetools == 'all') {
//                var toolbar = element.get("toolbarDiv");
//                $(toolbar).hide();
//            }
//            else {
//                var toolbar = element.get("toolbar");
//                $(element.hidetools).each(function () {
//                    if (toolbar[this]) {
//                        $(toolbar[this]).hide();
//                    }
//                });
//            }
//        }

//    }

//    protected handleIdshower(element) {
//        var objectArray = element.get("selected");
//        if (objectArray.length > 0) {
//            var ids = '<div style="padding:15px;">';
//            $(objectArray).each(function () {
//                ids += '<p>"' + this['combinedtitle'] + '"的ID： ' + this["id"] + '</p>';
//            });
//            ids += "</div>";
//            document.body["openDialog"]({
//                id: element.id + "-CheckID",
//                width: 500,
//                height: 200,
//                title: '查看ID',
//                content: ids
//            });
//        }
//    }
//    protected handlePermission(element) {
//        var objectArray = element.get("selected");
//        if (objectArray.length > 0) {
//            element.get("toolbar").permission.load(objectArray[0]);
//        }
//    }
//    protected handleReference(element) {
//        var objectArray = element.get("selected");
//        $(objectArray).each(function () {
//            var id = this["id"];
//            var name = this["combinedtitle"];
//            document.body["openDialog"]({
//                id: id,
//                width: 800,
//                title: '引用“' + name + '”的对象',
//                href: document.body["referenceurl"] + "?id=" + id
//            });
//        });
//    }
//    protected handleUml(element) {
//        var objectArray = element.get("selected");
//        if (objectArray.length > 0) {
//            var ids = '';
//            $(objectArray).each(function () {
//                ids += this["id"];
//                ids += ',';
//            });
//            var umlParam = document.createElement("Gf-UmlParams");
//            umlParam["ids"] = ids;
//            umlParam["init"]();
//            umlParam["open"]();
//        }
//    }
//    protected handleTrash(element) {
//        var control = this;
//        var objectArray = element.get("selected");
//        if (objectArray.length > 0) {
//            this.confirm("是否确认回收？", function () {
//                var ids = "";
//                $(objectArray).each(function () {
//                    ids += this["id"] + ",";
//                });
//                control.setTrash(element, ids, true);
//            });
//        }
//    }
//    protected handleUntrash(element) {
//        var control = this;
//        var objectArray = element.get("selected");
//        if (objectArray.length > 0) {
//            var ids = "";
//            $(objectArray).each(function () {
//                ids += this["id"] + ",";
//            });
//            control.setTrash(element, ids, false);
//        }
//    }
//    protected setTrash(element, objektIds, isTrash) {
//        window["ajaxLoading"]();
//        window["platformAjax"]({
//            url: document.body["trashurl"],
//            data: { objektIds: objektIds, isTrash: isTrash },
//            success: function (result) {
//                var toolname = isTrash ? "trash" : "untrash";
//                element.triggerEventHandler("toolCommandSuccess", [toolname]);
//            },
//            finallyCall: function (result) {
//                window["ajaxLoadEnd"]();
//            }
//        });
//    }
//    protected create(element) {
//        var control = this;
//        if (!$(element).attr("hidetools")) {
//            element.set("hidetools", []);
//        }
//        else {
//            element.set("hidetools", this.stringToObject($(element).attr("hidetools")));
//        }
//        element.registerEventHandler("toolCommand", function (toolname) {
//            switch (toolname) {
//                case "idshower":
//                    control.handleIdshower(element);
//                    break;

//                case "reference":
//                    control.handleReference(element);
//                    break;

//                case "trash":
//                    control.handleTrash(element);
//                    break;

//                case "untrash":
//                    control.handleUntrash(element);
//                    break;

//                case "uml":
//                    control.handleUml(element);
//                    break;

//                case "permission":
//                    control.handlePermission(element);
//                    break;
//            }
//        });
//        super.create(element);
//    }
//    protected initContent(element) {
//        var edit = this.createLinkbutton("编辑", "fa fa-pencil-square-o", function () {
//            element.triggerEventHandler("toolCommand", ["edit"]);
//        }, { stateToShow: "read" });

//        var read = this.createLinkbutton("浏览", "fa fa-square-o", function () {
//            element.triggerEventHandler("toolCommand", ["read"]);
//        }, { stateToShow: "edit" });

//        var open = this.createLinkbutton("打开", "fa fa-folder-open-o", function () {
//            element.triggerEventHandler("toolCommand", ["open"]);
//        }, { selectToShow: "singleSelect" });

//        var add = this.createLinkbutton("新建", "fa fa-plus", function () {
//            element.triggerEventHandler("toolCommand", ["add"]);
//        }, { stateToShow: "edit" });

//        var del = this.createLinkbutton("删除", "fa fa-minus", function () {
//            element.triggerEventHandler("toolCommand", ["del"]);
//        }, { selectToShow: "select", stateToShow: "edit" });

//        var save = this.createLinkbutton("保存", "fa fa-floppy-o", function () {
//            element.triggerEventHandler("toolCommand", ["save"]);
//        }, { stateToShow: "edit" });

//        var refresh = this.createLinkbutton("刷新", "fa fa-refresh", function () {
//            element.triggerEventHandler("toolCommand", ["refresh"]);
//        });

//        var subclass = this.createLinkbutton("包含子类", "fa fa-sitemap", function () {
//            element.triggerEventHandler("toolCommand", ["subclass"]);
//        });

//        var query = this.createLinkbutton("查询", "fa fa-search", function () {
//            element.triggerEventHandler("toolCommand", ["query"]);
//        });

//        var exporter = this.createLinkbutton("导出", "fa fa-file-excel-o", function () {
//            element.triggerEventHandler("toolCommand", ["exporter"]);
//        });

//        var idshower = this.createLinkbutton("查看ID", "fa fa-id-card-o", function () {
//            element.triggerEventHandler("toolCommand", ["idshower"]);
//        }, { selectToShow: "select" });

//        var reference = this.createLinkbutton("查看引用", "fa fa-arrow-left", function () {
//            element.triggerEventHandler("toolCommand", ["reference"]);
//        }, { selectToShow: "singleSelect" });

//        var trash = this.createLinkbutton("回收", "fa fa-trash-o", function () {
//            element.triggerEventHandler("toolCommand", ["trash"]);
//        }, { selectToShow: "select" });

//        var untrash = this.createLinkbutton("还原", "fa fa-recycle", function () {
//            element.triggerEventHandler("toolCommand", ["untrash"]);
//        }, { selectToShow: "select" });

//        var uml = this.createLinkbutton("UML", "fa fa-retweet", function () {
//            element.triggerEventHandler("toolCommand", ["uml"]);
//        }, { selectToShow: "select" });

//        var permission = document.createElement("Gf-Authorization");
//        permission["selecttoshow"] = "singleSelect";
//        permission["registerEventHandler"]("onBeforeShow", function () {
//            element.triggerEventHandler("toolCommand", ["permission"]);
//        });
//        permission["init"]();

//        $(query).linkbutton("options").toggle = true;
//        $(subclass).linkbutton("options").toggle = true;

//        var div = document.createElement("div");
//        div.id = this.GetUniqueId("toolbar");
//        //$(div).addClass("datagrid-toolbar");
//        div.appendChild(edit);
//        div.appendChild(read);
//        div.appendChild(open);
//        div.appendChild(add);
//        div.appendChild(del);
//        div.appendChild(save);
//        div.appendChild(refresh);
//        div.appendChild(subclass);
//        div.appendChild(query);
//        div.appendChild(exporter);
//        div.appendChild(idshower);
//        div.appendChild(reference);
//        div.appendChild(trash);
//        div.appendChild(untrash);
//        div.appendChild(permission);
//        div.appendChild(uml);
//        element.appendChild(div);

//        element.set("toolbar", {
//            add: add, del: del, edit: edit, save: save, read: read, permission: permission,
//            exporter: exporter, open: open, query: query, refresh: refresh, subclass: subclass,
//            trash: trash, untrash: untrash, idshower: idshower, reference: reference, uml: uml
//        });
//        element.set("toolbarDiv", div);
//    }
//}

////【对象内容视图】
//class GfObjektContentView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektContentView";
//        this.addProperties("objektid,klass,leftwidth,rightwidth");
//        this.addMethod("load", `function(state,inspectChange) {  
//                                    var element = this;
//                                    if(!state){
//                                        state = element.state;
//                                    }
//                                    var func = function(){
//                                            element.state = state;
//                                            control.buildPropertyControls(element);
//                                        };
//                                    if(inspectChange && control.haschange(this)){
//                                        control.confirm('有未保存的修改，是否放弃？', func);
//                                    }
//                                    else{
//                                        func();
//                                    } 
//                                }`);
//        this.addMethod("save", `function() { control.save(this); }`);
//        this.addMethod("setChangeObject", `function(change) { control.setChangeObject(this,change); }`);
//    }

//    protected initContent(element) {
//        if (!element.state) element.state = "read";
//        var div = document.createElement("div");
//        element.set("div", div);
//        element.appendChild(div);

//        var layout = document.createElement("div");
//        element.set("layout", layout);
//        div.appendChild(layout);

//        $(layout).layout({
//            fit: true
//        });

//        $(layout).layout('add', {
//            region: 'center',
//            collapsible: true,
//            split: true
//        });
//        $(layout).layout('add', {
//            region: 'west',
//            width: element.leftwidth || 500,
//            collapsible: true,
//            split: true
//        });
//        $(layout).layout('add', {
//            region: 'south',
//            height: 350,
//            collapsible: false,
//            split: true
//        });

//        var center = $(layout).find('.layout-panel-center').find('.layout-body');
//        var west = $(layout).find('.layout-panel-west').find('.layout-body');
//        var south = $(layout).find('.layout-panel-south').find('.layout-body');
//        element.set("center", center);
//        element.set("west", west);
//        element.set("south", south);

//        var control = this;
//        $(div).css("width", "100%");
//        $(div).css("height", "100%");

//        this.buildcontent(element, true);

//    }

//    protected setState(element, state) {
//        var forminputs = element.get("inputs");
//        $(forminputs).each(function () {
//            this.setState(state);
//        });
//        //var tab = document.querySelector("#" + element.get("tabid"));
//        var toolbar = element.get("toolbar");
//        toolbar.setState(state);
//        super.setState(element, state);
//    }

//    protected buildcontent(element, firstLoad) {
//        var control = this;
//        var change = element.get("changeObject");
//        if (change && change["dataType"]) {
//            var datatype = JSON.parse(change["dataType"]);
//            element.set("PropertyDataType", datatype.id);
//        }

//        control.ajax(element, {
//            url: document.body["getobjwithmetaurl"],
//            data: { id: element.objektid, klass: element.klass, dataTypeId: element.get("PropertyDataType") },
//            success: function (result) {
//                var toolbar = element.get("toolbar");
//                var tabid = element.get("tabid");
//                var tab = document.getElementById(tabid);
//                var layout = element.get("layout");
//                var center = element.get("center");
//                var west = element.get("west");
//                var north = element.get("north");
//                var south = element.get("south");
//                var obj = JSON.parse(result.Data);
//                element.set("ServerObjekt", obj);
//                toolbar.selected = [
//                    {
//                        id: obj.id.value,
//                        permission: obj.permission.value,
//                        permissioncode: obj.permissioncode,
//                        combinedtitle: obj.combinedtitle,
//                        isTrash: obj.isTrash.value
//                    }
//                ];

//                var table = document.createElement("table");
//                $(table).addClass("ObjektView");

//                var inputs = [];
//                for (var propertyname in obj) {
//                    var property = obj[propertyname]
//                    if (property.hidden == "false") {
//                        var elementname = property['elementname'];

//                        var tr = document.createElement("tr");
//                        var th = document.createElement("th");
//                        $(th).addClass("PropertyLabel");
//                        $(th).attr("title", property["description"]);
//                        var label = property['required'] == "true" ? "*" + property["label"] : property["label"];
//                        $(th).text(label + "：");
//                        var td = document.createElement("td");
//                        $(td).addClass("PropertyValue");
//                        $(tr).append(th).append(td);
//                        $(table).append(tr);
//                        if (elementname) {
//                            var ui = document.createElement(elementname);
//                            $(td).append(ui);
//                            ui['name'] = property['name'];
//                            ui['label'] = property['label'];
//                            ui['description'] = property['description'];
//                            ui['filterid'] = property['filterid'];
//                            ui['objektid'] = property['objektid'];
//                            ui['propertyname'] = property['propertyname'];
//                            ui['width'] = property['width'];
//                            ui['height'] = property['height'];
//                            ui['state'] = property['state'];
//                            ui['autosave'] = property['autosave'] == "true";
//                            ui['readonly'] = property['readonly'] == "true";
//                            ui['hidden'] = property['hidden'] == "true";
//                            ui['required'] = property['required'] == "true";
//                            ui['prec'] = property['prec'];
//                            ui['scale'] = property['scale'];

//                            if (elementname == 'Gf-ObjektPropertyView') {
//                                ui['value'] = JSON.stringify(property['value']);
//                                ui['idfield'] = property['idfield'];
//                                ui['namefield'] = property['namefield'];
//                                ui['href'] = property['href'];
//                                ui['klass'] = property['klass'];
//                            }
//                            else if (elementname == 'Gf-ListPropertyView') {
//                                ui['value'] = JSON.stringify(property['value']);
//                                ui['valuefield'] = property['valuefield'];
//                                ui['textfield'] = property['textfield'];
//                                ui['defaultoption'] = property['defaultoption'];
//                                ui['data'] = property['data'];
//                                if (property['value'] && property['value'].color) {
//                                    $(td).css("background-color", "#" + property['value'].color);
//                                }
//                            }
//                            else {
//                                ui['value'] = property['value'];
//                            }
//                            //ui["init"]();
//                            inputs.push(ui);
//                        }
//                        else {
//                            $(td).html(property['value']);
//                        }

//                    }

//                }
//                element.set("inputs", inputs);

//                if (obj.roccnames.length == 0) {
//                    center.html("");
//                    center.removeClass("panel-noscroll");
//                    center.append(table);
//                    $(layout).layout("remove", "west");
//                    $(layout).layout("remove", "south");
//                    element.set("hasRelated", false);
//                }
//                else {
//                    if (obj.viewLayout == 'Vertical') {
//                        $(tab).appendTo(south[0])
//                        south.addClass("panel-noscroll");
//                        center.html("");
//                        center.append(table);
//                        center.removeClass("panel-noscroll");
//                        $(layout).layout("remove", "west");
//                    }
//                    else {
//                        $(layout).layout("remove", "south");
//                        west.find("table").remove();
//                        west.append(table);
//                    }
//                    element.set("hasRelated", true);
//                    tab["lazyload"] = true;
//                    tab["init"]();
//                    tab["closeAll"]();
//                    $(obj.roccnames).each(function () {
//                        var klass = this.split('-')[0];
//                        var title = this.split('-')[1];
//                        var id = control.GetUniqueId(klass);
//                        var href = document.body["rocviewurl"] + "?klass=" + klass + "&id=" + element.objektid + "&sourceKlass=" + element.klass;
//                        tab["add"](id, title, href, "", false);
//                    });
//                    tab["overrideEventHandler"]("onLazyLoad", function (index) {
//                        var subTab = tab["getTab"](index);
//                        var grid = $(subTab).find("Gf-ObjektCollectionView")[0];
//                        if (grid && tab["state"] == "edit")
//                            grid.setState("edit");
//                    });
//                    tab["overrideEventHandler"]("onStateChange", function () {
//                        var tabs = tab["getAllTabs"]();
//                        $(tabs).each(function () {
//                            var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                            if (grid) {
//                                grid.setState(tab["state"]);
//                            }
//                        });
//                    });
//                    if (firstLoad) {
//                        element.registerEventHandler("onStateChange", function () {
//                            if (element.state == "edit")
//                                tab["setState"](element.state);
//                        });
//                    }
//                    tab["setState"](element.state);
//                    tab["select"](0);
//                }

//                //后处理
//                for (var inputitem in inputs) {
//                    inputs[inputitem]["init"]();
//                }

//                $(element.get("layout")).layout("resize", { width: '100%', height: '100%' });
//                control.setState(element, element.state);
//                if (firstLoad) {
//                    $(inputs).each(function () {
//                        var input = this;
//                        if (change && input.propertyname in change) {
//                            if (input.initcompleted)
//                                input.setValue(change[input.name]);
//                            else
//                                input.registerEventHandler("onafterinit", function () {
//                                    input.setValue(change[input.name]);
//                                });
//                        }
//                    });
//                    element.triggerEventHandler("oninitLoaded");
//                }
//            }
//        });
//    }

//    protected haschange(element) {
//        var haschange = false;
//        $(element.inputs).each(function () {
//            if (this.haschange) {
//                haschange = true;
//            }
//        });
//        if (element.get("hasRelated")) {
//            //列表保存
//            var tab = document.querySelector("#" + element.get("tabid"));
//            var subTabs = tab["getAllTabs"]();
//            $(subTabs).each(function () {
//                var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                if (grid) {
//                    if (grid.haschange)
//                        haschange = true;
//                }
//            });
//        }
//        return haschange;
//    }

//    protected setChangeObject(element, change) {
//        element.set("changeObject", change);
//    }

//    protected save(element) {
//        var ServerObjekt = element.get("ServerObjekt");
//        var forminputs = element.get("inputs");
//        var obj = element.get("changeObject") || {};
//        var haschange = false;
//        var validate = true;

//        var savelists = function () {
//            if (element.get("hasRelated")) {
//                //列表保存
//                var tab = document.querySelector("#" + element.get("tabid"));
//                var subTabs = tab["getAllTabs"]();
//                $(subTabs).each(function () {
//                    var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                    if (grid) {
//                        //处理klass的id
//                        if (element.klass == 'Klass' && obj.name) {
//                            var extra = grid.getExtraParams("saveList");
//                            extra = obj.name + "@Klass," + extra.split(',')[1];
//                            grid.setExtraParams("saveList", extra);
//                        }
//                        grid["saveList"](haschange);
//                    }
//                });
//            }
//        };
//        if (element.get("hasRelated")) {
//            //列表保存
//            var tab = document.querySelector("#" + element.get("tabid"));
//            var subTabs = tab["getAllTabs"]();
//            $(subTabs).each(function () {
//                var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                if (grid && !grid.endEditRows()) {
//                    validate = false;
//                }
//            });
//        }
//        //属性校验
//        $(forminputs).each(function () {
//            if (this.haschange) {
//                haschange = true;
//                obj[this.propertyname] = this.getValue();
//            }
//            else {
//                delete obj[this.propertyname];
//            }
//            if (!this.validate()) {
//                validate = false;
//            }
//        });
//        if (!haschange && this.getPropertyCount(obj) > 0) {
//            haschange = true;
//        }
//        if (haschange && validate) {
//            window["platformAjax"]({
//                url: document.body["editurl"],
//                data: { id: element.objektid, klass: element.klass, obj: JSON.stringify(obj) },
//                success: function (result) {
//                    savelists();
//                    element.objektid = result.Data;
//                    element.load("", false);
//                    element.triggerEventHandler("onaftersave");
//                }
//            });
//        }
//        else if (validate) {
//            savelists();
//        }
//    }
//}

////【对象属性集合视图】
//class GfObjektPropertyCollectionView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektPropertyView";
//        this.addProperty("inputs", "{ attribute: {}, get: function()  { return this.xtag.inputs;} }");
//        this.addProperties("objektid,klass,width");
//        this.addMethod("load", `function(state,inspectChange) {  
//                                    var element = this;
//                                    if(!state){
//                                        state = element.state;
//                                    }
//                                    var func = function(){
//                                            element.state = state;
//                                            control.buildPropertyControls(element);
//                                        };
//                                    if(inspectChange && control.haschange(this)){
//                                        control.confirm('有未保存的修改，是否放弃？', func);
//                                    }
//                                    else{
//                                        func();
//                                    } 
//                                }`);
//        this.addMethod("save", `function() { control.save(this); }`);
//        this.addMethod("setChangeObject", `function(change) { control.setChangeObject(this,change); }`);
//    }

//    protected initContent(element) {
//        if (!element.state) element.state = "read";
//        var table = document.createElement("table");
//        $(table).addClass("ObjektView");
//        element.appendChild(table);
//        element.set("table", table);
//        this.buildPropertyControls(element, true);
//    }

//    protected setState(element, state) {
//        var forminputs = element.get("inputs");
//        $(forminputs).each(function () {
//            this.setState(state);
//        });
//        super.setState(element, state);
//    }

//    protected buildPropertyControls(element, firstLoad) {
//        var control = this;
//        var change = element.get("changeObject");
//        if (change && change["dataType"]) {
//            var datatype = JSON.parse(change["dataType"]);
//            element.set("PropertyDataType", datatype.id);
//        }

//        control.ajax(element, {
//            url: document.body["getobjwithmetaurl"],
//            data: { id: element.objektid, klass: element.klass, dataTypeId: element.get("PropertyDataType") },
//            success: function (result) {
//                var obj = JSON.parse(result.Data);
//                element.set("ServerObjekt", obj);
//                var table = element.get("table");

//                var inputs = [];
//                for (var propertyname in obj) {
//                    var property = obj[propertyname]
//                    if (property.hidden == "false") {
//                        var elementname = property['elementname'];

//                        var tr = document.createElement("tr");
//                        var th = document.createElement("th");
//                        $(th).addClass("PropertyLabel");
//                        $(th).attr("title", property["description"]);
//                        var label = property['required'] == "true" ? "*" + property["label"] : property["label"];
//                        $(th).text(label + "：");
//                        var td = document.createElement("td");
//                        $(td).addClass("PropertyValue");
//                        $(tr).append(th).append(td);
//                        $(table).append(tr);
//                        if (elementname) {
//                            var ui = document.createElement(elementname);
//                            $(td).append(ui);
//                            ui['name'] = property['name'];
//                            ui['label'] = property['label'];
//                            ui['description'] = property['description'];
//                            ui['filterid'] = property['filterid'];
//                            ui['objektid'] = property['objektid'];
//                            ui['propertyname'] = property['propertyname'];
//                            ui['width'] = property['width'];
//                            ui['height'] = property['height'];
//                            ui['state'] = property['state'];
//                            ui['autosave'] = property['autosave'] == "true";
//                            ui['readonly'] = property['readonly'] == "true";
//                            ui['hidden'] = property['hidden'] == "true";
//                            ui['required'] = property['required'] == "true";
//                            ui['prec'] = property['prec'];
//                            ui['scale'] = property['scale'];

//                            if (elementname == 'Gf-ObjektPropertyView') {
//                                ui['value'] = JSON.stringify(property['value']);
//                                ui['idfield'] = property['idfield'];
//                                ui['namefield'] = property['namefield'];
//                                ui['href'] = property['href'];
//                                ui['klass'] = property['klass'];
//                            }
//                            else if (elementname == 'Gf-ListPropertyView') {
//                                ui['value'] = JSON.stringify(property['value']);
//                                ui['valuefield'] = property['valuefield'];
//                                ui['textfield'] = property['textfield'];
//                                ui['defaultoption'] = property['defaultoption'];
//                                ui['data'] = property['data'];
//                                if (property['value'] && property['value'].color) {
//                                    $(td).css("background-color", "#" + property['value'].color);
//                                }
//                            }
//                            else {
//                                ui['value'] = property['value'];
//                            }
//                            //ui["init"]();
//                            inputs.push(ui);
//                        }
//                        else {
//                            $(td).html(property['value']);
//                        }

//                    }

//                }
//                element.set("inputs", inputs);
//                //后处理
//                for (var inputitem in inputs) {
//                    inputs[inputitem]["init"]();
//                }

//                control.setState(element, element.state);
//                if (firstLoad) {
//                    $(inputs).each(function () {
//                        var input = this;
//                        if (change && input.propertyname in change) {
//                            if (input.initcompleted)
//                                input.setValue(change[input.name]);
//                            else
//                                input.registerEventHandler("onafterinit", function () {
//                                    input.setValue(change[input.name]);
//                                });
//                        }
//                    });
//                    element.triggerEventHandler("oninitLoaded");
//                }
//            }
//        });
//    }

//    protected haschange(element) {
//        var haschange = false;
//        $(element.inputs).each(function () {
//            if (this.haschange) {
//                haschange = true;
//            }
//        });
//        return haschange;
//    }

//    protected setChangeObject(element, change) {
//        element.set("changeObject", change);
//    }

//    protected save(element) {
//        var ServerObjekt = element.get("ServerObjekt");
//        var forminputs = element.get("inputs");
//        var obj = element.get("changeObject") || {};
//        var haschange = false;
//        var validate = true;

//        //属性校验
//        $(forminputs).each(function () {
//            if (this.haschange) {
//                haschange = true;
//                obj[this.propertyname] = this.getValue();
//            }
//            else {
//                delete obj[this.propertyname];
//            }
//            if (!this.validate()) {
//                validate = false;
//            }
//        });
//        if (!haschange && this.getPropertyCount(obj) > 0) {
//            haschange = true;
//        }
//        if (haschange && validate) {
//            window["platformAjax"]({
//                url: document.body["editurl"],
//                data: { id: element.objektid, klass: element.klass, obj: JSON.stringify(obj) },
//                success: function (result) {
//                    element.objektid = result.Data;
//                    element.load("", false);
//                    element.triggerEventHandler("onaftersave");
//                }
//            });
//        }
//    }
//}

////【对象关联集合视图】
//class GfObjektRocView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektRocView";
//        this.addProperties("objektid,klass,width");
//        this.addMethod("save", `function() { control.save(this); }`);
//    }

//    protected initContent(element) {
//        if (!element.state) element.state = "read";
//        var div = document.createElement("div");
//        element.set("div", div);
//        element.appendChild(div);

//        var tabid = this.GetUniqueId("tab");
//        $(div).html(`<div id="` + tabid + `" is="Gf-Tabs" class="frametabs" fit lazyload autoinit></div>`);
//        element.set("tabid", tabid);

//        this.buildTabs(element, true);

//    }

//    protected setState(element, state) {
//        var forminputs = element.get("inputs");
//        $(forminputs).each(function () {
//            this.setState(state);
//        });
//        //var tab = document.querySelector("#" + element.get("tabid"));
//        var toolbar = element.get("toolbar");
//        toolbar.setState(state);
//        super.setState(element, state);
//    }

//    protected buildTabs(element, firstLoad) {
//        var control = this;
//        var change = element.get("changeObject");
//        if (change && change["dataType"]) {
//            var datatype = JSON.parse(change["dataType"]);
//            element.set("PropertyDataType", datatype.id);
//        }

//        control.ajax(element, {
//            url: document.body["getobjwithmetaurl"],
//            data: { id: element.objektid, klass: element.klass, dataTypeId: element.get("PropertyDataType") },
//            success: function (result) {
//                var tabid = element.get("tabid");
//                var tab = document.getElementById(tabid);
//                var obj = JSON.parse(result.Data);
//                element.set("ServerObjekt", obj);

//                if (obj.roccnames.length > 0) {
//                    tab["lazyload"] = true;
//                    tab["init"]();
//                    tab["closeAll"]();
//                    $(obj.roccnames).each(function () {
//                        var klass = this.split('-')[0];
//                        var title = this.split('-')[1];
//                        var id = control.GetUniqueId(klass);
//                        var href = document.body["rocviewurl"] + "?klass=" + klass + "&id=" + element.objektid + "&sourceKlass=" + element.klass;
//                        tab["add"](id, title, href, "", false);
//                    });
//                    tab["overrideEventHandler"]("onLazyLoad", function (index) {
//                        var subTab = tab["getTab"](index);
//                        var grid = $(subTab).find("Gf-ObjektCollectionView")[0];
//                        if (grid && tab["state"] == "edit")
//                            grid.setState("edit");
//                    });
//                    tab["overrideEventHandler"]("onStateChange", function () {
//                        var tabs = tab["getAllTabs"]();
//                        $(tabs).each(function () {
//                            var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                            if (grid) {
//                                grid.setState(tab["state"]);
//                            }
//                        });
//                    });
//                    if (firstLoad) {
//                        element.registerEventHandler("onStateChange", function () {
//                            if (element.state == "edit")
//                                tab["setState"](element.state);
//                        });
//                    }
//                    tab["setState"](element.state);
//                    tab["select"](0);
//                }


//                control.setState(element, element.state);
//                if (firstLoad) {
//                    element.triggerEventHandler("oninitLoaded");
//                }
//            }
//        });
//    }

//    protected haschange(element) {
//        var haschange = false;
//        //列表保存
//        var tab = document.querySelector("#" + element.get("tabid"));
//        var subTabs = tab["getAllTabs"]();
//        $(subTabs).each(function () {
//            var grid = $(this).find("Gf-ObjektCollectionView")[0];
//            if (grid) {
//                if (grid.haschange)
//                    haschange = true;
//            }
//        });

//        return haschange;
//    }

//    protected setChangeObject(element, change) {
//        element.set("changeObject", change);
//    }

//    protected save(element) {
//        var ServerObjekt = element.get("ServerObjekt");
//        var obj = element.get("changeObject") || {};
//        var haschange = false;
//        var validate = true;

//        var tab = document.querySelector("#" + element.get("tabid"));
//        var subTabs = tab["getAllTabs"]();

//        $(subTabs).each(function () {
//            var grid = $(this).find("Gf-ObjektCollectionView")[0];
//            if (grid && !grid.endEditRows()) {
//                validate = false;
//            }
//        });

//        if (validate) {
//            $(subTabs).each(function () {
//                var grid = $(this).find("Gf-ObjektCollectionView")[0];
//                if (grid) {
//                    //处理klass的id
//                    if (element.klass == 'Klass' && obj.name) {
//                        var extra = grid.getExtraParams("saveList");
//                        extra = obj.name + "@Klass," + extra.split(',')[1];
//                        grid.setExtraParams("saveList", extra);
//                    }
//                    grid["saveList"](haschange);
//                }
//            });
//        }
//    }
//}

////【页面】
//class GfPage extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Page";
//        this.autoInit = true;
//        this.extends = "body";
//        this.addProperty("apppath");
//        this.addReadonlyProperties("menuhandleurl,getlistdataurl,getumlurl,checkumlurl,authorizeurl,getnewprivatepermissionurl");
//        this.addReadonlyProperties(`getklasstree,listexporturl,listsaveurl,listdataurl,rocviewurl,getobjwithmetaurl,editurl,selectobjekturl,referenceurl,getauthorizationurl`);
//        this.addReadonlyProperties(`onchangesaveurl,errorurl,upfileserver,exchangefileurl,trashurl,getobjekturl,getnewobjekturl`);
//        this.addMethod("openDialog", `function(option){/*option : id,title,modal,content,href,width,height,onBeforeClose,onClose,onOpen*/
//                                        var dialog = document.getElementById(option.id);
//                                        if (!dialog){
//                                            dialog = document.createElement("Gf-Dialog");
//                                            document.body.appendChild(dialog);
//                                            dialog.id = option.id;
//                                            dialog.modal = option.modal;
//                                            if(option.width){
//                                                dialog.width = option.width;
//                                            }
//                                            if(option.height){
//                                                dialog.height = option.height;
//                                            }
//                                            if(option.href){
//                                                dialog.href = option.href;
//                                            }
//                                            dialog.title = option.title;
//                                            dialog.init();
//                                        }
//                                        if(option.onBeforeClose){
//                                            dialog.registerEventHandler("onBeforeClose",onBeforeClose);
//                                        }
//                                        if(option.onClose){
//                                            dialog.registerEventHandler("onClose",onClose);
//                                        }
//                                        if(option.onOpen){
//                                            dialog.registerEventHandler("onOpen",onOpen);
//                                        }
//                                        if(option.content){
//                                            dialog.clearContent();
//                                            dialog.appendContent(option.content);
//                                        }
//                                        dialog.open();    
//                                        return dialog;                         
//        }`);
//        this.addMethod("closeDialog", `function(id){
//            var dialog = document.getElementById(id);
//            if(dialog){
//                dialog.close();
//            }
//        }`);
//        this.addMethod("openObjDetail", `function (option) {    /*option : controlid,objid,klass,state,title,oninitLoaded, modal*/
//                                            var objektview = document.createElement("Gf-ObjektView");
//                                            objektview.objektid = option.objid || "";
//                                            objektview.klass = option.klass;
//                                            objektview.title = option.title;
//                                            objektview.state = option.state;
//                                            if(option.onbeforeinit){
//                                                objektview.registerEventHandler("onbeforeinit", option.onbeforeinit);
//                                            }
//                                            if(option.onafterinit){
//                                                objektview.registerEventHandler("onafterinit", option.onafterinit);
//                                            }
//                                            if(option.onaftersave){
//                                                objektview.registerEventHandler("onaftersave", option.onaftersave);
//                                            }
//                                            if(option.oninitLoaded){
//                                                objektview.registerEventHandler("oninitLoaded", option.oninitLoaded);
//                                            }
//                                            this.openDialog({
//                                                id : option.controlid + "dialog",
//                                                title : option.title,
//                                                modal : option.modal,
//                                                content : objektview
//                                            });
//                                            objektview.init();
//                                        }`);
//        this.addMethod("openTabPage", `function (id, url, title, isiframe) {
//                                            var tabs = document.querySelector("#frametabs");
//                                            tabs.add(id, title, url, "",isiframe);
//                                        }`);
        
//        this.addMethod("openMenu", `function (menu) {            
//            var element = this;
//            window["platformAjax"]({
//                url: document.body["menuhandleurl"],
//                data: { menuId: menu.id, parentMenuId: menu.parentId },
//                success: function(result) {
//                    var tabs = document.querySelector("#frametabs");
//                    switch(result.HandleType){
//                        case 'Url':                                                
//                            if(menu.ShowMode == "1"){
//                                tabs.add(menu.id, result.Title, result.Url, "",result.IsPage);
//                            }
//                            else if(menu.ShowMode == "2" || menu.ShowMode == "3"){
//                                element.openDialog({
//                                    id : menu.id + "dialog",
//                                    title : result.Title,
//                                    modal : result.ShowMode == "2",
//                                    href : result.Url
//                                });
//                            }
//                            else if(menu.ShowMode=="4"){
//                                window.open(result.Url,result.Title);
//                            }
//                        break;
//                        case 'Content':                            
//                            if(menu.ShowMode == "1"){
//                                tabs.addContent(menu.id,result.Title,result.Content);
//                            }
//                            else if(menu.ShowMode == "2" || menu.ShowMode == "3"){
//                                element.openDialog({
//                                    id : menu.id + "dialog",
//                                    title : result.Title,
//                                    modal : result.ShowMode == "2",
//                                    content : result.Content
//                                });
//                            }
//                            else if(menu.ShowMode=="4"){                                
//                                tabs.addContent(menu.id,result.Title,result.Content);
//                            }
//                        break;                  
//                        case 'Script':
//                        eval(result.Script);
//                        break;
//                    }
//                }
//            });
//        }`);
//        this.addMethod("showError", `function (message, detail) {
//                                            var page = this;
//                                            var div = page.get("errorDiv");
//                                            if(!div){
//                                                div = document.createElement("div");
//                                                page.set("errorDiv",div);
//                                                page.appendChild(div);
//                                            }
//                                            $(div).load(page.errorurl,{message:message,detail:detail});
//                                             $(div).dialog({
//                                                title: '异常',
//                                                width: 800,
//                                                height: 500,
//                                                closed: true,
//                                                cache: false,
//                                                modal: false,
//                                                resizable: true
//                                            });
//                                        }`);

//        this.addMethod("openUpFileDetail", `function (dirid, dirname, func, fileNumLimit,ext,url) {
//                                            var fileOptions = this.getCustomAttr('fileOptions');
//                                            var directoryid = dirid || fileOptions.directoryid;
//                                            var directoryname = dirname || fileOptions.directoryname;
//                                            var callback = func || fileOptions.callback;
//                                            var upfileserver = url || this.upfileserver;

//                                            var UpFile = this.get("UpFile");
//                                            if (!UpFile) {
//                                                UpFile = document.createElement("Gf-UpFileDialog");
//                                                document.body.appendChild(UpFile);                                                
//                                            }
//                                            UpFile.title='文件上传';
//                                            UpFile.directoryid=directoryid;
//                                            UpFile.directoryname=directoryname;
//                                            UpFile.upfileserver= upfileserver;
//                                            UpFile.fileNumLimit = fileNumLimit || 100;
//                                            UpFile.registerEventHandler("onSubmit", callback);
//                                            UpFile.ext = ext || "";
//                                            this.set("UpFile",UpFile);
//                                            UpFile.open();

//                                            //this.setCustomAttr('fileOptions',{ directoryid : directoryid,directoryname: directoryname,callback:callback });
//                                        }`);
//        this.addMethod("tabGoto", `function(url){
//            var tabs = document.querySelector("#frametabs");
//            tabs.tabGoto(url);
//        }`);
//        this.addMethod("tabGoback", `function(){
//            var tabs = document.querySelector("#frametabs");
//            tabs.tabGoback();
//        }`);

//    }

//    protected initContent(element) {
//        element.istop = true;
//        var urls = [
//            "getnewprivatepermissionurl",
//            "menuhandleurl",
//            "getlistdataurl",
//            "getumlurl",
//            "checkumlurl",
//            "authorizeurl",
//            "getklasstree",
//            "listexporturl",
//            "listsaveurl",
//            "listdataurl",
//            "rocviewurl",
//            "getobjwithmetaurl",
//            "editurl",
//            "selectobjekturl",
//            "referenceurl",
//            "getauthorizationurl",
//            "onchangesaveurl",
//            "errorurl",
//            "upfileserver",
//            "exchangefileurl",
//            "trashurl",
//            "getobjekturl",
//            "getnewobjekturl"
//        ];
//        $(urls).each(function () {
//            var url = $(element).attr(this);
//            if (url) {
//                element.set(this, url);
//                $(element).removeAttr(this);
//            }
//        });
//    }

//}

////【属性组件基类】
//abstract class GfPropertyView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.addProperties("name,value,label,description,width,height,objektid,propertyname,filterid");
//        this.addboolProperties("required,readonly,autosave,disable");
//        this.addProperty("haschange", "{ attribute: {}, get: function()  { return this.xtag.haschange;} }");
//        this.addMethod("validate", "function() { return control.validate(this); }");
//        this.addMethods("getValue");
//        this.addMethod("setValue", "function(value) { control.setValue(this, value); }");
//        this.addMethod("setDisplay", "function(display) { $(display).html(this.getValue()); }");
//        this.addMethod("resize", "function(width) { }");
//        this.addMethod("focus", "function() { }");
//        this.emptyValue = '';
//    }

//    protected emptyValue: any;

//    protected validate(element) {
//        if (element.required) {
//            if (this.valueEquals(element.getValue(), this.emptyValue, element)) {
//                this.warning('"' + element.label + '"必填');
//                return false;
//            }
//        }
//        return true;
//    }

//    protected valueEquals(oldValue, newValue, element) {
//        return oldValue === newValue;
//    }

//    protected innerSetValue(element, value) { }

//    protected setValue(element, value) {
//        var oldValue = element.getValue();

//        this.innerSetValue(element, value);
//        var newValue = element.getValue();

//        if (!this.valueEquals(oldValue, newValue, element)) {
//            element.triggerEventHandler("onafterchange", [value, oldValue]);
//        }
//        else if (element.get("originalValue") === null) {
//            element.set("originalValue", value);
//        }
//    }

//    protected create(element) {
//        var control = this;
//        this.buildStateFrame(element);

//        element.set("originalValue", null);
//        element.set("haschange", false);

//        element.registerEventHandler("onafterinit", function () {
//            element.state = element.state || "edit";
//            element.setState(element.state);
//            if (typeof ($(element).attr("value")) != "undefined") {
//                element.setValue(element.value);
//            }
//            //$(element).find("pre").css("font-family", "微软雅黑");
//        });

//        element.registerEventHandler("onafterchange", function () {
//            var originalValue = element.get("originalValue");
//            var value = element.getValue();
//            if (originalValue === null) {
//                element.set("originalValue", value)
//            }
//            else {
//                element.set("haschange", !control.valueEquals(originalValue, value, element));
//                if (element.autosave) {
//                    control.onChangeSave(element);
//                }
//            }
//            element.setDisplay(element.get("display"));
//        });
//        $(element).dblclick(function (event) {
//            if (element.state == "edit") {
//                event.stopPropagation();
//            }
//        });
//        super.create(element);
//    }

//    protected buildStateFrame(element) {

//        var wrapper = document.createElement("span");
//        element.set("wrapper", wrapper);
//        element.appendChild(wrapper);

//        var display = document.createElement("pre");
//        $(display).hide();
//        element.set("display", display);
//        element.appendChild(display);
//    }

//    protected setState(element, state) {

//        if (state == "edit" && !element.readonly) {
//            $(element.get("wrapper")).show();
//            $(element.get("display")).hide();
//        }
//        else {
//            var display = element.get("display");
//            element.setDisplay(display);
//            $(display).css("display", "inline");
//            $(element.get("wrapper")).hide();
//        }
//        super.setState(element, state);
//    }

//    protected hidepre(element) {
//        $(element.get("display")).hide();
//    }

//    protected onChangeSave(element) {
//        window["platformAjax"]({
//            url: document.body["onchangesaveurl"],
//            data: { objektid: element.objektid, propertyname: element.propertyname, value: element.getValue() },
//            success: function (result) { }
//        });
//    }
//}

////【字符串属性组件】
//class GfStringPropertyView extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-StringPropertyView";
//        this.addboolProperties("disabled,diseditable");
//        this.methods["disable"] = "function() {   $(this.xtag.input).textbox('disable'); }";
//        this.methods["enable"] = "function() {   $(this.xtag.input).textbox('enable'); }";
//        this.methods["getValue"] = "function() {  return $(this.xtag.input).textbox('getValue'); }";
//        this.methods["resize"] = "function(width) { $(this.xtag.input).textbox('resize',width); }";
//        this.methods["setDisplay"] = `function(display) { 
//                                            var value = this.getValue();
//                                            if(this.propertyname && this.propertyname.toLowerCase() == 'filecontent'){
//                                                value = window["htmlEncode"](value);
//                                            }
//                                            $(display).html(value);
//                                        }`;
//        this.methods["focus"] = `function() {  $(this.xtag.input).textbox('textbox').focus();  }`;
//        this.addMethod("setReadOnly", "function(isReadOnly) {  $(this.xtag.input).textbox('readonly',isReadOnly); }");

//    }
//    protected innerSetValue(element, value) {
//        $(element.xtag.input).textbox('setValue', value);
//    }

//    protected buildinput(element) {
//        var input = document.createElement("input");
//        $(input).attr("name", $(element).attr("name"));
//        $(input).val(element.value);
//        element.set("input", input);
//        element.get("wrapper").appendChild(input);
//        return input;
//    }

//    protected initContent(element) {

//        var input = this.buildinput(element);
//        $(input).textbox({
//            width: element.width || 170,
//            height: element.height || 26,
//            disabled: element.disabled,
//            editable: !element.diseditable,
//            onChange: function (newValue, oldValue) {
//                element.triggerEventHandler("onafterchange", [newValue, oldValue]);
//            }
//        });
//    }
//}

////【文本属性组件】
//class GfTextPropertyView extends GfStringPropertyView {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-TextPropertyView";
//        this.methods["setDisplay"] = `function (display) { $(display).html(control.replaceDisplayWrapMark(this.getValue())); }`;
//        this.methods["getValue"] = "function() {  return $(this.xtag.input).textbox('getValue'); }";
//    }

//    protected innerSetValue(element, value) {
//        $(element.xtag.input).textbox('setValue', this.replaceEditWrapMark(value));
//    }

//    protected replaceDisplayWrapMark(text) {
//        var value = this.safeToString(text).replace(new RegExp('\r\n', 'gm'), '<br>');
//        value = value.replace(new RegExp('\n', 'gm'), '<br>');
//        return value;
//    }

//    protected replaceEditWrapMark(text) {
//        return this.safeToString(text).replace(new RegExp('<br>', 'gm'), '\r\n');
//    }

//    protected setState(element, state) {
//        element.setValue(element.getValue());
//        super.setState(element, state);
//    }

//    protected initContent(element) {
//        var input = this.buildinput(element);
//        $(input).textbox({
//            width: element.width || 550,
//            height: element.height || 100,
//            multiline: true,
//            onChange: function (newValue, oldValue) {
//                element.triggerEventHandler("onafterchange", [newValue, oldValue]);
//            }
//        });
//    }
//}
////【富文本属性组件】
//class GfRichContentPropertyView extends GfStringPropertyView {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.addProperties("klass,filebrowserBrowseUrl,filebrowserUploadUrl,toolbar,applicationPath,resize_enabled,maxlength");
//        this.elementName = "Gf-RichContentPropertyView";
//        this.methods["setDisplay"] = `function(display) { 
//                                            var value = this.getValue();
//                                            $(display).html(control.addAppPath(value));
//                                        }`;
//        this.methods["setReadOnly"] = `function(readonly) { 
//                                          CKEDITOR.instances[this.xtag.input.id].config.readOnly = readonly;
//                                        }`;

//        this.methods["setToolbar"] = `function(toolbar) { 
//                                          CKEDITOR.instances[this.xtag.input.id].config.toolbar = toolbar;
//                                        }`;

//        this.methods["setHeight"] = `function(offsetHeight) { 
//                                            CKEDITOR.instances[this.xtag.input.id].resize("99.7%",  offsetHeight -35);
//                                        }`;

//        this.methods["ckResize"] = `function(offsetWidth,offsetHeight) { 
//                                            CKEDITOR.instances[this.xtag.input.id].resize(offsetWidth,  offsetHeight);
//                                        }`;

//        this.methods["getValue"] = `function() { 
//            var value = '';
//            if(CKEDITOR.instances[this.xtag.input.id]){
//                CKEDITOR.instances[this.xtag.input.id].updateElement(); 
//                value = CKEDITOR.instances[this.xtag.input.id].getData();
//            }
//            else{
//                value = $(this.xtag.input).val();
//            }
//            return control.removeAppPath(value);
//         }`;
//        this.addMethod("insertHtml", `function(value){
//             control.insertHtml(this,value);
//         }`);
//    }

//    protected addAppPath(value) {
//        var text = this.safeToString(value);
//        while (text.indexOf('~/file?id=') >= 0) {
//            text = text.replace('~/file?id=', document.body["apppath"] + 'file?id=');
//        }
//        return text;
//    }

//    protected removeAppPath(value) {
//        return this.safeToString(value).replace(new RegExp(document.body["apppath"] + '/file?id=', 'gm'), '~/file?id=');
//    }

//    protected insertHtml(element, value) {
//        CKEDITOR.instances[element.xtag.input.id].insertHtml(value);
//    }

//    protected innerSetValue(element, value) {
//        value = this.addAppPath(value);
//        if (CKEDITOR.instances[element.xtag.input.id]) {
//            CKEDITOR.instances[element.xtag.input.id].setData(value);
//        }
//        else {
//            $(element.xtag.input).val(value);
//        }
//    }

//    protected setState(element, state) {
//        if (state == "edit" && !element.get("editor")) {
//            var input = element.get("input");
//            var configresize_enabled = true;
//            if (element.resize_enabled == "false")
//            {
//                configresize_enabled = false; 
//            }
//            var config = {
//                toolbar: element.toolbar || 'Full',
//                filebrowserBrowseUrl: element.filebrowserBrowseUrl || "",
//                filebrowserUploadUrl: element.filebrowserUploadUrl || element.applicationPath + "/CkEditor/CkeditorUpload",
//                width: element.width || 200,
//                height: element.height || 150,
//                toolbarLocation: element.toolbar == 'None' ? 'none' : 'top',
//                resize_enabled: configresize_enabled
//            };

//            CKEDITOR.replace(input.id, config);

//            var editor = CKEDITOR.instances[input.id];
//            editor.setData($(input).val());

//            editor.on('change', function (evt) {
//                $(input).val(editor.getData());
//                element.triggerEventHandler("onafterchange");
//            });
//            if (element.maxlength) {
//                var maxlength = parseInt(element.maxlength);
//                editor.on('key', function (event) {

//                    var keycode = event.data.keyCode;
//                    if (keycode == 8 || keycode == 13 || keycode == 32)
//                        return;
//                    var oldhtml = editor.document.getBody().getHtml();
//                    var description = oldhtml.replace(/<.*?>/ig, "");

//                    if (description.length >= maxlength) {
//                        editor.setData(oldhtml);
//                    }
//                });
//            }
//            element.xtag.editor = editor;
//        }
//        super.setState(element, state);
//    }

//    protected create(element) {
//        var control = this;
//        element.registerEventHandler("onbeforeinit", function () {
//            if (typeof CKEDITOR === "undefined") {
//                control.includeJS(document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/ckeditor.js");
//                control.includeJS(document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/ck_utility.js");
//            }
//        });
//        super.create(element);
//    }
//    protected initContent(element) {
//        element.applicationPath = document.body["apppath"];
//        var input = this.buildinput(element);
//        input.id = this.GetUniqueId("Editor");
//    }
//}
////【源码文本属性组件】
//class GfSourceCodePropertyView extends GfPropertyView {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-SourceCodePropertyView";
//        this.methods["getValue"] = `function() {  
//            var editor = this.get("aceeditor");
//            if(editor)
//                return editor.getValue(); 
//            else
//                return "";
//        }`;
//        this.methods["setDisplay"] = `function(display) { 

//                                        }`;
//    }

//    protected innerSetValue(element, value) {
//        if (element.get("aceeditor")) {
//        }
//        else {
//        }
//    }

//    protected initContent(element) {

//        var div = document.createElement("div");
//        $(div).css("height", 604);
//        $(div).addClass("GfSourceCodePropertyView")
//        //$(div).css("background-color", "#8B8682");
//        element.appendChild(div);

//        var pre = document.createElement("pre");
//        pre.id = this.GetUniqueId("AceEditor");
//        $(pre).attr("name", $(element).attr("name"));
//        //$(pre).css("height", 600);
//        //$(pre).css("margin", 2);
//        //$(pre).css("top", 2);
//        //$(pre).css("bottom", 0);
//        //$(pre).css("left", 0);
//        //$(pre).css("right", 0);
//        //$(pre).css("font", "12px/normal 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace");
//        pre.innerHTML = window["htmlEncode"](element.value);
//        div.appendChild(pre);
//        element.set("pre", pre);

//        if (!element.get("aceeditor")) {
//            window["require"]("ace/ext/old_ie");
//            var editor = window["ace"].edit(pre.id);
//            editor.setTheme("ace/theme/textmate");
//            editor.session.setMode("ace/mode/javascript");
//            editor.resize();
//            element.set("aceeditor", editor);
//            editor.getSession().on('change', function (e) {
//                element.triggerEventHandler("onafterchange", ["", editor.getValue()]);
//            });

//            $(div).resizable({
//                onStartResize: function (e) {
//                },
//                onResize: function (e) {
//                },
//                onStopResize: function (e) {
//                    $(element.get("pre")).css("height", $(div).height() - 4);
//                    element.get("aceeditor").resize();
//                }
//            });
//        }
//    }

//    protected setState(element, state) {
//        if (state == "edit") {
//            element.get("aceeditor").setReadOnly(false);
//        } else {
//            element.get("aceeditor").setReadOnly(true);
//        }
//        super.setState(element, state);
//        super.hidepre(element);
//    }

//    protected create(element) {
//        var control = this;
//        element.registerEventHandler("onbeforeinit", function () {
//            if (window["require"] === undefined) {
//                control.includeJS(document.body["apppath"] + "Platform/Content/Scripts/aceeditor/ace.js");
//                control.includeJS(document.body["apppath"] + `Platform/Content/Scripts/aceeditor/ext-old_ie.js`);
//            }
//        });
//        super.create(element);
//    }
//}

////【MD5属性组件】
//class GfMD5PropertyView extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-MD5PropertyView";
//        this.addboolProperties("disabled,diseditable");
//        this.methods["disable"] = "function() {   $(this.xtag.passwordbox).passwordbox('disable'); }";
//        this.methods["enable"] = "function() {   $(this.xtag.passwordbox).passwordbox('enable'); }";
//        this.methods["getValue"] = "function() {  return $(this.xtag.input).val(); }";
//        this.methods["resize"] = "function(width) { $(this.xtag.passwordbox).passwordbox('resize',width); }";
//        this.methods["setDisplay"] = `function(display) { 
//                                            $(display).html('******');
//                                        }`;
//        this.methods["focus"] = `function() { $(this).find(".textbox-text").focus();  }`;
//        this.addMethod("setReadOnly", "function(isReadOnly) {  $(this.xtag.passwordbox).passwordbox('readonly',isReadOnly); }");

//    }
//    protected innerSetValue(element, value) {
//        $(element.xtag.input).val(value);
//        $(element.get("passwordbox")).passwordbox('setValue', value);
//    }

//    protected buildinput(element) {
//        var input = document.createElement("input");
//        $(input).attr("name", $(element).attr("name"));
//        $(input).val(element.value);
//        $(input).hide();
//        element.set("input", input);
//        element.get("wrapper").appendChild(input);

//        var passwordbox = document.createElement("input");
//        element.set("passwordbox", passwordbox);
//        element.get("wrapper").appendChild(passwordbox);

//        return passwordbox;
//    }

//    protected initContent(element) {

//        var passwordbox = this.buildinput(element);
//        passwordbox.id = this.GetUniqueId("passwordbox");
//        element.set("passwordbox", passwordbox);
//        $(passwordbox).passwordbox({
//            showEye: false,
//            passwordChar: '•',
//            width: element.width || 170,
//            height: element.height || 26,
//            disabled: element.disabled,
//            editable: !element.diseditable,
//            onChange: function (newValue, oldValue) {
//            }
//        });
//        var realInput = $(element).find(".textbox-prompt");
//        realInput.focus(function () {
//            $(passwordbox).passwordbox('setValue', '');
//        });
//        realInput.blur(function () {
//            var newValue = $(passwordbox).passwordbox('getValue');
//            var oldValue = element.getValue();
//            if (newValue != '') {
//                element.setValue(newValue);
//                element.triggerEventHandler("onafterchange", [newValue, oldValue]);
//            }
//            else {
//                $(passwordbox).passwordbox('setValue', oldValue);
//            }
//        });
//    }
//}

////【小数属性组件】
//class GfNumberPropertyView extends GfStringPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-NumberPropertyView";
//        this.addProperties("min,max,prec,scale");

//        this.defaultMaxValue = 9007199254740992;
//        this.defaultMinValue = -9007199254740992;
//        this.defaultPrecision = 16;
//        this.defaultScale = 8;
//    }
//    //最大值
//    protected defaultMaxValue: number;
//    //最小值
//    protected defaultMinValue: number;
//    //整数位数
//    protected defaultPrecision: number;
//    //小数位数
//    protected defaultScale: number;

//    protected valueEquals(oldValue, newValue, element) {
//        if (!oldValue && !newValue) {
//            return true;
//        }
//        return parseFloat(oldValue) == parseFloat(newValue);
//    }

//    protected getValueRange(element) {

//        //整数位数允许的最大值
//        var precisionMax = 1;
//        //小数位数决定的小数点后的部分
//        var scaleMin = "";

//        var precision = Math.min(parseInt(element.prec || this.defaultPrecision), this.defaultPrecision);
//        if (precision > 0) {
//            for (var i = 0; i < precision; i++) {
//                precisionMax = precisionMax * 10;
//            }
//        }
//        var scale = Math.min(parseInt(element.scale || this.defaultScale), this.defaultScale);
//        if (scale > 0) {
//            scaleMin += ".";
//            for (var i = 0; i < scale; i++) {
//                scaleMin += "9";
//            }
//        }

//        var precisionMax = parseFloat((precisionMax - 1).toString() + scaleMin);

//        var max = Math.min(precisionMax, parseInt(element.max || this.defaultMaxValue), this.defaultMaxValue);

//        var min = Math.max(0 - precisionMax, parseInt(element.min || this.defaultMinValue), this.defaultMinValue);
//        return { max: max, min: min };
//    }

//    protected initContent(element) {

//        var range = this.getValueRange(element);

//        var scale = Math.min(parseInt(element.scale || this.defaultScale), this.defaultScale);
//        var input = this.buildinput(element);
//        $(input).numberbox({
//            min: range.min,
//            max: range.max,
//            width: element.width || 170,
//            height: element.height || 26,
//            precision: scale,
//            onChange: function (value) {
//                element.triggerEventHandler("onafterchange");
//            }
//        });
//    }
//}

////【大整数属性组件】
//class GfBigIntPropertyView extends GfNumberPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-BigIntPropertyView";
//        this.defaultScale = 0;
//    }

//    protected valueEquals(oldValue, newValue, element) {
//        if (!oldValue && !newValue) {
//            return true;
//        }
//        return parseInt(oldValue) == parseInt(newValue);
//    }
//}

////【整数属性组件】
//class GfIntPropertyView extends GfBigIntPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-IntPropertyView";

//        this.defaultMaxValue = 2147483647;
//        this.defaultMinValue = -2147483648;
//        this.defaultPrecision = 10;
//    }

//}

////【日期属性组件】
//class GfDatePropertyView extends GfStringPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-DatePropertyView";
//    }

//    protected initContent(element) {
//        var input = this.buildinput(element);
//        $(input).datebox({
//            width: element.width || 170,
//            height: element.height || 26,
//            editable: true,
//            formatter: function (date) { return date.getFullYear() + '/' + (date.getMonth() + 1) + '/' + date.getDate(); },
//            parser: function (s) {
//                var t = Date.parse(s);
//                if (!isNaN(t)) {
//                    return new Date(t);
//                } else {
//                    return new Date();
//                }
//            },
//            onChange: function (value) {
//                element.triggerEventHandler("onafterchange", [value]);
//            }
//        });
//    }
//}

////【日期时间属性组件】
//class GfDateTimePropertyView extends GfDatePropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-DateTimePropertyView";

//    }
//    protected initContent(element) {
//        var input = this.buildinput(element);
//        $(input).datetimebox({
//            width: element.width || 170,
//            height: element.height || 26,
//            editable: true,
//            formatter: function (date) {
//                var y = date.getFullYear();
//                var m = date.getMonth() + 1;
//                var d = date.getDate();
//                var h = date.getHours();
//                var mi = date.getMinutes();
//                var s = date.getSeconds();
//                function formatNumber(value) {
//                    return (value < 10 ? '0' : '') + value;
//                }
//                return y + '/' + m + '/' + d + ' ' + formatNumber(h) + ':' + formatNumber(mi) + ':' + formatNumber(s);
//            },
//            parser: function (s) {
//                var t = Date.parse(s);
//                if (!isNaN(t)) {
//                    return new Date(t);
//                } else {
//                    return new Date();
//                }
//            },
//            onChange: function (value) {
//                element.triggerEventHandler("onafterchange", [value]);
//            }
//        });
//        var name = this.elementName;
//    }
//}

////【时间属性组件】
//class GfTimePropertyView extends GfStringPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-TimePropertyView";
//    }

//    protected initContent(element) {
//        var input = this.buildinput(element);
//        $(input).timespinner({
//            width: element.width || 170,
//            height: element.height || 26,
//            showSeconds: true,
//            onChange: function (value) {
//                element.triggerEventHandler("onafterchange", [value]);
//            }
//        });
//    }
//}

////【布尔属性组件】
//class GfBooleanPropertyView extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-BooleanPropertyView";
//        this.addProperty("checked", "{ attribute: {}, get: function()  { return $(this.xtag.input).attr('checked') == 'checked';}, set: function(val)  { this.setValue(val); } }");
//        this.methods["disable"] = "function() {   $(this.xtag.input).attr('disabled','disabled'); }";
//        this.methods["enable"] = "function() {   $(this.xtag.input).removeAttr('disabled'); }";
//        this.methods["getValue"] = `function() {   return $(this.xtag.hiddenValue).val().toLowerCase() == "true";}`;
//        this.methods["setDisplay"] = `function(display) { $(display).html(this.getValue() ? "√" : ""); }`;
//    }


//    protected innerSetValue(element, value) {
//        $(element.xtag.input).prop('checked', (value && value.toString().toLowerCase() == 'true'));
//        $(element.xtag.hiddenValue).val(value);
//    }

//    protected initContent(element) {
//        var wrapper = element.get("wrapper");
//        var display = element.get("display");

//        var input = document.createElement("input");
//        var hiddenValue = document.createElement("input");
//        $(input).attr("name", $(element).attr("name"));
//        $(input).attr("type", "checkbox");
//        var value = $(element).attr("value");
//        if (value && value.toString().toLowerCase() == "true") {
//            $(input).attr("checked", "checked");
//        }
//        $(input).val(value);
//        $(input).change(function () {
//            if ($(input).prop('checked')) {
//                $(hiddenValue).val("true");
//            }
//            else {
//                $(hiddenValue).val("false");
//            }
//            element.triggerEventHandler("onafterchange");

//        });
//        $(hiddenValue).attr("name", $(element).attr("name"));
//        $(hiddenValue).attr("type", "hidden");
//        $(hiddenValue).val("false");

//        wrapper.appendChild(hiddenValue);
//        wrapper.appendChild(input);
//        var height = element.height || 24;
//        height = height > 13 ? height : 13;
//        var diff = Math.floor(height / 2 - 7);
//        $(wrapper).css("vertical-align", "-" + diff + "px");
//        $(wrapper).css("padding-left", "5px");
//        element.xtag.input = input;
//        element.xtag.hiddenValue = hiddenValue;
//    }
//}

////【对象属性组件】
//class GfObjektPropertyView extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektPropertyView";
//        this.addProperties("href,idfield,namefield,klass");
//        this.addboolProperties("forbidOpen,forbidEdit,forbidClear");
//        this.addMethod("open", `function(){ 
//                                    var ObjectSelector = this;
//                                    var href = this.href || document.body.selectobjekturl;
//                                    var dialog = this.get('SelectDialog'); 
//                                    if(!this.get("loaded")){
//                                        control.openSelector(this);
//                                        this.set("loaded",true);
//                                    }
//                                    dialog.open();
//                                    /*$(dialog).dialog('open'); */
//                                }`);
//        this.addMethod("close", "function(){ this.get('SelectDialog').close(); }");
//        this.methods["getValue"] = `function() { return JSON.stringify(this.get("obj")); }`;
//        this.methods["setDisplay"] = `function(display) { 
//                                        var browser = this.get("browser");
//                                        var obj = this.get("obj"); 
//                                        if(!obj){
//                                            $(browser).html("");
//                                            return;
//                                        }
//                                        $(browser).html(obj[this.namefield]);  
//                                    }`;
//        this.methods["resize"] = "function(width) { this.xtag.nameinput.resize(width - 52); }";
//        this.addMethod("setObject", `function(obj){ 
//                                        if(!obj || !obj[this.idfield]){
//                                            obj = {};
//                                            obj['klass'] = this.klass;
//                                            obj['title'] = '';
//                                            obj[this.namefield] = '';
//                                            obj[this.idfield] = '';
//                                            obj.permissioncode = '11111';
//                                        }
//                                        var browser = this.get("browser");
//                                        var name = obj[this.namefield];
//                                        if(!obj.permissioncode){
//                                            this.forbidOpen = true;
//                                            obj[this.namefield] = '无发现权';
//                                            name = "<span class='fa fa-exclamation-circle'></span>无发现权";
//                                        }
//                                        else if(obj.permissioncode === "-1"){
//                                            this.forbidOpen = true;
//                                            obj[this.namefield] = '该对象不存在';
//                                            name = "<span class='fa fa-exclamation-circle'></span>该对象不存在";
//                                        }
//                                        else if(obj.permissioncode[0] === "0"){
//                                            this.forbidOpen = true;
//                                            obj[this.namefield] = '无发现权';
//                                            name = "<span class='fa fa-exclamation-circle'></span>无发现权"
//                                        }
//                                        else if(obj.permissioncode[1] === "0"){
//                                            this.forbidOpen = true;
//                                        }

//                                        $(browser).html(name);  
//                                        if(obj[this.namefield] === ""){
//                                            obj[this.namefield] = obj[this.idfield];
//                                        }
//                                        this.set("obj",obj); 
//                                        this.get("nameinput").setValue(obj[this.namefield]);
//                                        this.get("valueinput").value = JSON.stringify(obj);
//                                     }`);
//        this.addMethod("getObject", `function(){ return this.get("obj"); }`);
//        this.emptyValue = null;

//    }

//    protected attributeChange(element, attrName: string, oldValue, newValue) {

//        super.attributeChange(element, attrName, oldValue, newValue);

//        if (attrName === "forbid-open" && newValue === "") {
//            var browser = element.get("browser");
//            $(browser).css("text-decoration", "none");
//            $(browser).unbind();
//        }
//    }

//    protected innerSetValue(element, value) {
//        if (value) {
//            if (window["isString"](value)) {
//                var obj = this.stringToObject(value);
//                element.setObject(obj);
//            } else {
//                element.setObject(value);
//            }
//        }
//        else {
//            element.setObject(null);
//        }
//    }

//    protected parseToObject(element, value) {
//        var obj = {};
//        obj['klass'] = element.klass;
//        obj['title'] = '';
//        obj[element.namefield] = '';
//        obj[element.idfield] = '';

//        if (value) {
//            if (window["isString"](value)) {
//                obj = this.stringToObject(value);
//            }
//            else {
//                obj = value
//            }
//        }
//        return obj;
//    }

//    protected valueEquals(oldValue, newValue, element) {
//        return this.parseToObject(element, oldValue)[element.idfield] == this.parseToObject(element, newValue)[element.idfield];
//    }

//    protected initContent(element) {
//        $(element).addClass("GfObjektPropertyView");
//        element.set("loaded", false);
//        element.idfield = element.idfield || "id";
//        element.namefield = element.namefield || "combinedLabel";
//        //输入框
//        var nameinput = document.createElement("Gf-StringPropertyView");
//        element.set("nameinput", nameinput);
//        element.get("wrapper").appendChild(nameinput);
//        nameinput["width"] = parseInt(element.width || 170) - 52;
//        nameinput["diseditable"] = true;
//        nameinput["init"]();
//        //存值隐藏域
//        var valueinput = document.createElement("input");
//        $(valueinput).attr("type", "hidden");
//        $(valueinput).attr("name", $(element).attr("name"));
//        element.set("valueinput", valueinput);
//        element.get("wrapper").appendChild(valueinput);
//        //创建按钮方法
//        var createButton = function (name, icon, func) {
//            var button = document.createElement("Button");
//            $(button).attr("type", "button");
//            $(button).addClass("clean-gray");
//            $(button).css("height", (element.height || 24) - 2);
//            $(button).html("<i class='" + icon + "'></i>");
//            $(button).click(func);

//            element.set(name, button);
//            element.get("wrapper").appendChild(button);

//        }

//        var openfunc = function () {
//            if (element.forbidOpen)
//                return;
//            var obj = element.getObject();
//            if (obj && obj[element.idfield]) {
//                document.body["openObjDetail"]({
//                    controlid: element.id,
//                    objid: obj[element.idfield],
//                    klass: element.klass,
//                    title: obj["title"]
//                });
//            }
//        };

//        //打开按钮
//        createButton("opendetail", "fa fa-folder-open-o", openfunc);
//        //选择按钮
//        createButton("selectobject", "fa fa-pencil-square-o", function () {
//            if (element.forbidEdit)
//                return;
//            element.open();
//        });
//        //清除按钮
//        createButton("clear", "fa fa-times", function () {
//            if (element.forbidClear)
//                return;
//            element.setValue(null);
//        });

//        //浏览链接
//        var browser = document.createElement("a");
//        $(browser).attr("href", "javascript:void(0);");
//        $(browser).css("text-decoration", "underline");
//        $(browser).css("color", "inherit");
//        $(browser).click(openfunc);
//        element.set("browser", browser);
//        element.get("display").appendChild(browser);

//        this.buildSelectDialog(element);
//        var control = this;
//        element.registerEventHandler("onafterinit", function () {
//            if (element.value) {
//                var obj = element.value;
//                if (control.isString(element.value)) {
//                    obj = control.stringToObject(element.value);
//                }
//                element.setObject(obj);
//            }
//        });

//    }

//    protected getKlassMeta(element) {
//        var control = this;
//        if (element.get("loaded")) {
//            return element.get("KlassMeta");
//        }
//        var obj = {};
//        window["platformAjax"]({
//            url: document.body["getklasstree"],
//            sync: true,
//            data: { klassname: element.klass },
//            success: function (result) {
//                obj = JSON.parse(result.Data);
//                element.set("KlassMeta", obj);
//            }
//        });
//        return obj;
//    }

//    protected openSelector(element) {
//        var div = element.get("SelectDialog");
//        var klassMeta = this.getKlassMeta(element);
//        var href = element.href || document.body["selectobjekturl"];
//        var buttonsdiv = element.get("buttonsdiv");
//        /*创建选择区域*/
//        var layout = document.createElement("div");
//        element.set("layout", layout);
//        div.appendContent(layout);

//        $(layout).layout({
//            fit: true
//        });
//        if (klassMeta.children && klassMeta.children.length > 0) {
//            $(layout).layout('add', {
//                region: 'center',
//                width: 620,
//                collapsible: true,
//                split: true
//            });
//            $(layout).layout('add', {
//                region: 'west',
//                width: 180,
//                title: '类目录',
//                collapsible: true,
//                split: true
//            });
//            var west = $(layout).find('.layout-panel-west').find('.layout-body');

//            var array = [];
//            array.push(klassMeta);
//            var tree = document.createElement("Gf-Tree");
//            tree["hidefoldericon"] = true;
//            tree["loadData"](array);
//            tree["registerEventHandler"]("onNodeClick", function (node) {
//                center.load(href, { klass: node.klassName, filterid: element.filterid || '' });
//            });
//            west.append(tree);
//            element.set("west", west);
//        }
//        else {
//            $(layout).layout('add', {
//                region: 'center',
//                width: 800,
//                collapsible: true,
//                split: true
//            });
//        }
//        $(layout).layout('add', {
//            region: 'south',
//            collapsible: false,
//            split: false
//        });

//        var south = $(layout).find('.layout-panel-south').find('.layout-body');
//        south.append(buttonsdiv);

//        var center = $(layout).find('.layout-panel-center').find('.layout-body');
//        center.load(href, { klass: element.klass, filterid: element.filterid || '' });

//        element.set("center", center);
//        element.set("south", south);
//        /*}
//        else {
//            div["href"] = href + "?klass=" + element.klass + "&filterid=" + (element.filterid || '');
//            div["appendContent"](buttonsdiv);
//            //$(div).load(href, { klass: element.klass, filterid: element.filterid || '' });
//        }*/

//    }

//    protected buildSelectDialog(element) {
//        var dialog = document.createElement("Gf-Dialog");
//        dialog["width"] = 800;
//        dialog["height"] = 460;
//        dialog["modal"] = true;
//        dialog["title"] = '选择“' + element.klass + '”对象';
//        dialog["init"]();
//        element.set("SelectDialog", dialog);


//        /*创建按钮*/
//        this.buildSelectDialogButtons(element);
//    }

//    protected buildSelectDialogButtons(element) {
//        var sure = this.createLinkbutton("确定", "fa fa-check", function () {
//            var grid = $(element.get("SelectDialog").div).find("Gf-ObjektCollectionView")[0];
//            var row = grid.getSelectedRow();
//            grid.endEditRows();
//            if (grid.haschange) {
//                $.messager.alert('提示', '请保存数据后再选择！')
//            }
//            else if (!row) {
//                $.messager.alert('提示', '请至少选择一条数据！')
//            }
//            else {
//                var obj = {};
//                obj[element.idfield] = row[element.idfield];
//                obj[element.namefield] = row[element.namefield];
//                obj["klass"] = element.klass;
//                obj["title"] = row["combinedtitle"];
//                obj["permissioncode"] = row["permissioncode"];

//                element.setValue(obj);
//                element.close();
//                element.triggerEventHandler("onafterselect");
//            }
//        }, {});

//        var cancel = this.createLinkbutton("取消", "fa fa-times", function () {
//            element.close();
//        }, {});

//        var buttonsdiv = document.createElement("div");
//        $(buttonsdiv).addClass("dialog-button");
//        buttonsdiv.id = this.GetUniqueId("buttonsdiv");
//        buttonsdiv.appendChild(sure);
//        buttonsdiv.appendChild(cancel);
//        element.set("buttonsdiv", buttonsdiv);
//        /*var layout = element.get("layout");
//        if(layout){
            

//        }
//        else{
//            element.get("SelectDialog").appendContent(buttonsdiv);
//        }*/

//    }
//}
////【对象集合视图】
//class GfObjektCollectionView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektCollectionView";
//        this.autoInit = true;
//        this.addProperties("hidetools,loadmsg,title,width,height,klass,idfield,namefield,orderby,dataurl,saveurl,exporturl,newrowurl,relatedcolumns,filter");
//        this.addboolProperties("autoselect,singleselect,showquery,forbidUpdateTip,pagination,isasc,trashstation,forbidedit,hassubklass");
//        this.addProperty("toolbar", "{ attribute: {}, get: function()  { return this.xtag.toolbar;} }");
//        this.addProperty("haschange", "{ attribute: {}, get: function()  { return this.xtag.haschange;} }");
//        this.addMethod("beginEditRow", `function(index) { 
//                                            if(this.endEditRows(index)){
//                                                $(this.xtag.table).datagrid('beginEdit', index); 
//                                                control.restoreSelection(this);
//                                                this.xtag.haschange = true;
//                                            }
//                                        }`);
//        this.addMethod("endEditRow", "function(index) { $(this.xtag.table).datagrid('endEdit', index);}");
//        this.addMethod("endEditRows", `function(index)  {  
//                                            var validate = true;
//                                            var element = this;
//                                            var rows = this.getRows();
//                                            for(var key in rows){
//                                                var row = rows[key];
//                                                var rowindex = this.getRowIndex(row);
//                                                if(index != rowindex){
//                                                    if(control.validate(element,rowindex)){
//                                                        this.endEditRow(rowindex);
//                                                    }
//                                                    else{
//                                                        validate = false;
//                                                    }
//                                                }
//                                            }
//                                            return validate;
//                                        }`);
//        this.addMethod("refreshRow", "function(index) { $(this.xtag.table).datagrid('refreshRow', index);}");
//        this.addMethod("selectRow", "function(index) { $(this.xtag.table).datagrid('selectRow', index);}");
//        this.addMethod("unSelectRow", "function(index) { $(this.xtag.table).datagrid('unselectRow', index);}");
//        this.addMethod("unSelectRows", `function(index) {  
//                                            var rows = this.getRows();
//                                            for(var key in rows){
//                                                var row = rows[key];
//                                                var rowindex = this.getRowIndex(row);
//                                                if(index != rowindex)
//                                                    this.unSelectRow(rowindex);
//                                            } 
//                                        }`);
//        this.addMethod("getPager", "function() { return $(this.xtag.table).datagrid('getPager'); }");
//        this.addMethod("getRows", "function() { return $(this.xtag.table).datagrid('getRows'); }");
//        this.addMethod("getSelectedRow", "function() { return $(this.xtag.table).datagrid('getSelected'); }");
//        this.addMethod("getSelectedRows", "function() { return $(this.xtag.table).datagrid('getSelections'); }");
//        this.addMethod("getRowIndex", "function(row) { return $(this.xtag.table).datagrid('getRowIndex',row); }");
//        this.addMethod("cancelEditRow", "function(index) { $(this.xtag.table).datagrid('cancelEdit', index);}");
//        this.addMethod("cancelEditRows", `function(index) {  
//                                            var rows = this.getRows();
//                                            for(var key in rows){
//                                                var row = rows[key];
//                                                if(row.editing){
//                                                    var rowindex = this.getRowIndex(row);
//                                                    if(index != rowindex)
//                                                        this.cancelEditRow(rowindex);
//                                                } 
//                                            } 
//                                        }`);
//        this.addMethod("select", "function(index) {  $(this.xtag.pager).pagination('select',index); }");
//        this.addMethod("loadData", "function(data) { $(this.xtag.table).datagrid('loadData',data); this.restoreQueryState();}");
//        this.addMethod("loading", "function() { $(this.xtag.table).datagrid('loading'); }");
//        this.addMethod("loaded", "function() { $(this.xtag.table).datagrid('loaded'); }");
//        this.addMethod("reload", `function() { 
//                                        if(this.xtag.currentPage && this.xtag.currentRows)
//                                        this.loadDataPage(this.xtag.currentPage, this.xtag.currentRows);
//                                    }`);
//        this.addMethod("reloadstatic", `function() { this.loadData(this.getData()); }`);
//        this.addMethod("getData", "function() { return $(this.xtag.table).datagrid('getData'); }");
//        this.addMethod("getOptions", "function() { return $(this.xtag.table).datagrid('options'); }");
//        this.addMethod("loadDataPage", `function(page, rows) {
//                                            var grid = this;
//                                            if(page < 1) page = 1;
//                                            grid.loading();
//                                            this.xtag.currentPage = page;
//                                            this.xtag.currentRows = rows;
                                            
//                                            var orderby = this.get("orderby");
//                                            var isAsc = this.get("isAsc");
//                                            var param = this.xtag.params ? this.xtag.params.concat(this.xtag.outParams) : this.xtag.outParams;
                                            
//                                            var data = { page:page, rows:rows, param:param.concat([{ field:"isTrash", type : "=", value : grid.trashstation }]), klass : grid.klass, IncludeSubKlass: grid.hassubklass};
//                                            if(grid.relatedcolumns){
//                                                data["relatedcolumns"] = grid.relatedcolumns;
//                                            }
//                                            if(grid.filter){
//                                                data["filter"] = grid.filter;
//                                            }
//                                            if(orderby){
//                                                data.orderby = orderby;
//                                                data.isAsc = isAsc;
//                                            }
//                                            platformAjax({
//                                                url: grid.dataurl || document.body.listdataurl,
//                                                data: data,
//                                                success: function(result) {
//                                                    var data = control.stringToObject(result.Data);
//                                                    $(data.rows).each(function(){
//                                                        this.customRowId = control.GetUniqueId("row");
//                                                    });
//                                                    if(!grid.pagination){
//                                                        var pageList = new Array();
//                                                        pageList.push(data.rows.length);
//                                                        $(grid.xtag.pager).pagination({
//                                                            pageSize: data.rows.length,
//                                                            pageList: pageList
//                                                        }); 
//                                                        data.total = data.rows.length;
//                                                        grid.xtag.currentPage = 1;
//                                                        grid.xtag.currentRows = data.rows.length;
//                                                    }
//                                                    grid.xtag.data = JSON.stringify(data.rows); 
//                                                    grid.loadData(data);
//                                                    grid.set('haschange', false);
//                                                    grid.set('changes', {});
//                                                },
//                                                finallyCall: function(result) {
//                                                    grid.loaded();
//                                                    grid.set("loaded", true);
//                                                    control.setSelectedTip(grid);
//                                                }
//                                            });
//                                        }`);
//        this.addMethod("restoreQueryState", `function() {
//                                            var columns = this.xtag.columns[0];
//                                            $(columns).each(function() {
//                                                if(!this.hidden && this.param && this.query){
//                                                    this.query.setValue(this.param);
//                                                }
//                                            });
//                                        }`);
//        this.addMethod("queryData", `function(outParams) {
//                                            if(outParams){
//                                                this.set("outParams",outParams);
//                                            }
//                                            var params = new Array();
//                                            var columns = this.xtag.columns[0];
//                                            $(columns).each(function() {
//                                                if(!this.hidden && this.query){
//                                                    var param = this.query["getValue"]();
//                                                    if(param){
//                                                        params.push(param);
//                                                    }
//                                                    this.param = param;
//                                                }
//                                            });
//                                            this.xtag.params = params;
//                                            this.select(1);
                                            
//                                        }`);
//        this.addMethod("deleteRow", `function(row) {
//                                        var index = this.getRowIndex(row);
//                                        $(this.xtag.table).datagrid('deleteRow', index);
//                                     }`);
//        this.addMethod("insertRow", `function(obj) {  $(this.xtag.table).datagrid('insertRow', obj);  }`);
//        this.addMethod("exportExcel", `function() {
//                                            var grid = this;
//                                            var param = this.xtag.params ? JSON.stringify(this.xtag.params) : "";
//                                            platformAjax({
//                                                url: grid.exporturl || document.body.listexporturl,
//                                                data : {param : param, klass : grid.klass},
//                                                success: function (result) {
//                                                    $(result.Data).table2excel({
//                                                        exclude: ".noExl",
//                                                        name: grid.klass,
//                                                        filename: grid.klass
//                                                    });
//                                                }
//                                            });
//                                        }`);
//        this.addMethod("toggleQuery", `function(isShow) { 
//                                        this.showquery = isShow;
//                                        var clear = this.xtag.clear;
//                                        var array = this.xtag.columns[0];
//                                        var heightAdjust = 0;
//                                        var headerHeight = $(this).find(".datagrid-header").height();
//                                        var bodyHeight = $(this).find(".datagrid-body").height();
//                                        if(isShow) {
//                                           headerHeight += 24;
//                                           bodyHeight -= 24;
//                                        } 
//                                        else {
//                                           headerHeight -= 24;
//                                           bodyHeight += 24;
//                                        } 
//                                        $(this).find(".datagrid-header").css("height",headerHeight);
//                                        $(this).find(".datagrid-header").find(".datagrid-htable").css("height",headerHeight); 
//                                        $(this).find(".datagrid-body").css("height",bodyHeight);

//                                        $(array).each(function() {
//                                            if(!this.hidden){
//                                                var query = this.query;
//                                                if(isShow){ 
//                                                    $(query).show(); 
//                                                    $(clear).show(); 
//                                                }
//                                                else{ 
//                                                    $(query).hide();
//                                                    $(clear).hide();
//                                                }
//                                            }
//                                        });
//                                    }`);
//        this.addMethod("saveList", `function(forbidReload) {
//                                            var grid = this;
//                                            if(!grid.xtag.haschange){
//                                                return;
//                                            }
//                                            if (!grid.endEditRows()) {
//                                                return;
//                                            }
//                                            grid.loading();
//                                            var changeArray = [];
//                                            for(var key in grid.xtag.changes){
//                                                changeArray.push(grid.xtag.changes[key]);
//                                            }
//                                            var changes = JSON.stringify(changeArray);
//                                            platformAjax({
//                                                url: grid.saveurl || document.body.listsaveurl,
//                                                data: {changes: changes, klass: grid.klass, extraParams : grid.getExtraParams("saveList")},
//                                                success: function(result) {
//                                                    if(!forbidReload)
//                                                        grid.reload();
//                                                },
//                                                finallyCall: function(result) {
//                                                    grid.loaded();
//                                                    grid.triggerEventHandler("onafterSaveList");
//                                                }
//                                            });
//                                        }`);
//        this.addMethod("getCellValue", `function(rowid, field) { 
//                                            var rows = JSON.parse(this.xtag.data); 
//                                            var value = "";
//                                            $.map(rows,function(row,i){
//                                                if(row.customRowId == rowid){
//                                                    value = row[field];
//                                                }
//                                            });
//                                            return value;
//                                        }`);
//        this.addMethod("addNewRow", `function(row) { 
//                                            if(!row){
//                                                row = control.getNewRow(this);
//                                            }
//                                            row['customRowId'] = control.GetUniqueId('row');
//                                            row['$'] = 'C';
//                                            var rows = JSON.parse(this.xtag.data); 
//                                            rows.push(row);
//                                            this.set("data",JSON.stringify(rows));
//                                            this.insertRow({ index: 0, row: row });
//                                            control.refreshRowIndex(this);
//                                            this.selectRow(0);
//                                            this.unSelectRows(0);
//                                            this.beginEditRow(0);
//                                            this.triggerEventHandler("onAddRow",[row]);
//                                        }`);
//        this.addMethod("updateRow", `function(row,select){ 
//                                            var index = this.getRowIndex(row);
//                                            var rows = JSON.parse(this.get("data"));
//                                            rows = removeObjFromArray(rows,'customRowId',row.customRowId);
//                                            rows.push(row);
//                                            this.set("data",JSON.stringify(rows));
//                                            $(this.get("table")).datagrid('updateRow',{ 
//                                                index: index,
//                                                row : row
//                                             });
//                                            this.refreshRow(index);
//                                            if(select){
//                                                this.selectRow(index);
//                                                control.restoreSelection(this);
//                                            }
//                                        }`);
//        this.addMethod("recordChange", "function(row, field, value) { control.recordChange(this, row, field, value); }");



//        this.extendEditors(`Gf-BooleanPropertyView,Gf-DateTimePropertyView,Gf-DatePropertyView,Gf-TimePropertyView,Gf-IntPropertyView,Gf-BigIntPropertyView,Gf-NumberPropertyView,Gf-StringPropertyView,Gf-TextPropertyView,Gf-ObjektPropertyView,Gf-ListPropertyView,Gf-ColorStringPropertyView,Gf-MD5PropertyView`);
//    }

//    protected removeChange(element, row, field, value) {
//        if (field == element.idfield) {
//            return;
//        }
//        var control = this;
//        var exceptions = [element.idfield, "customRowId", "$"];
//        var changes = element.get("changes");
//        var changedrow = changes[row.customRowId];
//        if (changedrow) {
//            delete changedrow[field];
//            if (control.getPropertyCount(changedrow, exceptions) == 0) {
//                delete changes[row.customRowId];
//            }
//        }
//        if (control.getPropertyCount(changes) == 0) {
//            element.set("haschange", false);
//        }
//        element.set("changes", changes);
//    }

//    protected recordChange(element, row, field, value) {
//        var changes = element.get("changes");
//        if (changes[row.customRowId]) {
//            changes[row.customRowId][field] = value;
//        }
//        else {
//            var newChange = {};
//            if (row[element.idfield]) {
//                newChange[element.idfield] = row[element.idfield];
//                newChange["$"] = row["$"] || "U";
//            }
//            else {
//                newChange["$"] = row["$"] || "C";
//            }
//            //newChange["customRowId"] = row.customRowId;
//            newChange[field] = value;
//            changes[row.customRowId] = newChange;
//        }
//        element.set("haschange", true);
//        element.set("changes", changes);
//    }

//    protected recordDelete(element, row) {
//        var changes = element.get("changes");
//        var changedrow = changes[row.customRowId];
//        if (changedrow) {
//            if (changedrow["$"] == "C") {
//                delete changes[row.customRowId];
//            }
//            else {
//                changedrow["$"] = "D";
//            }
//        }
//        else {
//            if (row[element.idfield]) {
//                var newChange = {};
//                newChange[element.idfield] = row[element.idfield];
//                newChange["$"] = "D";
//                //newChange["customRowId"] = row.customRowId;
//                changes[row.customRowId] = newChange;
//                element.set("haschange", true);
//            }
//        }
//        element.set("changes", changes);
//    }

//    protected fieldChanged(element, row, field) {
//        var changes = element.get("changes");
//        var change = changes[row.customRowId];
//        if (change) {
//            return !(change[field] == null);
//        }
//        else {
//            return false;
//        }

//    }

//    protected buildColums(element) {

//        var control = this;
//        var columns = element.getElementsByTagName("Gf-Column");
//        var value = "[[";
//        var arr = new Array();
//        for (var i = 0; i < columns.length; i++) {
//            var obj = columns[i];
//            var hidden = control.safeToString($(obj).attr("ishidden")).toLowerCase() == 'true';
//            var column = {
//                id: this.GetUniqueId("column" + i),
//                field: $(obj).attr("field"),
//                datatype: $(obj).attr("datatype"),
//                label: $(obj).attr("title"),
//                title: $(obj).attr("title"),
//                description: $(obj).attr("description"),
//                hidden: hidden,
//                width: (parseInt($(obj).attr("width")) || 180),
//                align: ($(obj).attr("align") || 'left'),
//                editor: ($(obj).attr("editor") && !hidden) ? this.stringToObject($(obj).attr("editor")) : "",
//                styler: function (value, row, index) { },
//                forbidquery: obj.forbidquery,
//                isRequired: control.safeToString($(obj).attr("isRequired")).toLowerCase() == 'true',
//                sortable: control.safeToString($(obj).attr("sortable")).toLowerCase() == 'true',
//                isreadonly: control.safeToString($(obj).attr("isreadonly")).toLowerCase() == 'true',
//                iscolor: control.safeToString($(obj).attr("iscolor")).toLowerCase() == 'true',
//                formatter: obj.formatter,
//                query: {},
//                param: {}
//            };
//            column["formatter"] = this.getColumnFormatter(element, column);

//            if (!column.hidden) {
//                var query = this.createQueryEditor(column, element);
//                column.title = "<div id='" + column.id + "div' title='" + column.description + "' style=' padding:5px;display:inline-block;'>" + (column.isRequired ? "*" : "") + column.label + "</div>";
//                column.query = query;
//                if (query) {
//                    query["resize"](column.width);
//                }

//                (function (col) {
//                    col.styler = function (value, row, index) {
//                        var data = element.getCellValue(row.customRowId, col.field);
//                        obj;
//                        var isEqual = true;
//                        var dataid;
//                        var objid;
//                        var cls = '';
//                        var style = '';
//                        if (col.isreadonly && element.state == 'edit') {
//                            cls = 'ReadonlyColumn';
//                        }
//                        if (col.datatype == 'list') {
//                            if (value && value.color) {
//                                style = 'background-color:#' + value.color;
//                            }
//                        }
//                        if (col.datatype == 'objekt') {
//                            var obj = value;
//                            if (col.field == element.idfield) {
//                                dataid = data;
//                                objid = value;
//                            }
//                            else if (control.isString(value)) {
//                                objid = JSON.parse(value)[element.idfield];
//                                dataid = data ? data[element.idfield] : "";
//                            }
//                            else {
//                                objid = obj ? obj[element.idfield] : "";
//                                dataid = data ? data[element.idfield] : "";
//                            }

//                            isEqual = dataid == objid;
//                        }
//                        else {
//                            var formatValue = value;
//                            var formatData = data;
//                            if (col.formatter) {
//                                formatData = col.formatter(data, row, index);
//                                formatValue = col.formatter(value, row, index);
//                            }
//                            formatValue = formatValue ? formatValue : "";
//                            if (formatData === null || formatData === undefined)
//                                formatData = "";
//                            isEqual = formatValue == formatData
//                        }

//                        if (isEqual) {
//                            control.removeChange(element, row, col.field, value);
//                        }
//                        else {
//                            control.recordChange(element, row, col.field, value);
//                            cls += ' editflag';
//                        }

//                        return { class: cls, style: style };
//                    };
//                })(column);

//            }
//            arr.push(column);
//        }
//        var arrs = new Array();
//        arrs.push(arr);
//        element.xtag.columns = arrs;

//        var frozenColums = new Array();
//        var subarray = new Array();
//        var check = this.buildCheckColumn(element);
//        subarray.push(check);
//        frozenColums.push(subarray);
//        element.xtag.frozenColums = frozenColums

//        return arrs;
//    }

//    protected buildRowNumberHeader(element) {
//        var clear = document.createElement("a");
//        $(clear).attr("href", "javascript:void(0);");
//        $(clear).attr("title", "清除所有条件");
//        $(clear).addClass("fa fa-times iconfont");
//        $(clear).css("font-size", "16px");
//        $(clear).click(function () {
//            var columns = element.xtag.columns[0];
//            $(columns).each(function () {
//                if (!this.hidden && this.query)
//                    this.query.clear();
//            });
//            element.queryData();
//        });
//        $(clear).hide();
//        element.xtag.clear = clear;

//        var div = document.createElement("div");
//        $(div).html("No.<br />");
//        div.id = "rownumber-header";
//        div.appendChild(clear);
//        $(element).find(".datagrid-header-rownumber").css("height", "auto").append(div);
//    }

//    protected buildCheckColumn(element) {
//        var checkid = this.GetUniqueId("check");
//        element.set("checkid", checkid);

//        if (element.singleselect) {
//            return {
//                field: 'checkcolumn', title: '', width: 30,
//                formatter: function (value, row, rowIndex) {
//                    return "<input type=\"radio\"  name=\"" + checkid + "\" rowIndex=\"" + rowIndex + "\" id=\"" + checkid + "-" + rowIndex + "\" >";
//                }
//            };
//        }
//        else {
//            return {
//                field: 'checkcolumn', title: '<input id=\"' + checkid + '\" type=\"checkbox\"  >', width: 30,
//                formatter: function (value, row, rowIndex) {
//                    return "<input type=\"checkbox\"  name=\"" + checkid + "\" rowIndex=\"" + rowIndex + "\" id=\"" + checkid + "-" + rowIndex + "\" >";
//                }
//            };
//        }
//    }

//    protected createQueryEditor(column, element) {
//        if (column.datatype == 'binary')
//            return null;
//        var query = document.createElement("Gf-QueryCondition");
//        query["field"] = column.field;
//        query["datatype"] = column.datatype;
//        query["ignorecase"] = true;
//        if (column.datatype == 'list') {
//            var options = column.editor.options;
//            query["listdefaultoption"] = options.defaultoption;
//            query["listdata"] = options.data;
//            query["listtextfield"] = options.textfield;
//            query["listvaluefield"] = options.valuefield;
//        }
//        $(query).ready(function () {
//            query["registerEventHandler"]("onafterchange", function () { element.queryData(); });
//            if (!element.showquery) {
//                $(query).hide();
//            }
//        });
//        query["init"]();
//        return query;
//    }

//    protected buildToolbar(element) {
//        var control = this;

//        var open = function () {
//            var rows = element.getSelectedRows();
//            if (rows) {
//                $(rows).each(function () {
//                    var row = this;
//                    var index = element.getRowIndex(row);
//                    element.endEditRow(index);
//                    $("#" + element.get("checkid") + "-" + index).prop("checked", true);

//                    //对象详情加载后事件
//                    var func = function () {
//                        this.overrideEventHandler("onaftersave", function () {
//                            element.reload();
//                        });
//                        var changes = element.get("changes");
//                        if (changes && changes[row.customRowId]) {
//                            var change = window["clone"](changes[row.customRowId]);
//                            delete change[element.idfield];
//                            delete change["$"];
//                            //delete change["customRowId"];
//                            this.setChangeObject(change);
//                        }
//                    };
//                    var id = row[element.idfield];
//                    var title = row["combinedtitle"];
//                    if (id) {
//                        document.body["openObjDetail"]({
//                            controlid: row.customRowId,
//                            objid: id,
//                            klass: element.klass,
//                            state: element.state,
//                            title: title,
//                            onbeforeinit: func
//                        });
//                    }
//                });
//            }
//        };

//        var del = function () {
//            var rows = element.getSelectedRows();
//            if (rows) {
//                $(rows).each(function () {
//                    element.deleteRow(this);
//                    control.recordDelete(element, this);
//                });
//            }
//            control.refreshRowIndex(element);
//            control.setToolbarPermission(element);
//        };

//        var subclass = function () {
//            element.hassubklass = !element.hassubklass;
//            element.select(1);
//        };

//        var toolbar = document.createElement("Gf-ToolBar");
//        if (element.hidetools) {
//            var hidetools = element.hidetools == 'all' ? 'all' : this.stringToObject(element.hidetools);
//            toolbar["hidetools"] = hidetools;
//        }
//        toolbar["registerEventHandler"]("toolCommand", function (toolname) {
//            switch (toolname) {
//                case "edit": control.setState(element, "edit"); break;
//                case "read": control.setState(element, "read"); break;
//                case "open": open(); break;
//                case "add": element.addNewRow(); break;
//                case "del": del(); break;
//                case "save": element.saveList(); break;
//                case "refresh": element.reload(); break;
//                case "subclass": subclass(); break;
//                case "query": element.toggleQuery(!element.showquery); break;
//                case "exporter": element.exportExcel(); break;
//            }
//        });
//        toolbar["registerEventHandler"]("toolCommandSuccess", function (toolname) {
//            if (toolname == 'trash' || toolname == 'untrash') {
//                element.reload();
//            }
//        });
//        toolbar["init"]();

//        if (element.hassubklass) {
//            toolbar["unSelectButton"]("subclass");
//        }
//        $(element).find(".datagrid-view").before(toolbar["toolbarDiv"]);

//        var setState = function (state: string) {
//            if (state == "edit") {

//                var rows = element.getSelectedRows();
//                element.reloadstatic();
//                $(rows).each(function () {
//                    var index = element.getRowIndex(this);
//                    element.selectRow(index);
//                });
//            }
//            else {
//                element.cancelEditRows();
//                element.reload();

//            }
//            toolbar["setState"](state);

//        }

//        element.set("toolbar", toolbar);
//        element.set("setState", setState);
//        this.setState(element, element.state);

//    }

//    protected setSelectedTip(element) {
//        var rows = element.getSelectedRows();
//        $("#" + element.get("selectedTipID")).text(rows.length);
//    }

//    protected restoreSelection(element) {
//        var rows = element.getSelectedRows();
//        for (var key in rows) {
//            var row = rows[key];
//            var rowindex = element.getRowIndex(row);
//            $("#" + element.get("checkid") + "-" + rowindex).prop("checked", true);
//        }
//    }

//    protected getRow(element, index) {
//        var rows = element.getRows();
//        var row;
//        $(rows).each(function () {
//            if (element.getRowIndex(this) == index)
//                row = this;
//        });
//        return row;
//    }

//    protected getNewRow(element) {
//        var control = this;
//        var row = {};
//        window["platformAjax"]({
//            url: element.newrowurl || document.body["getnewobjekturl"],
//            sync: true,
//            data: { klass: element.klass, relatedcolumns: element.relatedcolumns },
//            success: function (result) {
//                row = JSON.parse(result.Data);
//            }
//        });
//        return row;
//    }

//    protected initContent(element) {
//        var control = this;
//        var table = document.createElement("table");
//        element.set("table", table);
//        element.appendChild(table);
//        if (!element.state) {
//            element.state = "read"
//        };
//        $(table).datagrid({
//            title: element.title,
//            loadMsg: element.loadmsg || "数据加载中，请稍后...",
//            emptyMsg: "没有符合条件的数据",
//            width: element.width || 1000,
//            height: element.height || 400,
//            idfield: element.idfield,
//            checkOnSelect: false,
//            selectOnCheck: false,
//            nowrap: true,
//            striped: true,
//            border: true,
//            collapsible: true, //是否可折叠
//            remoteSort: true,
//            singleSelect: element.singleselect,  //是否单选
//            pagination: true,  //分页控件
//            rownumbers: true,  //行号
//            columns: this.buildColums(element),
//            frozenColumns: element.get("frozenColums"),
//            onSortColumn: function (sort, order) {
//                element.set("orderby", sort);
//                element.set("isAsc", order == 'asc');
//                element.reload();
//            },
//            onClickCell: function (index, field, value) {
//                if (field != "checkcolumn") {
//                    element.unSelectRows(index);
//                    if (element.state == "edit") {
//                        var row = control.getRow(element, index);
//                        if (row.$ != "C" && row.permissioncode[2] == "0")
//                            return;
//                        element.beginEditRow(index);
//                        var input = $(element).find("[datagrid-row-index='" + index + "']").find("td[field='" + field + "']").find("[iscustomelement='']")[0];
//                        if (input && input.focus) {
//                            input.focus();
//                        }
//                    }
//                }

//            },
//            onClickRow: function (index, row) {
//            },
//            onDblClickRow: function (index, row) {
//                element.selectRow(index);
//                var open = element.get("toolbar").open;
//                if (open && $(open).is(":visible")) {
//                    $(open).click();
//                }
//            },
//            onResizeColumn: function (field, width) {
//                var cols = element.get("columns")[0].concat(element.get("frozenColums")[0]);
//                $(cols).each(function () {
//                    if (this.field == field) {
//                        this.query.resize(width);
//                    }
//                });
//            },
//            onSelect: function (index, row) {
//                var checkid = "#" + element.get("checkid") + "-" + index;
//                var checked = $(checkid).prop("checked");
//                if (!checked) {
//                    $(checkid).prop("checked", true);
//                }
//                control.setSelectedTip(element);
//                control.setToolbarPermission(element);
//            },
//            onUnselect: function (index, row) {
//                var check = $("#" + element.get("checkid") + "-" + index);
//                if (check.prop("checked")) check.prop("checked", false);
//                control.setSelectedTip(element);
//                control.setToolbarPermission(element);
//            },
//            onBeforeEdit: function (index, row) {
//                element.set("editingRow", row);
//                row.editing = true;
//                element.refreshRow(index);
//            },
//            onEndEdit: function (index, row, changes) {
//            },
//            onAfterEdit: function (index, row, changes) {
//            },
//            onCancelEdit: function (index, row) {
//                row.editing = false;
//                element.refreshRow(index);
//            },
//            onLoadSuccess: function () {
//                var checkid = element.get("checkid");
//                var checkall = $("#" + checkid);
//                //全选
//                checkall.unbind().bind("change", function () {
//                    var checked = $(this).prop("checked");
//                    $("input[name='" + checkid + "']").each(function () {
//                        $(this).prop("checked", checked);
//                        var rowIndex = parseInt($(this).attr("rowIndex"));
//                        if (checked)
//                            element.selectRow(rowIndex);
//                        else
//                            element.unSelectRow(rowIndex);
//                    });
//                });
//                $("input[name='" + checkid + "']").unbind().bind("click", function (e) {
//                    e.stopPropagation();
//                }).bind("change", function () {
//                    var rowIndex = parseInt($(this).attr("rowIndex"));
//                    if ($(this).prop("checked"))
//                        element.selectRow(rowIndex);
//                    else
//                        element.unSelectRow(rowIndex);
//                });
//                control.setToolbarPermission(element);
//                element.triggerEventHandler("onLoadSuccess");

//            }
//        });

//        var gfPager = element.getElementsByTagName("Gf-Pager")[0];
//        if (!gfPager) { gfPager = {}; }
//        var pager = element.getPager();
//        var selectedTipID = this.GetUniqueId("selectedTipID");
//        element.set("selectedTipID", selectedTipID);
//        element.xtag.pager = pager;
//        $(pager).pagination({
//            pageNumber: gfPager.pagenumber || 1, //默认显示第几页
//            pageSize: gfPager.pagesize || 20,
//            pageList: this.stringToObject(gfPager.pagelist) || [5, 10, 20, 50, 100],
//            beforePageText: gfPager.beforepagetext || '第',
//            afterPageText: gfPager.afterpagetext || '页     共{pages}页',
//            displayMsg: '当前选中<span style="color:red;" id="' + selectedTipID + '">0</span>条记录 ' + (gfPager.displaymsg ||
//                '显示<span style="color:red;">{from}-{to}</span>条记录  共<span style="color:red;">{total}</span>条记录'),
//            onSelectPage: function (pageNumber, pageSize) {
//                element.loadDataPage(pageNumber, pageSize);
//            }
//        });

//        var columns = element.xtag.columns[0];
//        $(columns).each(function () {
//            if (!this.hidden && this.query && !this.forbidquery) {
//                $('#' + this.id).append(this.query);
//            }
//            $('#' + this.id).attr("title", this.description);
//        });

//        this.buildRowNumberHeader(element);
//        this.buildToolbar(element);

//        if (!element.width && !element.height) {
//            var container = $(element).parent();
//            container.css("overflow", "hidden");

//            $(function () {
//                $(table).datagrid('resize', {
//                    width: container.width() - 10,
//                    height: container.height() - 4
//                });
//                if (element.hidetools == 'all') {
//                    var wrap = $(element).find(".datagrid-wrap");
//                    var height = wrap.height();
//                    wrap.height(height + 35);
//                }
//                container.resize(function () {
//                    if (!table.ownerDocument.body.contains(table)) {
//                        return;
//                    }
//                    $(table).datagrid('resize', {
//                        width: container.width() - 10,
//                        height: container.height() - 4
//                    });
//                    if (element.hidetools == 'all') {
//                        var wrap = $(element).find(".datagrid-wrap");
//                        var height = wrap.height();
//                        wrap.height(height + 35);
//                    }
//                });

//            });
//        }

//        element.set("changes", {});
//        element.set("outParams", []);
//        element.set("loaded", false);
//        element.set("orderby", element.orderby);
//        element.set("isAsc", element.isasc == 'asc');

//        if (element.autoselect) {
//            element.select(1);
//        }

//    }

//    protected setToolbarPermission(element) {
//        var toolbar = element.get("toolbar");
//        var rows = element.getSelectedRows();
//        if (!rows) {
//            rows = [];
//        }
//        $(rows).each(function () {
//            if (!this.isTrash)
//                this.isTrash = element.trashstation;
//        });
//        toolbar.selected = rows;
//    }

//    protected getColumnFormatter(element, column) {
//        var control = this;
//        var func = function (value, row, index) { return value; };
//        if (column.field == element.idfield)
//            return func;
//        if ($(column).attr("formatter"))
//            return column.formatter;
//        switch (column.datatype) {
//            case 'objekt':
//                func = function (value, row, index) {
//                    if (!value) { return null; }
//                    else {
//                        var obj = control.isString(value) ? JSON.parse(value) : value;
//                        if (obj && obj[element.idfield] && obj[element.namefield]) {
//                            return `<Gf-ObjektPropertyView autoinit value="` + JSON.stringify(obj).replace(/"/g, "'") + `" idfield="` + element.idfield + `" namefield="` + element.namefield + `" klass="` + element.klass + `" href="" state="read" ></Gf-ObjektPropertyView>`;
//                        }
//                        else
//                            return '';
//                    }
//                };
//                break;

//            case 'list':
//                func = function (value, row, index) {
//                    if (!value) { return null; }
//                    else {
//                        var obj = control.isString(value) ? JSON.parse(value) : value;
//                        if (obj && obj[element.idfield] && obj[element.namefield]) {
//                            return obj[element.namefield];
//                        }
//                        else
//                            return '';
//                    }
//                };
//                break;

//            case "boolean":
//                func = function (value, row, index) {
//                    if (value && value.toString().toLowerCase() == 'true') { return '√'; }
//                    else { return ''; };
//                };
//                break;

//            case "icon":
//                func = function (value, row, index) {
//                    if (!value) return '';
//                    else return '<span class=\"' + value + '\"></span>';
//                };
//                break;

//        }
//        if (column.iscolor) {
//            func = function (value, row, index) {
//                if (!value) return '';
//                else return '<span style=\"display: block;\" class=\"GfColorStringPropertyView\"><span class=\"shower\" style=\"background-color:#' + value + '\"></span></span>';
//            };
//        }
//        return func;
//    }

//    protected refreshRowIndex(element) {
//        var checkid = element.get("checkid");
//        $("input[name='" + checkid + "']").each(function () {
//            var newindex = $(this).closest("tr").attr("datagrid-row-index");
//            $(this).attr("rowIndex", newindex);
//            $(this).attr("id", checkid + "-" + newindex);
//        });
//    }

//    protected extendEditors(elementName: string) {
//        var names = elementName.split(',');
//        for (var key in names) {
//            var name = names[key];
//            var getvalue = "return target[0].getValue();";
//            var setvalue = "target[0].setValue(value);";
//            var init = `var input = document.createElement("` + name + `");`
//            var setProperties = `input['required'] = options.required == 'true'; 
//                                 input['label'] = options.label;
//                                 input['init']();`;

//            switch (name) {
//                case 'Gf-ObjektPropertyView':
//                    setProperties = `input["idfield"] = options.idfield;
//                                 input["namefield"] = options.namefield;
//                                 input["klass"] = options.klass; 
//                                 input["filterid"] = options.filterid; 
//                                 input["href"] = options.href;` + setProperties;
//                    break;

//                case 'Gf-ListPropertyView':
//                    setProperties = `input["defaultoption"] = options.defaultoption;
//                                 input["data"] = options.data;
//                                 input["textfield"] = options.textfield; 
//                                 input["valuefield"] = options.valuefield;` + setProperties;
//                    break;

//                case 'Gf-DatePropertyView':
//                    setvalue = "if(value && value.indexOf(' ') > 0){ value = value.split(' ')[0]; }" + setvalue;
//                    break;
//                case 'Gf-NumberPropertyView':
//                case 'Gf-IntPropertyView':
//                case 'Gf-BigIntPropertyView':
//                    setProperties = `input["prec"] = options.prec;
//                                     input["scale"] = options.scale;` + setProperties;
//                    break;
//            }

//            eval(`$.extend($.fn.datagrid.defaults.editors, {
//            '`+ name + `': {
//                init: function (container, options) {
//                    `+ init + `
//                    if(options.createonly == 'true'){
//                        var grid = $(container).closest("`+ this.elementName + `")[0];
//                        var row = grid.get("editingRow");
//                        if(row.$ != "C"){
//                            input["state"] = 'read'; 
//                        }
//                    }
//                    `+ setProperties + `
//                    var $input = $(input).appendTo(container);
//                    return $input;
//                },
//                getValue: function (target) {
//                    `+ getvalue + `
//                },
//                setValue: function (target, value) {
//                    `+ setvalue + `
//                },
//                resize: function (target, width) {
//                    target[0].resize(width);
//                }
//            }
//        });`);

//        }

//    }

//    protected validate(element, rowIndex) {
//        var inputs = $(element).find("[datagrid-row-index=" + rowIndex + "]").find("[iscustomelement]");
//        var validate = true;
//        $(inputs).each(function () {
//            if (!this.validate()) {
//                validate = false;
//            }
//        });
//        return validate;
//    }

//    protected setState(element, state) {
//        if (element.forbidedit && state == "edit")
//            return;

//        var func = () => {
//            element.get("setState")(state);
//            super.setState(element, state);
//            this.setToolbarPermission(element);
//        };

//        element.endEditRows();
//        if (!element.forbidUpdateTip && state == 'read' && element.haschange) {
//            this.confirm('有未保存的修改，是否放弃？', func);
//        }
//        else {
//            func();
//        }
//    }
//}

////【分页】
//class GfPager extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Pager";
//        this.addProperties("pagenumber,pagesize,pagelist,beforepagetext,afterpagetext,displaymsg");
//    }
//}

////【列】
//class GfColumn extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Column";
//        this.addProperties("field,title,datatype,label,description,width,align,editor");
//        this.addProperty("formatter", "{ attribute: {},set:function(func)  { this.xtag.formatter = func;}, get: function()  { return this.xtag.formatter;} }");
//        this.addboolProperties("ishidden,isRequired,sortable,isreadonly,iscolor,forbidquery");
//    }
//}

////【下拉选项】
//class GfOption extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Option";
//        this.addProperties("value,label");
//    }

//}

////【按钮点击下拉框】
//class GfButtonComboBox extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ButtonComboBox";
//        this.addProperties("width,height,data");
//        this.methods["getValue"] = "function() { return $(this.xtag.button).val(); }";
//        this.methods["setValue"] = "function(value) { $(this.xtag.button).val(value); }";
//        this.addMethod("loadData", `function(data) {
//                                        var expand = $(this.xtag.div);
//                                        var target = $(this.xtag.button);
//                                        var element = this;
//                                        expand.html("");

//                                        $(data).each(function() {
//                                            control.addOption(element,this.value,this.label);
//                                        });
//                                    }`);
//        this.addMethod("toggleExpand", `function() {
//                                            var div = this.xtag.div;
//                                            var button = this.xtag.button;

//                                            if (!$(div).is(":hidden")) {  $(div).hide(); return;  }
                                            
//                                            var x= button.getBoundingClientRect().left+document.documentElement.scrollLeft;
//                                            var y =button.getBoundingClientRect().top+document.documentElement.scrollTop;
//                                            div.style.left = x + "px";
//                                            div.style.top = y + 25 + "px";
//                                            $(div).show();
//                                        }`);
//    }

//    protected addOption(element, value: string, label: string) {

//        var option = document.createElement("div");
//        $(option).addClass("combobox-item item");
//        option.innerText = label;
//        $(option).attr("value", value);
//        $(option).click(function () {
//            if (element.getValue() != value) {
//                element.setValue(value);
//                element.triggerEventHandler("onafterselect");
//            }
//            $(element.xtag.div).hide();
//        });
//        element.xtag.div.appendChild(option);
//    }

//    protected initContent(element) {
//        $(element).addClass("GfButtonComboBox");
//        //按钮
//        var button = document.createElement("input");
//        button.id = this.GetUniqueId("Button");
//        $(button).attr("type", "button");
//        $(button).css("width", (element.width || "25"));
//        $(button).css("height", (element.height || "25"));
//        element.xtag.button = button;

//        //下拉框
//        var expanddiv = document.createElement("div");
//        expanddiv.id = this.GetUniqueId("ComboBox");
//        $(expanddiv).addClass("combo-panel panel-body panel-body-noheader GfButtonComboBox expanddiv");
//        $(expanddiv).hide();
//        element.xtag.div = expanddiv;

//        //点击按钮切换下拉框显示/隐藏
//        $(button).click(function () {
//            element.toggleExpand();
//        });
//        $(button).mouseout(function () {
//            $(expanddiv).hide();
//        });


//        $(expanddiv).mouseover(function () {
//            $(expanddiv).show();
//        });
//        $(expanddiv).mouseout(function () {
//            $(expanddiv).hide();
//        });

//        //添加到主元素中
//        element.appendChild(button);
//        document.body.appendChild(expanddiv);


//        //绑定数据
//        var options = element.getElementsByTagName("Gf-Option");
//        if (options) {
//            for (var i = 0; i < options.length; i++) {
//                var option = options[i];
//                this.addOption(element, option.value, option.label);
//            }
//        }
//    }
//}

////【查询条件】
//class GfQueryCondition extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-QueryCondition";
//        this.addProperties("field,datatype,listdefaultoption,listdata,listtextfield,listvaluefield");
//        this.addboolProperty("ignorecase");
//        this.addMethod("clear", `function(isTriggerQuery) {
//                                    this.set("clearstatic",true);
//                                    this.xtag.editor.setValue("");
//                                    this.xtag.querySelect.setValue("");
//                                    if(this.xtag.hasDoubleEditor){
//                                        this.xtag.editorFrom.setValue("");
//                                        this.xtag.editorTo.setValue("");
//                                        $(this.xtag.editor).show();
//                                        $(this.xtag.doubleEditor).hide();
//                                    }
//                                    this.set("clearstatic",false);
//                                    if(isTriggerQuery){
//                                        element.triggerEventHandler("onafterchange");
//                                    }
//                                }`);
//        this.methods["getValue"] = `function() {
//                                        var element = this;
//                                        var type = this.xtag.querySelect.getValue();
//                                        if(type){
//                                            var value = ((type != "[..]" && type != "(..)") ? this.xtag.editor.getValue() : control.GetDoubleEditorValue(this));
//                                            return {  field: this.field,
//                                            type: type,
//                                            value: value,
//                                            caseSensitive: !element.ignorecase
//                                         };
//                                        }else{
//                                            return null;
//                                        } }`;
//        this.methods["setValue"] = `function(obj) {
//                                        if(obj && obj.type){
//                                            this.xtag.querySelect.setValue(obj.type);
//                                            if(obj.type == "[..]" || obj.type == "(..)"){
//                                                var values = obj.value.split(',');
//                                                this.xtag.editorFrom.setValue(values[0]);
//                                                this.xtag.editorTo.setValue(values[1]);
//                                            }
//                                            else{
//                                                this.xtag.editor.setValue(obj.value);
//                                            }
//                                        }else{
//                                            this.clear();
//                                        } }`;
//        this.addMethod("resize", `function(width) {
//                                    width = width - 28;
//                                    if(width < 0){
//                                        width = 0;
//                                    }
//                                    this.get("editor").resize(width);
//                                    if(this.get("hasDoubleEditor")){
//                                        width = width / 2;
//                                        this.get("editorFrom").resize(width);
//                                        this.get("editorTo").resize(width);
//                                    }
                                    
//                                }`);
//    }

//    protected initContent(element) {
//        element.id = this.GetUniqueId("QueryCondition");
//        var querySelect: any = document.createElement("Gf-ButtonComboBox");
//        var editor;
//        var emptyValue; emptyValue = "";
//        var elementName;
//        var hasDoubleEditor = false;

//        var commonTypes = [{ value: '=', label: '等于' },
//        { value: '!=', label: '不等于' },
//        { value: 'N', label: '等于空' },
//        { value: '!N', label: '不等于空' },
//        { value: '', label: '清除本条件' }];

//        var stringTypes = [{ value: '*', label: '包含' },
//        { value: '!*', label: '不包含' },
//        { value: '=*', label: '开始于' },
//        { value: '*=', label: '结束于' }];

//        var timeTypes = [{ value: '>', label: '晚于' },
//        { value: '>=', label: '晚于等于' },
//        { value: '<', label: '早于' },
//        { value: '<=', label: '早于等于' },
//        { value: '[..]', label: '介于（含两端）' },
//        { value: '(..)', label: '介于（不含两端）' }];

//        var numberTypes = [{ value: '>', label: '大于' },
//        { value: '>=', label: '大于等于' },
//        { value: '<', label: '小于' },
//        { value: '<=', label: '小于等于' },
//        { value: '[..]', label: '介于（含两端）' },
//        { value: '(..)', label: '介于（不含两端）' }];

//        var selectTypes = commonTypes;

//        switch (element.datatype) {
//            case "list":
//                elementName = "Gf-ListPropertyView";
//                break;
//            case "string":
//            case "text":
//            case "objekt":
//            case "sequence":
//            case "md5":
//                elementName = "Gf-StringPropertyView";
//                selectTypes = stringTypes.concat(commonTypes);
//                break;

//            case "boolean":
//                elementName = "Gf-BooleanPropertyView";
//                emptyValue = false;
//                break;

//            case "datetime":
//            case "time":
//            case "date":
//                if (element.datatype == 'datetime') elementName = "Gf-DateTimePropertyView";
//                else if (element.datatype == 'time') elementName = "Gf-TimePropertyView";
//                else if (element.datatype == 'date') elementName = "Gf-DatePropertyView";
//                selectTypes = timeTypes.concat(commonTypes);
//                hasDoubleEditor = true;
//                break;

//            case "float":
//            case "double":
//            case "decimal":
//            case "integer":
//            case "bigint":
//                if (element.datatype == 'integer') elementName = "Gf-IntPropertyView";
//                else if (element.datatype == 'bigint') elementName = "Gf-BigIntPropertyView";
//                else elementName = "Gf-NumberPropertyView";
//                selectTypes = numberTypes.concat(commonTypes);
//                hasDoubleEditor = true;
//                break;
//            default:
//                elementName = "Gf-StringPropertyView";
//                break;
//        }

//        var id = this.GetUniqueId("queryeditor");
//        editor = document.createElement(elementName);
//        editor.id = id;
//        editor.width = 150;
//        if (element.datatype == "list") {
//            editor.defaultoption = element.listdefaultoption;
//            editor.data = element.listdata;
//            editor.textfield = element.listtextfield;
//            editor.valuefield = element.listvaluefield;
//        }
//        querySelect.id = this.GetUniqueId("querySelect");
//        editor.init();
//        editor.registerEventHandler('onafterchange', function () {
//            if (element.get("clearstatic")) {
//                return;
//            }
//            var type = querySelect.getValue();
//            var value = editor.getValue();
//            if (!type && value) {
//                if (editor.elementname.toLowerCase() == 'gf-stringpropertyview') { type = '*'; } else { type = '='; }
//                querySelect.setValue(type);
//            }
//            if (type && type != '!N' && type != 'N') {
//                element.triggerEventHandler('onafterchange');
//            }
//        });

//        $(element).append(editor);
//        element.set("editor", editor);

//        querySelect.init();
//        querySelect.loadData(selectTypes);
//        querySelect.registerEventHandler("onafterselect", function () {
//            var type = querySelect.getValue();
//            var value = editor.getValue();
//            var doubleEditor = element.get("doubleEditor");
//            var editorFrom = element.get("editorFrom");
//            var editorTo = element.get("editorTo");
//            var fromValue = editorFrom ? editorFrom.getValue() : null;
//            var toValue = editorTo ? editorTo.getValue() : null;

//            if (!type) {
//                if (value) editor.setValue(emptyValue);
//                if (fromValue) editorFrom.setValue(emptyValue);
//                if (toValue) editorTo.setValue(emptyValue);

//                if (doubleEditor) {
//                    $(editor).show();
//                    $(doubleEditor).hide();
//                }
//                if (!element.get("clearstatic")) {
//                    element.triggerEventHandler("onafterchange");
//                }
//            }
//            else if (type == "N" || type == "!N") {
//                element.triggerEventHandler("onafterchange");
//            }
//            else if (type == "[..]" || type == "(..)") {
//                $(editor).hide();
//                $(doubleEditor).show();
//                if (fromValue && toValue) {
//                    element.triggerEventHandler("onafterchange");
//                }
//            }
//            else {
//                if (doubleEditor) {
//                    $(editor).show();
//                    $(doubleEditor).hide();
//                }
//                if (editor.elementname == "Gf-BooleanPropertyView" || value) element.triggerEventHandler("onafterchange");
//            }
//        });


//        element.set("querySelect", querySelect);
//        element.appendChild(querySelect);

//        if (hasDoubleEditor)
//            this.buildDoubleEditor(element, elementName);

//        element.set("hasDoubleEditor", hasDoubleEditor);
//    }

//    protected buildDoubleEditor(element, elementName) {
//        var editorFrom;
//        editorFrom = document.createElement(elementName);
//        editorFrom.width = 75;
//        editorFrom.init();

//        var editorTo;
//        editorTo = document.createElement(elementName);
//        editorTo.width = 75;
//        editorTo.init();

//        var onafterchange = function () {
//            if (editorFrom.getValue() && editorTo.getValue()) {
//                element.triggerEventHandler("onafterchange");
//            }
//        }

//        editorFrom.registerEventHandler("onafterchange", onafterchange);
//        editorTo.registerEventHandler("onafterchange", onafterchange);

//        var span = document.createElement("span");
//        span.appendChild(editorFrom);
//        span.appendChild(editorTo);
//        $(span).hide();
//        element.appendChild(span);

//        element.set("doubleEditor", span);
//        element.set("editorFrom", editorFrom);
//        element.set("editorTo", editorTo);
//    }

//    protected GetDoubleEditorValue(element) {
//        if (element.get("hasDoubleEditor")) {
//            return element.get("editorFrom").getValue() + ',' + element.get("editorTo").getValue()
//        }
//        else {
//            return "";
//        }
//    }
//}


////【选项卡】
//class GfTabs extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Tabs";
//        this.autoInit = true;
//        this.extends = "div";
//        this.addProperty("panels", `{ attribute: {}, get: function()  { return this.get("panels");} }`);
//        this.addProperties("width,height");
//        this.addboolProperties("closable,fit,lazyload");
//        this.addMethod("refreshTab", `function(index){
//            var panelobj = this.panels[index];
//                if (panelobj) {
//                    $("#" + panelobj.id).load(panelobj.href);
//                    panelobj.loaded = true;
//                }
//        }`);
//        this.addMethod("closeAll", `function() {
//                                    var element = this;
//                                    var tabs = $(element).tabs('tabs');
//                                    $(tabs).each(function(){
//                                        var index = $(element).tabs('getTabIndex', this[0]);
//                                        element.close(index);
//                                    });
//                                }`);
//        this.addMethod("closeAllExcept", `function(tabIndex) {
//                                    var element = this;
//                                    var selectedTab = $(element).tabs('getSelected');
//                                    var selectedIndex = $(element).tabs('getTabIndex',selectedTab);
//                                    var tabs = $(element).tabs('tabs');
//                                    $(tabs).each(function(){
//                                        var index = $(element).tabs('getTabIndex', this[0]);
//                                        if(tabIndex != index){
//                                            element.close(index);   
//                                        }
//                                        if(index < tabIndex){
//                                            tabIndex --;
//                                            if(selectedIndex > 0){
//                                                selectedIndex --;
//                                            }
//                                        }
//                                    });
//                                    $(element).tabs('select',selectedIndex);
//                                }`);
//        this.addMethod("closeLeft", `function(tabIndex) {
//                                    var element = this;
//                                    var selectedTab = $(element).tabs('getSelected');
//                                    var selectedIndex = $(element).tabs('getTabIndex',selectedTab);
//                                    var tabs = $(element).tabs('tabs');
                                    
//                                    $(tabs).each(function(){
//                                        var index = $(element).tabs('getTabIndex', this[0]);
//                                        if(index < tabIndex){
//                                            element.close(index);   
//                                            tabIndex --;
//                                            if(selectedIndex > 0){
//                                                selectedIndex --;
//                                            }
//                                        }
//                                    });
//                                    $(element).tabs('select',selectedIndex);

//                                }`);
//        this.addMethod("closeRight", `function(tabIndex) {
//                                    var element = this;
//                                    var tabs = $(element).tabs('tabs');
//                                    $(tabs).each(function(){
//                                        var index = $(element).tabs('getTabIndex', this[0]);
//                                        if(index > tabIndex){
//                                            element.close(index);   
//                                        }
//                                    });
//                                }`);
//        this.addMethod("close", `function(index) {
//                                    $(this).tabs("close", index);
//                                    //this.panels.splice(index, 1);
//                                }`);
//        this.addMethod("select", `function (index) { 
//                                    var currentIndex = $(this).tabs('getTabIndex', this.getSelected());
//                                    currentIndex = currentIndex < 0 ? 0 : currentIndex;
//                                    $(this).tabs("select", index); 
//                                    if(currentIndex == index){
//                                        this.triggerEventHandler("onSelect",["",index]);
//                                    }
//                                }`);
//        this.addMethod("getTabIndex", `function (tab) { return $(this).tabs("getTabIndex", tab); }`);
//        this.addMethod("getTab", `function (index) { return $(this).tabs("getTab", index); }`);
//        this.addMethod("getAllTabs", `function () { return $(this).tabs("tabs"); }`);
//        this.addMethod("getSelected", `function () { return $(this).tabs("getSelected"); }`);
//        this.addMethod("tabExist", `function(id){
//                                        var container = this;
//                                        var tabExist = false;
//                                        var alltabs = $(container).tabs('tabs');
//                                        $(alltabs).each(function () {
//                                            if(this[0].id == id){
//                                                var index = $(container).tabs('getTabIndex', this[0]);
//                                                $(container).tabs('select', index);
//                                                tabExist = true;
//                                            }
//                                        });
//                                        return tabExist;
//                                    }`);
//        this.addMethod("add", `function(id,title,href,iconCls,isiframe) {
//                                var container = this;
//                                if(!id){
//                                    id = control.GetUniqueId("tab");
//                                }
//                                var tabExist = container.tabExist(id);
//                                if(!tabExist){
//                                    var tabhref = '';
//                                    if(!container.lazyload){
//                                        tabhref = isiframe ? '' : href;
//                                    }
//                                    $(container).tabs('add',{
//                                        id : id,
//                                        title: title,
//                                        content : isiframe ? '<iframe src="'+ href +'" width="99%" height="99%" style="border-width:0px;">' : '',
//                                        href : tabhref,
//                                        iconCls : iconCls,
//                                        closable : container.closable
//                                    });
//                                    container.get("panels").push({ id : id, href : href, loaded : false });
//                                }
//                            }`);
//        this.addMethod("addContent", `function(id,title,content){
//                                        var container = this;
//                                        var tabExist = container.tabExist(id);
//                                        if(!tabExist){
//                                            $(container).tabs('add',{
//                                                id : id,
//                                                title: title,
//                                                content : '<div id="' + id + 'div" class="easyui-layout" data-options="fit:true" ><div>',
//                                                href : '',
//                                                closable : container.closable
//                                            });
//                                            container.get("panels").push({ id : id, content : content, loaded : true });
//                                            var wrapper = document.getElementById(id + "div");
//                                            $(content).appendTo(wrapper);
//                                        }
                                        
//                                    }`);
//        this.addMethod("tabGoto", `function(href) {
//            var tab = this.getSelected();
//            $(tab).load(href);
//            }`);
//        this.addMethod("tabGoback", `function() {
//            var tab = this.getSelected();
//            var index = this.getTabIndex(tab);
//            var panelobj = this.panels[index];
//            $(tab).load(panelobj.href);
//            }`);
//    }

//    protected initContent(element) {
//        var control = this;
//        element.registerEventHandler("onSelect", function (title, index) {
//            if (element.lazyload) {
//                var panelobj = element.panels[index];
//                if (panelobj && !panelobj.loaded) {
//                    $("#" + panelobj.id).load(panelobj.href, null, function () {
//                        element.triggerEventHandler("onLazyLoad", [index]);
//                    });
//                    panelobj.loaded = true;
//                }
//            }
//        });
//        $(element).tabs({
//            width: element.width || 'auto',
//            height: element.height || 'auto',
//            fit: element.fit,
//            border: false,
//            scrollDuration: 0,
//            onSelect: function (title, index) {
//                element.triggerEventHandler("onSelect", [title, index]);
//            },
//            onLoad: function (panel) {
//                element.triggerEventHandler("onLoad", [panel]);
//            },
//            onClose: function (title, index) {
//                element.panels.splice(index, 1);
//            },
//            onContextMenu: function (e, title, index) {
//                if (element.closable) {
//                    e.preventDefault();
//                    var id = control.GetUniqueId('tabContextMenu');
//                    var menu = $(`<div id="` + id + `" class="easyui-menu" style="width:120px;">
//                                    <div id="`+ id + `-tabRefresh" data-options="name:-1">刷新</div>
//                                    <div id="`+ id + `-tabclose" data-options="name:1">关闭</div>
//                                    <div id="`+ id + `-tabcloseall" data-options="name:2">关闭全部</div>
//                                    <div id="`+ id + `-tabcloseother" data-options="name:3">关闭其他</div>
//                                    <div class="menu-sep"></div>
//                                    <div id="`+ id + `-tabcloseright" data-options="name:4">关闭左侧全部</div>
//                                    <div id="`+ id + `-tabcloseleft" data-options="name:5">关闭右侧全部</div>
//                                </div>`).appendTo(document.body);

//                    $("#" + id).menu({
//                        onClick: function (item) {
//                            switch (item.name) {
//                                case -1:
//                                    element.refreshTab(index);
//                                    break;
//                                case 1:
//                                    element.close(index);
//                                    break;
//                                case 2:
//                                    element.closeAll();
//                                    break;
//                                case 3:
//                                    element.closeAllExcept(index);
//                                    break;
//                                case 4:
//                                    element.closeLeft(index);
//                                    break;
//                                case 5:
//                                    element.closeRight(index);
//                                    break;

//                            }
//                        }
//                    });

//                    if (index >= 0) {
//                        $("#" + id).menu('show', {
//                            left: e.pageX,
//                            top: e.pageY
//                        });
//                    }
//                }
//            }
//        });
//        element.set("panels", []);
//    }
//}

////【列表属性组件】
//class GfListPropertyView extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ListPropertyView";
//        this.addProperties("data,valuefield,textfield,defaultText,defaultoption,color,source");
//        this.methods["setDisplay"] = "function(display) { $(display).text(this.getText()); }";
//        this.methods["getValue"] = `function() { 
//                                        var obj = this.get("obj");
//                                        if(obj && obj[this.valuefield]){
//                                            return JSON.stringify(obj); 
//                                        }
//                                        else{
//                                            return null;
//                                        }
//                                    }`;
//        this.addMethod("setObject", `function(obj){ 
//                                        if(!obj || !obj[this.valuefield]){
//                                            obj = {};
//                                            obj['klass'] = '';
//                                            obj[this.textfield] = '';
//                                            obj[this.valuefield] = '';
//                                            obj.permissioncode = '11111';
//                                        }
//                                        if(!obj.permissioncode){
//                                            obj[this.textfield] = '无发现权';
//                                        }
//                                        else if(obj.permissioncode === "-1"){
//                                            obj[this.textfield] = '该对象不存在';
//                                        }
//                                        else if(obj.permissioncode[0] === "0"){
//                                            obj[this.textfield] = '无发现权';
//                                        }
//                                        this.set("obj",obj); 
//                                        $(this.get("valueInput")).val(JSON.stringify(obj));
//                                        $(this.get("select")).combobox('setValue', obj[this.valuefield]); 
//                                     }`);
//        this.addMethod("getObject", `function(){ return this.get("obj"); }`);
//        this.addMethod("loadData", `function(data) { 
//                                        if(control.isString(data)){
//                                            data = control.stringToObject(data);
//                                        }
//                                        if(this.defaultoption){
//                                            var obj = {};
//                                            obj[this.valuefield] = "";
//                                            obj[this.textfield] = this.defaultoption;
//                                            obj.permissioncode = "11111";
//                                            data.unshift(obj);
//                                        }
//                                        $(this.get("select")).combobox('loadData',data); 
//                                    }`);
//        this.addMethod("loadDatastring", `function(data) { 
//                                            if(data){
//                                            var objs = [];
//                                            var array = data.split(',');
//                                            var element = this;
//                                            $(array).each(function(){
//                                                if(this.length > 0){
//                                                    var obj = {};
//                                                    var arr = this.split('_');
//                                                    obj[element.valuefield] = arr[0];
//                                                    obj[element.textfield] = arr[1];
//                                                    obj.color = arr[2];
//                                                    obj.permissioncode = arr[3];
//                                                    obj.description = arr[4];
//                                                    objs.push(obj);
//                                                }
//                                            });
//                                            this.loadData(objs);
//                                        }
//                                    }`);
//        this.addMethod("getText", `function(){ var obj = this.get("obj"); return obj ? obj[this.textfield] : ""; }`);
//        this.addMethod("enable", `function(){ $(this.get("select")).combobox('enable');  }`);
//        this.addMethod("disable", `function(){ $(this.get("select")).combobox('disable');  }`);
//        this.methods["resize"] = `function(width) { $(this.get("select")).combobox('resize',width);  }`;
//        this.emptyValue = null;
//    }

//    protected innerSetValue(element, value) {
//        if (value) {
//            if (window["isString"](value)) {
//                var obj = this.stringToObject(value);
//                element.setObject(obj);
//            } else {
//                element.setObject(value);
//            }
//        }
//        else {
//            element.setObject(null);
//        }
//    }

//    protected parseToObject(element, value) {
//        var obj = {};
//        obj['klass'] = element.klass;
//        obj[element.textfield] = '';
//        obj[element.valuefield] = '';

//        if (value) {
//            if (window["isString"](value)) {
//                obj = this.stringToObject(value);
//            }
//            else {
//                obj = value
//            }
//        }
//        return obj;
//    }

//    protected valueEquals(oldValue, newValue, element) {
//        return this.parseToObject(element, oldValue)[element.valuefield] == this.parseToObject(element, newValue)[element.valuefield];
//    }

//    protected create(element) {
//        element.registerEventHandler("onafterinit", function () {
//            if (element.data) {
//                element.loadDatastring(element.data);
//            } else {
//                if (element.source) {
//                    var seldata = { param: [{ field: "source", type: "=", value: element.source }], klass: "Value" };
//                    window['platformAjax']({
//                        url: document.body['listdataurl'],
//                        data: seldata,
//                        success: function (result) {
//                            var listData = JSON.parse(result.Data);
//                            var loadDatastr = "";
//                            for (var item in listData.rows) {

//                                var valueData = listData.rows[item];

//                                loadDatastr = loadDatastr + valueData.id + "_" + valueData.label + "_";
//                                if (item != listData.rows.count) {
//                                    loadDatastr = loadDatastr + ",";
//                                }
//                            }
//                            element.loadDatastring(loadDatastr);
//                        }
//                    });
//                }
//            }
//            //element.setValue(element.value);
//        });
//        super.create(element);
//    }

//    protected initContent(element) {

//        var wrapper = element.get("wrapper");
//        var display = element.get("display");

//        var select = document.createElement("select");
//        wrapper.appendChild(select);
//        element.set("select", select);

//        var valueInput = document.createElement("input");
//        $(valueInput).attr("type", "hidden");
//        $(valueInput).attr("name", $(element).attr("name"));
//        element.appendChild(valueInput);
//        element.set("valueInput", valueInput);

//        $(select).combobox({
//            valueField: element.valuefield,
//            textField: element.textfield,
//            width: element.width || 170,
//            height: element.height || 26,
//            editable: false,
//            onChange: function (newValue, oldValue) {
//            },
//            formatter: function (row) {
//                var opts = $(this).combobox('options');
//                return `<span style="width:100%; height: 100%;display:block;" title="` + row[`description`] + `">` + row[opts.textField] + '</span>';
//            },
//            onSelect: function (record) {
//                var obj = element.getObject();
//                if (!obj || record[element.valuefield] != obj[element.valuefield]) {
//                    element.setObject(record);
//                    element.triggerEventHandler("onafterchange", [record]);
//                }
//            }
//        });

//    }
//}

////【树】
//class GfTree extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Tree";
//        this.autoInit = true;
//        this.addProperties("data,click,paddingleft,url,isclick");
//        this.addboolProperty("hidefoldericon");
//        this.addMethod("expand", `function(node) {
//                                    $(this.get("ul")).tree('expand',node);
//                                }`)
//        this.addMethod("append", `function(node,data) {
//                                    $(this.get("ul")).tree('append', {
//                                    parent: node,
//                                    data: data
//                                    });
//                                }`)
//        this.addMethod("reload", `function() {
//                                    var ul = this.get("ul");
//                                    var selected = $(ul).tree('getSelected');
//                                    if(this.data){
//                                        this.loadDatastring(this.data, this.click)
//                                    }
//                                    if(selected){
//                                        $(ul).tree('expandAll');
//                                        var node = $(ul).tree('find', selected.id);
//                                        if(node){
//                                            $(ul).tree('select',node.target);
//                                        }
//                                    }
//                                }`);
//        this.addMethod("loadData", `function(data, click) {
//                                        var element = this;
//                                        $(element.get("ul")).tree({
//                                            data : data,
//                                            onBeforeExpand:function(node,param){  
//                                                if(!node.children || node.children.length == 0){
//                                                    platformAjax({
//                                                        url: element.url,
//                                                        data:{ id:node.id, parentId : node.parentId },
//                                                        success: function(result) {
//                                                            element.append(node.target,JSON.parse(result.Data));
//                                                            element.expand(node);
//                                                        }
//                                                    });
//                                                }
//                                            },  
//                                            onExpand:function(node,param){ 
//                                                control.changeCssClass(element);
//                                            },
//                                            onClick : function (node) {
//                                                if(click){
//                                                    var func = control.stringToObject(click);
//                                                    func(node);
//                                                }
//                                                element.triggerEventHandler("onNodeClick",[node]);
//                                            }
//                                        });
//                                        control.changeCssClass(this);
//                                    }`);
//        this.addMethod("loadDatastring", `function(data, click) {
//                                            var element = this;
//                                            var ul = this.get("ul");

//                                            $(ul).tree({
//                                                data : control.stringToObject(data),
//                                                onBeforeExpand:function(node,param){  
//                                                    if(!node.children || node.children.length == 0){
//                                                        platformAjax({
//                                                            url: element.url,
//                                                            data:{ id:node.id, parentId : node.parentId },
//                                                            sync:true,
//                                                            success: function(result) {
//                                                                element.append(node.target,JSON.parse(result.Data));
//                                                            }
//                                                        });
//                                                    }
//                                                },                                                                                                                                                
//                                                onExpand:function(node,param){ 
//                                                    control.changeCssClass(element);
//                                                },
//                                                onClick : function (node) {
                                                 
//                                                    if(element.isclick=="false")
//                                                    {
//                                                         retutn;
//                                                    }
//                                                    if(click){
//                                                        var func = control.stringToObject(click);
//                                                        func(node);
//                                                    }
//                                                    element.triggerEventHandler("onNodeClick",[node]);
//                                                }
                                            
                                              
//                                            });
//                                            control.changeCssClass(this);
//                                        }`);

//        this.addMethod("find", `function(id) { return $(this.get("ul")).tree('find', id); }`);
//        this.addMethod("select", `function(id) { var node = this.find(id); $(this.get("ul")).tree('select', node.target); }`);
//        this.addMethod("getNode", `function(target) { return  $(this.get("ul")).tree('getNode', target); }`);
//    }
    
//    protected initContent(element) {
//        //默认启用点击事件
//        element.isclick = "true";
//        var ul = document.createElement("ul");
//        element.appendChild(ul);
//        element.set("ul", ul);
//        if (element.data) {
//            element.loadDatastring(element.data, element.click)
//        }
//    }

//    protected changeCssClass(element) {
//        $(element).find(".tree-file").removeClass("tree-file");
//        if (element.paddingleft) {
//            $(element).find(".tree-node").css("padding-left", parseInt(element.paddingleft));
//        }
//        if (element.hidefoldericon) {
//            $(element).find(".tree-folder").removeClass("tree-folder");
//            $(element).find(".tree-folder-open").removeClass("tree-folder-open");
//        }
//    }
//}

////【颜色字符串属性组件】
//class GfColorStringPropertyView extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ColorStringPropertyView";
//        this.methods["disable"] = `function() {   $(this.xtag.input).attr("disabled","disabled"); }`;
//        this.methods["enable"] = `function() {   $(this.xtag.input).removeAttr("disabled");  }`;
//        this.methods["getValue"] = `function() { return $(this.get("input")).val(); }`;
//        this.methods["setDisplay"] = `function(display) { 
//            $(this.get("shower")).css("backgroundColor","#" + this.getValue());
//            $(this.get("displayShower")).css("backgroundColor","#" + this.getValue());
//         }`;
//        this.methods["resize"] = "function(width) { $(this.xtag.input).width(width - 25); }";
//    };

//    protected innerSetValue(element, value) {
//        $(element.get("input")).val(value);
//        $(element.get("shower")).css("backgroundColor", "#" + value);
//        $(element.get("displayShower")).css("backgroundColor", "#" + value);
//    }

//    protected initContent(element) {

//        var input = document.createElement("input");
//        $(input).attr("name", $(element).attr("name"));
//        $(input).val($(element).attr("value"));
//        $(input).attr("readonly", "readonly");
//        $(input).css("width", element.width ? (parseInt(element.width) - 22) : 150);
//        $(input).css("height", 24);
//        $(input).addClass("textbox textbox-text");
//        element.xtag.input = input;

//        var display = element.get("display");
//        var wrapper = element.get("wrapper");
//        $(wrapper).addClass("GfColorStringPropertyView");
//        $(display).addClass("GfColorStringPropertyView");

//        //颜色显示
//        var shower = document.createElement("span");
//        $(shower).addClass("shower");
//        $(shower).click(function () {
//            $(input).click();
//        });
//        var displayShower = document.createElement("span");
//        $(displayShower).css("width", 20);
//        $(displayShower).css("height", 20);
//        $(displayShower).css("border", "1px solid darkgrey");
//        $(displayShower).css("display", "block");

//        element.set("shower", shower);
//        element.set("displayShower", displayShower);
//        wrapper.appendChild(input);
//        wrapper.appendChild(shower);
//        display.appendChild(displayShower);

//        $(input).ColorPicker({
//            color: element.value,
//            onChange: function (hsb, hex, rgb) {
//                //$(input).css('backgroundColor', '#' + hex);
//            },
//            onSubmit: function (hsb, hex, rgb, el) {
//                $(el).ColorPickerHide();
//                element.setValue(hex);
//            },
//            onBeforeShow: function () {
//                $(this).ColorPickerSetColor(this.value);
//            }
//        })
//            .bind('keyup', function () {
//                $(this).ColorPickerSetColor(this.value);
//            });
//        if (element.value) {
//            element.setValue(element.value);
//        }
//        this.setState(element, element.state);
//    }
//}

////【布局】
//class GfLayOut extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-LayOut";
//        this.autoInit = true;
//        this.addMethod("addRegion", `function(name,title,width,tools) {
//            $(this.get("div")).layout('add',{
//                region: name,
//                width: width,
//                title: title,
//                split: true,
//                tools:tools
//            });
//        }`);
//    }

//    protected initContent(element) {
//        $(element).css("width", "100%");
//        $(element).css("height", "100%");
//        var div = document.createElement("div");
//        element.appendChild(div);
//        element.set("div", div);
//        $(div).layout();
//    }
//}

////【文件上传】
//class GfUpFileDialog extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.autoInit = true;
//        this.elementName = "Gf-UpFileDialog";
//        this.addProperties("title,width,height,directoryid,directoryname,upfileserver,ext,mimeTypes,fileNumLimit,fileSingleSizeLimit,fileSizeLimit");
//        this.addMethod("open", `function(){ 
//                                    var div = this.get('div');
//                                    $(div).dialog({
//                                        title: this.title || '文件上传',
//                                        width: this.width || 800,
//                                        height: this.height || 600,
//                                        closed: true,
//                                        cache: false
//                                    });
//                                    var uploader=this.get('uploader');
//                                    if(uploader){
//                                        if($(".filelist li")[0]){
//                                            $(".filelist li").each(function () {
//                                                var id = $(this).attr("id");
//                                                uploader.removeFile(id);
//                                            });
//                                        }
//                                        else{
//                                            this.get('updateTotalProgress')();
//                                        }
//                                        var uploaderPanel=this.get('uploaderPanel');
//                                        $(uploaderPanel).remove();
//                                    }
//                                    control.initWebUploader(this);
//                                    $(div).dialog('open'); 
//                                }`);
//        this.addMethod("close", "function(){ $(this.get('div')).dialog('close'); }");
//    }

//    protected create(element) {
//        var control = this;
//        element.registerEventHandler("onbeforeinit", function () {
//            control.includeStyle($(document.body).attr("apppath") + "/Platform/Content/Scripts/webuploader/css/style.css");
//            control.includeStyle($(document.body).attr("apppath") + "/Platform/Content/Scripts/webuploader/css/webuploader.css");
//            control.includeJS($(document.body).attr("apppath") + "/Platform/Content/Scripts/webuploader/js/webuploader.js");
//        });
//        super.create(element);
//    }


//    protected initWebUploader(element) {
//        var control = this;
//        var uploaderPanel = document.createElement("div");
//        var toolbarid = element.get("toolbarid", toolbarid);
//        element.set("uploaderPanel", uploaderPanel);
//        $(uploaderPanel).addClass("container");
//        $(uploaderPanel).append(`<div class="page-container">
//                            <div class="uploader wu-example">
//                                <span style="font-size:16px;font-weight:bolder;">当前目录：` + element.directoryname + `</span>
//                                <span id="`+ toolbarid + `" style="float:right"></span>
//                                <div class="queueList filled">
//                                    <div  class="placeholder">
//                                        <p>试试将电脑里的文件拖到此处上传<br />或将截图复制到此处  </p>
//                                    </div>
//                                </div>
//                                <div class="statusBar">
//                                    <div class="progress">
//                                        <span class="text">0%</span>
//                                        <span class="percentage"></span>
//                                    </div>
//                                    <div class="info"></div>
//                                    <div class="btns">
//                                        <div class="clearBtn">清空</div><div class="filePicker"></div><div class="uploadBtn">开始上传</div>
//                                    </div>
//                                </div>
//                            </div>
//                        </div>`);
//        $(element.get('div')).append(uploaderPanel);
//        var $wrap = $('.uploader'),

//            // 图片容器
//            $queue = $('<ul class="filelist"></ul>')
//                .appendTo($wrap.find('.queueList')),

//            // 状态栏，包括进度和控制按钮
//            $statusBar = $wrap.find('.statusBar'),

//            // 文件总体选择信息。
//            $info = $statusBar.find('.info'),

//            // 上传按钮
//            $upload = $wrap.find('.uploadBtn'),

//            // 没选择文件之前的内容。
//            $placeHolder = $wrap.find('.placeholder'),

//            // 总体进度条
//            $progress = $statusBar.find('.progress').hide(),

//            // 添加的文件数量
//            fileCount = 0,

//            // 添加的文件总大小
//            //fileSize = 0,

//            // 优化retina, 在retina下这个值是2
//            ratio = window.devicePixelRatio || 1,

//            // 缩略图大小
//            thumbnailWidth = 110 * ratio,
//            thumbnailHeight = 110 * ratio,

//            // 可能有pedding, ready, uploading, confirm, done.
//            state = 'pedding',

//            // 所有文件的进度信息，key为file id
//            percentages = {},

//            succeedFile = [],

//            supportTransition = (function () {
//                var s = document.createElement('p').style,
//                    r = 'transition' in s ||
//                        'WebkitTransition' in s ||
//                        'MozTransition' in s ||
//                        'msTransition' in s ||
//                        'OTransition' in s;
//                s = null;
//                return r;
//            })(),

//            // WebUploader实例
//            uploader;

//        if (!WebUploader.Uploader.support()) {
//            control.warning('Web Uploader 不支持您的浏览器！如果你使用的是IE浏览器，请尝试升级 flash 播放器');
//            throw new Error('WebUploader does not support the browser you are using.');
//        }
//        // 实例化
//        var accept = {};
//        if (element.ext) {
//            accept["extensions"] = element.ext;
//        }
//        if (element.mimeTypes) {
//            accept["mimeTypes"] = element.mimeTypes;
//        }
//        uploader = WebUploader.create({
//            fileNumLimit: parseInt(element.fileNumLimit || 100),
//            pick: {
//                id: '.filePicker',
//                label: '选择文件'
//            },
//            accept: accept,
//            dnd: '.uploader .queueList',
//            paste: document.body,

//            // swf文件路径
//            swf: $(document.body).attr("apppath") + '/Content/js/Uploader.swf',
//            disableGlobalDnd: true,
//            duplicate: true,
//            chunked: false,
//            threads: 1,
//            server: element.upfileserver,
//            fileSizeLimit: (parseInt(element.fileSizeLimit) || 500 * 1024) * 1024,    // 500 M
//            fileSingleSizeLimit: (parseInt(element.fileSingleSizeLimit) || 100 * 1024) * 1024,    // 100 M
//            //formData: { DirectoryId: "" }
//        });


//        uploader.onUploadProgress = function (file, percentage) {
//            var $li = $('#' + file.id),
//                $percent = $li.find('.progress span');

//            $percent.css('width', percentage * 100 + '%');
//            percentages[file.id][1] = percentage;
//            updateTotalProgress();
//        };

//        uploader.onBeforeFileQueued = function (file) {
//            //file.id = control.GetUniqueId("File");
//        };
//        uploader.onFileQueued = function (file) {
//            if (file.name == 'image' || file.name == 'image.png') {
//                file.id = control.GetUniqueId("");
//                file.name = file.id;
//            }
//            fileCount++;
//            //fileSize += file.size;

//            if (fileCount === 1) {
//                $placeHolder.addClass('element-invisible');
//                $statusBar.show();
//            }

//            addFile(file);
//            setState('ready');
//            updateTotalProgress();
//        };

//        uploader.onFileDequeued = function (file) {
//            fileCount--;
//            //fileSize -= file.size;

//            if (!fileCount) {
//                setState('pedding');
//            }

//            removeFile(file);
//            updateTotalProgress();

//        };
//        uploader.onUploadBeforeSend = function (obj, data, headers) {
//            if (element.directoryid) {
//                data["DirectoryId"] = element.directoryid;
//            }

//        };
//        uploader.onUploadAccept = function (obj, response) {
//            if (response.IsSuccess) {
//                succeedFile.push(obj.file.id);
//            }
//            else {
//                control.warning(response.Message);
//                return false;
//            }
//        };
//        uploader.on('all', function (type) {
//            var stats;
//            switch (type) {
//                case 'uploadFinished':
//                    setState('confirm');
//                    break;

//                case 'startUpload':
//                    setState('uploading');
//                    break;

//                case 'stopUpload':
//                    setState('paused');
//                    break;

//            }
//        });
//        uploader.on('uploadBeforeSend', function (object, data, headers) {
//            element.triggerEventHandler("uploadBeforeSend", [object, data, headers])
//        });


//        uploader.onError = function (code) {
//            var text = '';
//            switch (code) {
//                case 'F_DUPLICATE': text = '该文件已经被选择了!';
//                    break;
//                case 'Q_EXCEED_NUM_LIMIT': text = '上传文件数量超过限制!';
//                    break;
//                case 'F_EXCEED_SIZE': text = '文件大小超过限制!(' + (parseInt(element.fileSingleSizeLimit) || 100 * 1024) + 'KB)';
//                    break;
//                case 'Q_EXCEED_SIZE_LIMIT': text = '所有文件总大小超过限制!(' + (parseInt(element.fileSizeLimit) || 500 * 1024) + 'KB)';
//                    break;
//                case 'Q_TYPE_DENIED': text = '文件类型不正确或者是空文件!';
//                    break;
//                default: text = '未知错误!';
//                    break;
//            }
//            control.warning(text);
//        };
//        $upload.on('click', function () {
//            if ($(this).hasClass('disabled')) {
//                return false;
//            }

//            if (state === 'ready') {
//                uploader.upload();
//            } else if (state === 'paused') {
//                uploader.upload();
//            } else if (state === 'uploading') {
//                uploader.stop();
//            }
//        });

//        $(".clearBtn").on('click', function () {
//            $(".filelist li").each(function () {
//                var id = $(this).attr("id");
//                uploader.removeFile(id);
//            });
//        });
//        $info.on('click', '.retry', function () {
//            uploader.retry();
//        });

//        // 当有文件添加进来时执行，负责view的创建
//        function addFile(file) {
//            var $li = $('<li id="' + file.id + '">' +
//                '<p class="title">' + file.name + '</p>' +
//                '<p class="imgWrap"></p>' +
//                '<p class="progress"><span></span></p>' +
//                '</li>'),

//                $btns = $('<div class="file-panel">' +
//                    '<span class="cancel">删除</span>' +
//                    '<span class="rotateRight">向右旋转</span>' +
//                    '<span class="rotateLeft">向左旋转</span></div>').appendTo($li),
//                $prgress = $li.find('p.progress span'),
//                $wrap = $li.find('p.imgWrap'),
//                $info = $('<p class="error"></p>'),

//                showError = function (code) {
//                    var text;
//                    switch (code) {
//                        case 'exceed_size':
//                            text = '文件大小超出';
//                            break;

//                        case 'interrupt':
//                            text = '上传暂停';
//                            break;

//                        default:
//                            text = '上传失败，请重试';
//                            break;
//                    }

//                    $info.text(text).appendTo($li);
//                };

//            if (file.getStatus() === 'invalid') {
//                showError(file.statusText);
//            } else {
//                // lazyload
//                $wrap.text('预览中');
//                uploader.makeThumb(file, function (error, src) {
//                    if (error) {
//                        $wrap.text('不能预览');
//                        $btns.find('.rotateRight,.rotateLeft').remove();
//                        return;
//                    }

//                    var img = $('<img src="' + src + '">');
//                    $wrap.empty().append(img);
//                }, thumbnailWidth, thumbnailHeight);

//                percentages[file.id] = [file.size, 0];
//                file.rotation = 0;
//            }

//            file.on('statuschange', function (cur, prev) {
//                if (prev === 'progress') {
//                    $prgress.hide().width(0);
//                }

//                // 成功
//                if (cur === 'error' || cur === 'invalid') {
//                    //console.log(file.statusText);
//                    showError(file.statusText);
//                    percentages[file.id][1] = 1;
//                } else if (cur === 'interrupt') {
//                    showError('interrupt');
//                } else if (cur === 'queued') {
//                    percentages[file.id][1] = 0;
//                } else if (cur === 'progress') {
//                    $info.remove();
//                    $prgress.css('display', 'block');
//                } else if (cur === 'complete') {
//                    $li.off('mouseenter mouseleave');
//                    $btns.remove();
//                    $li.append('<span class="success"></span>');
//                }

//                $li.removeClass('state-' + prev).addClass('state-' + cur);
//            });

//            $li.on('mouseenter', function () {
//                $btns.stop().animate({ height: 30 });
//            });

//            $li.on('mouseleave', function () {
//                $btns.stop().animate({ height: 0 });
//            });

//            $btns.on('click', 'span', function () {
//                var index = $(this).index(),
//                    deg;

//                switch (index) {
//                    case 0:
//                        uploader.removeFile(file);
//                        return;

//                    case 1:
//                        file.rotation += 90;
//                        break;

//                    case 2:
//                        file.rotation -= 90;
//                        break;
//                }
//                if (supportTransition) {
//                    deg = 'rotate(' + file.rotation + 'deg)';
//                    $wrap.css({
//                        '-webkit-transform': deg,
//                        '-mos-transform': deg,
//                        '-o-transform': deg,
//                        'transform': deg
//                    });
//                } else {
//                    $wrap.css('filter', 'progid:DXImageTransform.Microsoft.BasicImage(rotation=' + (~~((file.rotation / 90) % 4 + 4) % 4) + ')');
//                }
//            });

//            $li.appendTo($queue);
//        }

//        // 负责view的销毁
//        function removeFile(file) {
//            var $li = $('#' + file.id);

//            delete percentages[file.id];
//            updateTotalProgress();
//            $li.off().find('.file-panel').off().end().remove();
//        }

//        var updateTotalProgress = function () {
//            var loaded = 0,
//                total = 0,
//                spans = $progress.children(),
//                percent;

//            $.each(percentages, function (k, v) {
//                total += v[0];
//                loaded += v[0] * v[1];
//            });

//            percent = total ? loaded / total : 0;

//            spans.eq(0).text(Math.round(percent * 100) + '%');
//            spans.eq(1).css('width', Math.round(percent * 100) + '%');
//            updateStatus();
//        }

//        function updateStatus() {
//            var text = '', stats;

//            if (state === 'ready') {
//                text = '选中' + fileCount + '个文件。';
//            } else if (state === 'confirm') {
//                stats = uploader.getStats();
//                if (stats.uploadFailNum) {
//                    text = '已成功上传' + stats.successNum + '个文件，' +
//                        stats.uploadFailNum + '个文件上传失败'
//                }

//            } else {
//                stats = uploader.getStats();
//                text = '共' + fileCount + '个文件，已上传' + stats.successNum + '个文件';

//                if (stats.uploadFailNum) {
//                    text += '，失败' + stats.uploadFailNum + '个文件';
//                }
//            }

//            $info.html(text);
//        }

//        function setState(val) {
//            var file, stats;

//            if (val === state) {
//                return;
//            }

//            $upload.removeClass('state-' + state);
//            $upload.addClass('state-' + val);
//            state = val;

//            switch (state) {
//                case 'pedding':
//                    $placeHolder.removeClass('element-invisible');
//                    $queue.parent().removeClass('filled');
//                    $queue.hide();
//                    //$statusBar.addClass('element-invisible');
//                    uploader.refresh();
//                    break;

//                case 'ready':
//                    $placeHolder.addClass('element-invisible');
//                    $queue.parent().addClass('filled');
//                    $queue.show();
//                    uploader.refresh();
//                    break;

//                case 'uploading':
//                    $progress.show();
//                    $upload.text('暂停上传');
//                    break;

//                case 'paused':
//                    $progress.show();
//                    $upload.text('继续上传');
//                    break;

//                case 'confirm':
//                    element.triggerEventHandler("onSubmit");
//                    $progress.hide();
//                    $upload.text('开始上传');//.addClass('disabled');
//                    stats = uploader.getStats();
//                    if (stats.successNum && !stats.uploadFailNum) {
//                        setState('finish');
//                        return;
//                    }

//                    break;
//                case 'finish':
//                    stats = uploader.getStats();
//                    if (stats.successNum) {
//                        //alert('上传成功');
//                    } else {
//                        // 没有成功的图片，重设
//                        state = 'done';
//                        location.reload();
//                    }

//                    break;
//            }

//            updateStatus();
//        }

//        $upload.addClass('state-' + state);

//        updateTotalProgress();
//        element.set("uploader", uploader);
//        element.set("updateTotalProgress", updateTotalProgress)
//    }

//    protected initContent(element) {
//        var div = document.createElement("div");
//        element.set("div", div);
//        element.appendChild(div);

//        var toolbarid = this.GetUniqueId("toolbar");
//        element.set("toolbarid", toolbarid);

//        var control = this;
//        $(div).css("padding", "2px");
//        $(div).dialog({
//            title: element.title || '文件上传',
//            width: element.width || 800,
//            height: element.height || 600,
//            closed: true,
//            cache: false,
//            modal: true
//        });
//    }
//}

////【关联对象添加】
//class GfRocAdd extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-RocAdd";
//        this.addProperty("createOption", `{ attribute: {}, get: function()  { return this.get("list").getObject().value;} }`);
//        this.addProperties("listwidth,listvalue,whentoshow");
//        this.addboolProperties("cancreate,canselect");
//        this.addMethod("enable", `function(){
//            this.get("list").enable();
//            $(this.get("button")).linkbutton("enable");
//        }`);
//        this.addMethod("disable", `function(){
//            this.get("list").disable();
//            $(this.get("button")).linkbutton("disable");
//        }`);
//    }

//    protected initContent(element) {

//        var list = document.createElement("Gf-ListPropertyView");
//        element.appendChild(list);
//        element.set("list", list);
//        var data = [];
//        if (element.canselect) {
//            var obj = {};
//            obj["value"] = "select";
//            obj["text"] = "引用";
//            obj["permissioncode"] = "11111";
//            data.push(obj);
//        }
//        if (element.cancreate) {
//            var obj = {};
//            obj["value"] = "add";
//            obj["text"] = "新建";
//            obj["permissioncode"] = "11111";
//            data.push(obj);
//        }
//        if (element.listvalue) {
//            list["value"] = element.listvalue;
//        }
//        list["valuefield"] = "value";
//        list["textfield"] = "text";
//        list["width"] = element.listwidth;
//        list["init"]();
//        list["loadData"](data);
//        list["setObject"](data[0]);

//        var add = this.createLinkbutton("新建", "fa fa-plus", function () {
//            element.triggerEventHandler("onAddRoc");
//        }, {});
//        element.appendChild(add);
//        element.set("button", add);

//        if (!element.cancreate && !element.canselect) {
//            $(list).hide();
//            $(add).hide();
//        }

//    }
//}

////【多级下拉框】
//class GfMultDropDownList extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-MultDropDownList";
//        this.addProperties("data,valuefield,textfield,defaultoption,color,source,rootvalue");
//        this.methods["setDisplay"] = "function(display) { $(display).text(this.getText()); }";
//        this.methods["getValue"] = `function() { 
//                                        var obj = this.get("obj");
//                                        if(obj && obj[this.valuefield]){
//                                            return JSON.stringify(obj); 
//                                        }
//                                        else{
//                                            return "";
//                                        }
//                                    }`;
//        this.addMethod("setObject", `function(obj){ 
//                                        if(!obj){
//                                            obj = {};
//                                            obj['klass'] = '';
//                                            obj[this.textfield] = '';
//                                            obj[this.valuefield] = '';
//                                        }
//                                        this.set("obj",obj); 
//                                        $(this.get("valueInput")).val(JSON.stringify(obj));
//                                        $(this.get("select")).combobox('setValue', obj[this.valuefield]); 
//                                     }`);
//        this.addMethod("getObject", `function(){ return this.get("obj"); }`);
//        this.addMethod("getText", `function(){ var selecttext = this.get("selecttext"); var obj = this.get("obj"); return selecttext ? selecttext : obj[this.textfield]; }`);
//        this.addMethod("enable", `function(){
//                                        var selects = this.get("selects");
//                                        for (var i = 0; i < selects.length; i++) {
//                                            $(selects[i]).combobox('enable'); 
//                                        }
//                                    }`);
//        this.addMethod("disable", `function(){ 
//                                        var selects = this.get("selects");
//                                        for (var i = 0; i < selects.length; i++) {
//                                            $(selects[i]).combobox('disable'); 
//                                        }
//                                    }`);
//        this.methods["resize"] = `function(width) { 
//                                        var selects = this.get("selects");
//                                        for (var i = 0; i < selects.length; i++) {
//                                            $(selects[i]).combobox('resize',width); 
//                                        }
//                                     }`;
//        this.emptyValue = null;
//    }

//    protected innerSetValue(element, value) {
//        if (value) {
//            if (window["isString"](value)) {
//                var obj = this.stringToObject(value);
//                element.setObject(obj);
//            } else {
//                element.setObject(value);
//            }
//        }
//        else {
//            element.setObject(null);
//        }
//    }

//    protected parseToObject(element, value) {
//        var obj = {};
//        obj['klass'] = element.klass;
//        obj[element.textfield] = '';
//        obj[element.valuefield] = '';

//        if (value) {
//            if (window["isString"](value)) {
//                obj = this.stringToObject(value);
//            }
//            else {
//                obj = value
//            }
//        }
//        return obj;
//    }

//    protected valueEquals(oldValue, newValue, element) {
//        return this.parseToObject(element, oldValue)[element.valuefield] == this.parseToObject(element, newValue)[element.valuefield];
//    }

//    protected create(element) {
//        var control = this;
//        element.registerEventHandler("onafterchange", function () {
//            element.value = element.getObject()[element.valuefield];
//            control.planSelect(element, element.getObject()[element.valuefield]);
//        });
//        super.create(element);
//    }

//    protected initContent(element) {
//        this.planSelect(element, element.value);
//    }

//    public getSelectList(element, selectvalue) {
//        var selectlist = selectvalue;
//        if (selectvalue != "") {
//            var j = 1;
//            for (var i = 0; i < j; i++) {
//                selectvalue = this.getParentvalue(element, selectvalue);
//                if (selectvalue != element.rootvalue && selectvalue != "") {
//                    selectlist = selectvalue + "," + selectlist;
//                    j = j + 1;
//                }
//            }
//        }
//        return selectlist;
//    }

//    public getParentvalue(element, sonvalue) {
//        var parentvalue = "";
//        if (element.data) {
//            var array = element.data.split(',');
//            $(array).each(function () {
//                if (this.length > 0 && this.split('_')[0] == sonvalue) {
//                    parentvalue = this.split('_')[2];
//                }
//            });
//        }
//        return parentvalue;
//    }

//    public planSelect(element, selectvalue) {
//        var objselects = [];
//        element.set("selects", objselects);
//        element.set("selecttext", "");
//        $(element.get("wrapper")).empty();
//        var valueInput = document.createElement("input");
//        $(valueInput).attr("type", "hidden");
//        $(valueInput).attr("name", $(element).attr("name"));
//        element.appendChild(valueInput);
//        element.set("valueInput", valueInput);
//        var selectlist = this.getSelectList(element, selectvalue);
//        selectlist = element.rootvalue + "," + selectlist + ","
//        selectlist = selectlist.replace(",,", ",").replace(",,", ",");
//        var array = selectlist.split(',');
//        for (var i = 0; i < array.length - 1; i++) {
//            this.addSelect(element, array[i], array[i + 1]);
//        }
//    }

//    public addSelect(element, parentvalue, selectvalue) {
//        var objs = [];
//        if (element.data) {
//            var array = element.data.split(',');
//            $(array).each(function () {

//                if (this.length > 0 && this.split('_')[2] == parentvalue) {
//                    var obj: any = {};
//                    obj[element.valuefield] = this.split('_')[0];
//                    obj[element.textfield] = this.split('_')[1];
//                    obj.color = this.split('_')[3];
//                    objs.push(obj);

//                    if (this.split('_')[0] == selectvalue) {
//                        element.setObject(obj);
//                        var ttext = element.get("selecttext");
//                        element.set("selecttext", ttext + " " + this.split('_')[1]);
//                    }
//                }
//            });
//        }
//        if (objs) {
//            if (objs.length > 0) {
//                if (element.defaultoption) {
//                    var obj = {};
//                    obj[element.valuefield] = "";
//                    obj[element.textfield] = element.defaultoption;
//                    objs.unshift(obj);
//                }
//                var wrapper = element.get("wrapper");
//                var display = element.get("display");

//                var select = document.createElement("select");
//                wrapper.appendChild(select);

//                var objselects = element.get("selects");
//                objselects.push(select);
//                element.set("selects", objselects);

//                $(select).combobox({
//                    valueField: element.valuefield,
//                    textField: element.textfield,
//                    width: element.width || 170,
//                    editable: false,
//                    loadData: objs,
//                    onChange: function (newValue, oldValue) {
//                    },
//                    onClick: function (record) {
//                        $("div.combo-panel").show();
//                    },
//                    onSelect: function (record) {
//                        element.setObject(record);
//                        $("div.combo-panel").hide();
//                        element.triggerEventHandler("onafterchange", [record]);
//                    }
//                });

//                $(select).combobox('loadData', objs);
//                if (selectvalue != "") {
//                    $(select).combobox('setValue', element.getObject()[element.textfield]);
//                }
//            }
//        }
//    }
//}

////【授权】
//class GfAuthorization extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Authorization";
//        this.addProperties("selecttoshow,dataurl");
//        this.addMethod("load", `function(entity){ control.load(this,entity); }`);
//        this.addMethod("hide", `function(){ control.hide(this); }`);
//    }

//    protected load(element, entity) {
//        var control = this;
//        window["platformAjax"]({
//            url: element.dataurl || document.body["getauthorizationurl"],
//            sync: true,
//            data: { id: entity.id },
//            success: function (result) {
//                var obj = JSON.parse(result.Data);
//                if (obj.NotExists) {
//                    element.hide();
//                    return;
//                }
//                var Permissions = JSON.parse(obj.Permissions);
//                var current = control.stringToObject(obj.Current);
//                var AllowPrivate = obj.AllowPrivatePermission;

//                //当前权限对象的读取权
//                var currentRead = current.permissioncode[1] === '1';
//                //源对象的授权权
//                var sourceAuthorize = obj.PermissionCode[4] === '1';

//                element.set("source", entity);
//                element.set("Current", current);
//                element.set("Permissions", Permissions);
//                element.set("model", obj);

//                control.clearMenu(element);

//                var menu = element.get("menu");


//                if (currentRead) {
//                    $('#' + menu.id).menu('appendItem', {
//                        text: '查看当前权限',
//                        iconCls: '',
//                        onclick: function () {
//                            document.body["openObjDetail"]({
//                                controlid: null,
//                                objid: current.id,
//                                klass: current.klass,
//                                title: current.combinedtitle
//                            });
//                        }
//                    });

//                    $('#' + menu.id).menu('appendItem', {
//                        separator: true
//                    });
//                }


//                if (sourceAuthorize) {

//                    if (AllowPrivate) {
//                        $('#' + menu.id).menu('appendItem', {
//                            text: '分派“私有权限”',
//                            iconCls: '',
//                            onclick: function () {
//                                control.createPrivatePermission(element);
//                            }
//                        });
//                    }

//                    $(Permissions).each(function () {

//                        var id = this.Id.replace("@", "-");
//                        var label = this.Label;
//                        var description = this.Description;
//                        var isCurrent = this.IsCurrent;
//                        var code = this.PermissionCode;
//                        var icon = "";
//                        if (this.IsDefault) {
//                            label += '[默认]';
//                        }
//                        if (this.IsCurrent) {
//                            icon = 'fa fa-check iconfont';
//                        }
//                        else {
//                            label = '分派“' + label + '“';
//                        }

//                        var item = {
//                            id: id,
//                            description: description,
//                            isCurrent: isCurrent,
//                            text: code[0] === '1' ? label : '无发现权',//权限对象的发现权
//                            iconCls: icon,
//                            onclick: function () {
//                                if (!item.isCurrent) {
//                                    control.authorize(element, item.id, null);
//                                }
//                            }
//                        };
//                        $('#' + menu.id).menu('appendItem', item);
//                        $('#' + item.id).attr("title", description);
//                        element.get("menuItems").push(item);

//                    });
//                }
//            }
//        });
//    }

//    protected hide(element) {
//        var menu = element.get("menu");
//        $(menu).menu("hide");
//        $(menu).hide();
//        $(element).hide();

//    }

//    protected clearMenu(element) {
//        var menu = element.get("menu");
//        var items = element.get("menuItems");
//        $(items).each(function () {
//            var item = $('#' + menu.id).menu('findItem', this.text);
//            $(item.target).remove();
//        });
//        $(menu).html("");
//        element.set("menuItems", []);

//    }

//    protected createPrivatePermission(element) {
//        var control = this;
//        control.confirm("将为当前对象分派私有权限。<br>初始私有权限复制于当前对象的“默认权限”，以便编辑设置该私有权限。<br>【确定】继续分派，【取消】返回", function () {
//            window["platformAjax"]({
//                url: document.body["getnewprivatepermissionurl"],
//                sync: true,
//                data: { id: element.get("source").id },
//                success: function (result) {
//                    var permission = JSON.parse(result.Data);
//                    document.body["openObjDetail"]({
//                        controlid: permission.id,
//                        objid: permission.id,
//                        klass: 'ObjektPermission',
//                        title: permission.combinedtitle,
//                        oninitLoaded: function () {
//                            this.setState("edit");
//                        }
//                    });
//                }
//            });
//        });


//    }

//    protected authorize(element, permissionId, onsuccess) {
//        window["platformAjax"]({
//            url: document.body["authorizeurl"],
//            data: { id: element.get("source").id, permissionId: permissionId },
//            success: onsuccess || function (result) { }
//        });
//    }

//    protected initContent(element) {
//        var button = document.createElement("a");
//        var menuid = this.GetUniqueId("menu");
//        $(button).addClass("easyui-menubutton");
//        $(button).text("权限");
//        $(button).attr("href", "javascript:void(0)");
//        $(button).attr("data-options", "menu:'#" + menuid + "',iconCls:'fa fa-key iconfont'");
//        button.id = this.GetUniqueId("menubutton");

//        var menu = document.createElement("div");
//        menu.id = menuid;
//        $(menu).hide();
//        $(menu).css("width", 220);

//        $(button).blur(function () {
//            if (!element.get("clicked")) {
//                $(menu).menu("hide");
//                $(menu).hide();
//            }
//        });
//        $(button).click(function () {
//            element.triggerEventHandler("onBeforeShow");
//            element.set("clicked", true);
//            $(menu).menu("show");
//            $(menu).show();
//            element.triggerEventHandler("onAfterShow");
//        });
//        $(button).mouseout(function () {
//            element.set("clicked", false);
//        });

//        element.appendChild(menu);
//        element.appendChild(button);
//        element.set("button", button);
//        element.set("menu", menu);
//        element.set("menuItems", []);

//        $("#" + button.id).menubutton({
//            iconCls: 'fa fa-key',
//            menu: '#' + menuid
//        });

//        $(button).children("span").css("border", "1px solid #e1e6eb");
//        $(button).children("span").css("border-radius", "3px");
//        $(button).children("span").attr("title", "权限");
//    }
//}

////【生成UML参数】
//class GfUmlParams extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-UmlParams";
//        this.addProperties("ids,getumlurl,checkumlurl,listdataurl");
//        this.addMethod("open", `function(){ control.open(this); }`);
//    }

//    protected initContent(element) {
//        var control = this;
//        var listData;
//        window["platformAjax"]({
//            url: element.listdataurl || document.body["getlistdataurl"],
//            sync: true,
//            data: { listid: 'a91676b8d73046d6aa29b2d87df7f73a@List' },
//            success: function (result) {
//                listData = result.Data;
//                var array = listData.split(',');
//                var options = '';
//                $(array).each(function () {
//                    if (this != "") {
//                        options += `<option value ="` + this.split('_')[0] + `">` + this.split('_')[1] + `</option>`;
//                    }
//                });
//                var form = document.createElement("form");
//                $(form).html(`
//                <div>
//                    <table>
//                        <tr>
//                            <th class="PropertyLabel">展开 :</th>
//                            <td class="PropertyValue">
//                            <select name="extendingLayerNum">
//                                <option value ="0">0</option>
//                                <option value ="1" selected = "selected" >1</option>
//                                <option value ="2">2</option>
//                                <option value ="3">3</option>
//                                <option value ="10">不限</option>
//                            </select>层
//                            </td>
//                        </tr>
//                        <tr>
//                            <th class="PropertyLabel">简化继承 :</th>
//                            <td class="PropertyValue"> <input type="checkbox" name="conciseGeneration" checked="checked" /></td>
//                        </tr>
//                        <tr>
//                            <th class="PropertyLabel">属性关联 :</th>
//                            <td class="PropertyValue"> <input type="checkbox" name="showPropertyRelationship" /></td>
//                        </tr>
//                        <tr>
//                            <th class="PropertyLabel">显示标签 :</th>
//                            <td class="PropertyValue"> <input type="checkbox" name="showLabel" checked="checked" /></td>
//                        </tr>
//                        <tr>
//                            <th class="PropertyLabel">生成格式 :</th>
//                            <td class="PropertyValue">
//                            <select name="format">
//                                `+ options + `
//                            </select>
//                            <input type="hidden" name="ids" value="`+ element.ids + `" />
//                            </td>
//                        </tr>
//                    </table>
//                </div>`);
//                element.appendChild(form);
//                element.set("form", form);
//                control.buildButtons(element);
//            }
//        });


//    }

//    protected buildButtons(element) {
//        var sure = this.createLinkbutton("生成", "fa fa-check", function () {
//            var obj = $(element.get("form")).serializeObject();
//            obj.conciseGeneration = obj.conciseGeneration == "on";
//            obj.showPropertyRelationship = obj.showPropertyRelationship == "on";
//            obj.showLabel = obj.showLabel == "on";

//            var dialog = element.get("dialog");
//            dialog.close();
//            window["ajaxLoading"]("正在生成UML，请稍候...");

//            window["platformAjax"]({
//                url: element.getumlurl || document.body["getumlurl"],
//                data: { model: obj },
//                success: function (result) {

//                    var umlObj = JSON.parse(result.Data);
//                    var text = window["unescape"](encodeURIComponent(umlObj.text));
//                    text = window["encode64"](window["zip_deflate"](text, 9));

//                    window["platformAjax"]({
//                        url: element.checkumlurl || document.body["checkumlurl"],
//                        sync: true,
//                        data: { url: umlObj.url + "check/" + text },
//                        success: function (result) {
//                            var url = umlObj.url + umlObj.format + "/" + text;
//                            window.open(url);
//                            window["ajaxLoadEnd"]();
//                        }
//                    });
//                }
//            });
//        }, {});


//        var check = this.createLinkbutton("查看", "fa fa-code", function () {
//            var obj = $(element.get("form")).serializeObject();
//            obj.conciseGeneration = obj.conciseGeneration == "on";
//            obj.showPropertyRelationship = obj.showPropertyRelationship == "on";
//            obj.showLabel = obj.showLabel == "on";

//            window["platformAjax"]({
//                url: element.getumlurl || document.body["getumlurl"],
//                sync: true,
//                data: { model: obj },
//                success: function (result) {
//                    var umlObj = JSON.parse(result.Data);
//                    var div = document.createElement("div");
//                    var textarea = document.createElement("textarea");
//                    $(textarea).attr("disabled", "disabled");
//                    $(textarea).height("500px");
//                    $(textarea).width("750px"); 0
//                    $(textarea).val(umlObj.text);
//                    $(div).css("padding", "10px")
//                    $(div).append(textarea);
//                    document.body["openDialog"]({
//                        id: element.id + "-checkText",
//                        width: 800,
//                        height: 600,
//                        title: '查看UML源码',
//                        content: div
//                    });
//                }
//            });
//        }, {});

//        var cancel = this.createLinkbutton("取消", "fa fa-times", function () {
//            var dialog = element.get("dialog");
//            dialog.close();
//        }, {});

//        var buttonsdiv = document.createElement("div");
//        $(buttonsdiv).addClass("dialog-button");
//        buttonsdiv.id = this.GetUniqueId("buttonsdiv");
//        buttonsdiv.appendChild(sure);
//        buttonsdiv.appendChild(check);
//        buttonsdiv.appendChild(cancel);
//        $(element).append(buttonsdiv);
//    }

//    protected open(element) {
//        var dialog = document.body["openDialog"]({
//            id: element.id + "-uml",
//            width: 500,
//            height: 225,
//            title: '生成UML参数',
//            content: element
//        });
//        element.set("dialog", dialog);
//    }
//}

///*图片验证码
//  组件名Gf-VerifyCode

//  属性:
//  codelength：验证码长度(默认值4,即4个验证码)
//  fontsize：字体大小(默认值14字号)
//  imgwidth：图片宽度(不填则取父容器宽度)
//  imgheight：图片高度(不填则取父容器高度度)
//  codekey:验证码Key,用于保证验证码的唯一性,不填则为默认Key

//  方法:
//  刷新验证码
//  document.querySelector("#xxx").Refresh();
//  事件:

//*/

//class GfVerifyCode extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.autoInit = false;
//        this.elementName = "Gf-VerifyCode";
//        this.addProperties("codelength,fontsize,imgwidth,imgheight,codekey");
//        this.addMethod("Refresh", "function(){control.Refresh(this) }");
//    }

//    //刷新验证码
//    protected Refresh(element) {
//        var VerifyCodeImg = element.get("VerifyCodeImg");

//        var ImgSrc = element.get("VerifyCodeImgSrc") + "&" + this.GetUniqueId();

//        $(VerifyCodeImg).attr("src", ImgSrc);
//    }

//    protected initContent(element) {
//        var container = this.buildControls(element);
//    }
//    protected buildControls(element) {
//        //初始化运行时状态对象
//        element.xtag.runtime = {};

//        //控件容器
//        var container = document.createElement("div");
//        $(container).addClass("ImgVerifyCode");
//        $(container).css("height", "100%");
//        $(container).css("width", "100%");
//        element.appendChild(container);

//        //图片宽度
//        var ImgWidth = element.imgwidth || $(container).width();
//        //图片高度
//        var ImgHeight = element.imgheight || $(container).height();
//        //字体大小
//        var FontSize = element.fontsize || 14;
//        //验证码长度
//        var CodeLength = element.codelength || 4;

//        //图片路径
//        var ImgSrc = document.body["apppath"] + "/VerifyCode/CreatVerifyCode?" + "VerifyCodeLength=" + CodeLength + "&ImgWidth=" + ImgWidth + "&ImgHeigth=" + ImgHeight + "&FontSize=" + FontSize + "&" + this.GetUniqueId();


//        if (element.codekey) {
//            ImgSrc += "&VerifyCodeKey=" + element.codekey;
//        }

//        element.set("VerifyCodeImgSrc", ImgSrc);

//        //创建图片
//        var VerifyCodeImg = document.createElement("img");
//        $(VerifyCodeImg).attr("src", ImgSrc);
//        $(VerifyCodeImg).css("cursor", "pointer");
//        $(container).append(VerifyCodeImg);
//        element.set("VerifyCodeImg", VerifyCodeImg);
//        $(VerifyCodeImg).click((e) => {
//            this.Refresh(element);
//        });
//    }
//}

///*消息验证码
//  组件名Gf-SmsCode

//  属性:
//  messagetemplateid:消息模版Id
//  messagesenderid:消息发送器Id可多个,用','分隔
//  accounts:消息接收账户,可多个,用','分隔
//  codekey:验证码Key,用于保证验证码的唯一性,不填则为默认短信验证码Key
//  width:组件宽度,不填默认150px
//  codelength:验证码长度,不填默认长度4  
//  方法:


//  事件:
//   //发送消息前事件
//   document.querySelector("xx").registerEventHandler("BeforeSendMessage", function () {});
//   //发送消息后事件
//   document.querySelector("xx").registerEventHandler("AfterSendMessage", function () {});

//*/
//class GfMessageCode extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.autoInit = false;
//        this.elementName = "Gf-MessageCode";
//        this.addProperties("codekey,width,codelength,accounts,messagetemplateid,messagesenderid");
//        this.addMethod("goTo", `function(){ control.goTo(this); }`);
//    }

//    protected initContent(element) {
//        var container = this.buildControls(element);
//    }
//    protected buildControls(element) {
//        //初始化运行时状态对象
//        element.xtag.runtime = {};
//        element.id = element.id || this.GetUniqueId("SmsCode");
//        //控件容器
//        var container = document.createElement("div");
//        $(container).addClass("SmsVerifyCode");
//        element.appendChild(container);

//        var btnSendSmsCss = {
//            "width": element.width || "150px"
//        };

//        var that = this;

//        var btnSendSms = document.createElement("input");
//        $(btnSendSms).attr("type", "button");
//        $(btnSendSms).attr("value", "点击免费获取");
//        $(btnSendSms).addClass("btnSendSmsVerifyCode");
//        $(btnSendSms).css(btnSendSmsCss);

//        $(btnSendSms).on("mousedown", function () {
//            $(this).css({
//                "background": "linear-gradient(#eee, #fff)",
//                "color": "#333"
//            });
//        }).on("mousemove", function () {

//            $(this).css({
//                "background": "linear-gradient(#fff, #f7f7f7)",
//                "color": "#333"
//            });
//        }).on("mouseleave", function () {
//            $(this).css(btnSendSmsCss);
//        }).on("mouseup", function () {
//            $(this).css(btnSendSmsCss);
//        }).on("click", function () {
//            that.SendSms(element);
//        });
//        element.set("btnSendSms", btnSendSms);
//        $(container).append(btnSendSms);
//    }

//    protected SendSms(element) {
//        element.triggerEventHandler("BeforeSendMessage");
//        if (!element.accounts) {
//            return;
//        }
//        var data = {
//            messageTemplateId: element.messagetemplateid,
//            messageSenderId: element.messagesenderid,
//            accounts: element.accounts,
//            codeLength: element.codelength || 4
//        };

//        if (element.codekey) {
//            data["smsVerifyCodeKey"] = element.codekey;
//        }

//        var btnSendSms = element.get("btnSendSms");
//        $(btnSendSms).attr("disabled", "false");
//        $.ajax({
//            url: document.body["apppath"] + "/SendMessage/SendMessageCode",
//            type: 'POST',
//            dataType: "json",
//            data: data,
//            async: false,
//            success: (result) => {
//                if (result.IsSuccess == true) {
//                    element.set("TimeNumber", 60);
//                    var timerId = setInterval("document.querySelector('#" + element.id + "').goTo()", 1000);
//                    element.set("TimerId", timerId);
//                }
//                else {
//                    alert(result.Message);
//                    $(btnSendSms).val("失败重新获取");
//                    $(btnSendSms).removeAttr("disabled");
//                }

//            }


//        });
//        element.triggerEventHandler("AfterSendMessage");

//    }




//    protected goTo(element) {
//        var btnSendSms = element.get("btnSendSms");
//        var TimeNumber = element.get("TimeNumber");
//        TimeNumber--;
//        element.set("TimeNumber", TimeNumber);
//        $(btnSendSms).val(TimeNumber + "秒后可重新发送");
//        if (TimeNumber == 0) {
//            var TimerId = element.get("TimerId");
//            $(btnSendSms).val("点击免费获取");
//            clearInterval(TimerId);
//            $(btnSendSms).removeAttr("disabled");
//        }
//    }

//}

///*生命周期
//  组件名Gf-Lifecycle

//  属性:
//  width:宽度
//  height:高度
//  newnodename:新建节点名称,默认值"新状态"
//  newlinkname:新建链接名称,默认值"改变"
//  lifecycleid:生命周期对象ID,必填
//  sourceurl:加载数据源,默认值"/Lifecycle/GetLifecycleInfo"


//  方法:
//  //得到视图数据
//  GetDiagramData:


//  事件:


//*/

//class GfLifecycle extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Lifecycle";
//        this.addProperties("width,height,newnodename,newlinkname,lifecycleid,sourceurl");
//        this.addMethod("GetDiagramData", "function(){return control.GetDiagramData(this); }");
//    }

//    //初始化
//    protected initContent(element) {

//        //必须引用go.js
//        this.includeJS(document.body["apppath"] + "/Platform/Content/Scripts/go.js");

//        //初始化运行时状态对象
//        element.xtag.runtime = {};

//        element.newnodename = element.newnodename || "新状态";
//        element.newlinkname = element.newlinkname || "改变";
//        element.width = element.width || "100%";
//        element.height = element.height || "100%";
//        element.sourceurl = document.body["apppath"] + "/Lifecycle/GetLifecycleInfo";
//        //创建用于承载状态图的Div
//        var LifecycleDiv = document.createElement("div");
//        LifecycleDiv.id = this.GetUniqueId("GfLifecycle_GoId");
//        $(LifecycleDiv).css({
//            "width": element.width,
//            "height": element.height
//        });
//        $(LifecycleDiv).addClass("GfLifecycle");
//        element.append(LifecycleDiv);
//        element.set("LifecycleDiv", LifecycleDiv);

//    }

//    //初始化视图
//    protected insert(element) {

//        var that = this;

//        //声明gojs方法
//        var go = window["go"];
//        //为了简洁定义模板
//        var goMake = go.GraphObject.make;
//        //声明视图  
//        var lifecycleDiagram;


//        //得到用于承载状态图的Div
//        var LifecycleDiv = element.get("LifecycleDiv");
//        //初始化视图窗口
//        lifecycleDiagram =
//            //必须命名或引用DIV HTML元素
//            goMake(go.Diagram, LifecycleDiv.id,
//                {
//                    //启动视图中间的所有内容,确保视图初始化的时候内容始终在视图的中心
//                    initialContentAlignment: go.Spot.Center,
//                    //鼠标滚轮事件放大和缩小而不是上下滚动
//                    "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
//                    //双击创建新节点数据
//                    "clickCreatingTool.archetypeNodeData": {},
//                    //双击创建新节点事件
//                    "clickCreatingTool.insertPart": function (loc) {
//                        //创建节点视图模型                                      
//                        this.archetypeNodeData = that.CreateNewPartModel(element, "LifecycleState", element.newnodename);
//                        return go.ClickCreatingTool.prototype.insertPart.call(this, loc);
//                    },
//                    //创建新链接数据
//                    "linkingTool.archetypeLinkData": {},
//                    //创建新链接事件
//                    "linkingTool.insertLink": function (fromnode, fromport, tonode, toport) {
//                        this.archetypeLinkData = that.CreateNewPartModel(element, "LifecycleTransition", element.newlinkname);
//                        return go.LinkingTool.prototype.insertLink.call(this, fromnode, fromport, tonode, toport);
//                    },
//                    //启用撤消和重做
//                    "undoManager.isEnabled": true,
//                    "allowClipboard": false
//                });

//        //定义节点模板,节点外形
//        lifecycleDiagram.nodeTemplate =
//            goMake(go.Node, "Auto",
//                //将节点的location位置属性绑定在视图模版内容的loc中
//                //go.Point.parse:强制将实际的属性值转换为location位置属性,这里用于将源数据值转换为location
//                //makeTwoWay将视图模型上的更改传播回数据,这里用于回传更改
//                new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),

//                // 定义节点的外形，将环绕TextBlock
//                goMake(go.Shape, "RoundedRectangle",
//                    {
//                        //节点外形圆角半径
//                        parameter1: 5,
//                        //节点颜色,渐变色从一个颜色到另一个颜色，从上到下（默认）
//                        fill: goMake(go.Brush, "Linear", { 0: "rgb(254, 201, 0)", 1: "rgb(254, 162, 0)" }),
//                        //节点外边框颜色,为null标识没有外边框
//                        stroke: null,
//                        //此形状是节点的端口，而不是整个节点
//                        portId: "",
//                        //获取或设置用户是否可以从此端口绘制链接
//                        fromLinkable: true,
//                        //获取或设置用户是否可以绘制从该端口的Node连接的链接
//                        fromLinkableSelfNode: true,
//                        //获取或设置用户是否可以从此端口绘制重复的链接
//                        fromLinkableDuplicates: true,
//                        //获取或设置用户是否可以向该端口绘制链接
//                        toLinkable: true,
//                        //获取或设置用户是否可以绘制连接到此端口的节点的链接
//                        toLinkableSelfNode: true,
//                        //获取或设置用户是否可以向该端口绘制重复的链接
//                        toLinkableDuplicates: true,
//                        //光标悬停在节点上鼠标的外形
//                        cursor: "pointer"

//                    }),
//                //定义节点的文字内容
//                goMake(go.TextBlock,
//                    {
//                        //字体
//                        font: "bold 11pt helvetica, bold arial, sans-serif",
//                        //编辑文本自动更新模型数据
//                        editable: true,
//                        margin: new go.Margin(5, 7, 5, 7)
//                    },
//                    //回传text的更改
//                    new go.Binding("text").makeTwoWay()
//                )
//            );

//        //定义节点选择模版,节点选中处理
//        lifecycleDiagram.nodeTemplate.selectionAdornmentTemplate =
//            //装饰spot
//            goMake(go.Adornment, "Spot",
//                goMake(go.Panel, "Auto",
//                    //选中之后的外形
//                    goMake(go.Shape, { fill: null, stroke: "#00CCFF", strokeWidth: 1 }),
//                    //选择的外形与节点的边距为0
//                    goMake(go.Placeholder)
//                ),
//                // 在右上角创建一个“下一个”节点的按钮。
//                goMake("Button",
//                    {
//                        //按钮显示在右上角
//                        alignment: go.Spot.TopRight,
//                        //调用创建新节点方法
//                        click: addNodeAndLink
//                    },
//                    //按钮外形
//                    goMake(go.Shape, "PlusLine", { width: 6, height: 6 })
//                )
//            );


//        function addNodeAndLink(e, obj) {
//            //节点
//            var adornment = obj.part;
//            //视图
//            var diagram = e.diagram;
//            //开始一个"增加状态"的事务
//            diagram.startTransaction("Add State");

//            // 获取用户单击按钮的节点数据。
//            var fromNode = adornment.adornedPart;
//            var fromData = fromNode.data;

//            //创建一个新的“状态”数据对象，定位在节点的右侧。
//            var toData = that.CreateNewPartModel(element, "LifecycleState", element.newnodename);
//            //获取用户单机按钮的节点位置
//            var p = fromNode.location.copy();
//            //新节点的位置往右偏移200
//            p.x += 200;
//            //"LOC"属性是字符串，而不是点对象。
//            toData["loc"] = go.Point.stringify(p);

//            // 添加新的节点数据的模型
//            var model = diagram.model;
//            model.addNodeData(toData);

//            // 从旧节点数据创建链接数据到新的节点数据
//            var CreateModel = that.CreateNewPartModel(element, "LifecycleTransition", element.newlinkname);
//            var linkdata = {
//                id: CreateModel["id"],
//                text: CreateModel["text"],
//                //旧结点
//                from: model.getKeyForNodeData(fromData),
//                //新节点
//                to: model.getKeyForNodeData(toData),
//            };
//            //并添加链接数据模型
//            model.addLinkData(linkdata);

//            // 选择新节点
//            var newnode = diagram.findNodeForData(toData);
//            diagram.select(newnode);

//            //结束一个"增加状态"的事务
//            diagram.commitTransaction("Add State");

//            // 如果新节点已关闭屏幕，则滚动图表以显示新节点。
//            diagram.scrollToRect(newnode.actualBounds);
//        }


//        //定义链接模版,链接的外形
//        lifecycleDiagram.linkTemplate =
//            //整个链接面板
//            goMake(go.Link,
//                {
//                    //曲线类型,"Bezier"曲线
//                    curve: go.Link.Bezier,
//                    //获取或设置路由的计算方式
//                    adjusting: go.Link.Stretch,
//                    //获取或设置用户是否可以重塑曲线
//                    reshapable: true,
//                    //获取或设置用户是否可以重新连接从末端的现有链接
//                    relinkableFrom: true,
//                    //获取或设置用户是否可以重新连接到端的现有链接
//                    relinkableTo: true,
//                    //获取或设置端段距离实际端口多远
//                    toShortLength: 3
//                },
//                //绑定的位置回传
//                new go.Binding("points", "points").makeTwoWay(),
//                //弯曲度
//                new go.Binding("curviness"),
//                goMake(go.Shape,
//                    //链接的宽度
//                    { strokeWidth: 2 }
//                ),
//                goMake(go.Shape,  // 箭头
//                    {
//                        //箭头类型
//                        toArrow: "standard",
//                        //获取或设置描绘如何用笔绘制几何图形的画笔或字符串
//                        stroke: null
//                    }
//                ),
//                //面板
//                goMake(go.Panel, "Auto",
//                    //标签的背景，它变得透明周围的边缘。
//                    goMake(go.Shape,
//                        {
//                            //链接颜色,渐变色从一个颜色到另一个颜色，从上到下（默认）
//                            fill: goMake(go.Brush, "Radial",
//                                { 0: "rgb(240, 240, 240)", 0.3: "rgb(240, 240, 240)", 1: "rgba(240, 240, 240, 0)" }),
//                            //链接外边框颜色,为null标识没有外边框
//                            stroke: null
//                        }),
//                    goMake(go.TextBlock, element.newlinkname,  // 标签文本
//                        {
//                            //标签对齐方式
//                            textAlign: "center",
//                            //标签字体
//                            font: "9pt helvetica, arial, sans-serif",
//                            //边距
//                            margin: 4,
//                            //启用就地编辑
//                            editable: true
//                        },
//                        //标签数据回传
//                        new go.Binding("text").makeTwoWay())
//                )
//            );

//        //视图模型绑定唯一主键id
//        lifecycleDiagram.model.nodeKeyProperty = "id";

//        //创建一个用于向后台提交数据的数据模型,用于记录数据的增加,删除,修改        
//        element.set("submitModel", []);

//        //创建一个数据原始值模型,用于保存时判断
//        element.set("initialModel", []);

//        element.set("lifecycleDiagram", lifecycleDiagram);

//        //加载数据模型
//        this.LoadModel(element);

//        //加载成功后注册视图模型修改监听
//        that.ModelChangedListener(element);

//    }

//    //视图模型修改监听
//    protected ModelChangedListener(element) {
//        var that = this;
//        var go = window["go"];
//        var diagram = element.get("lifecycleDiagram");
//        //注册模型修改事件监听,用于监听数据的更改并向后台提交数据
//        diagram.addModelChangedListener(function (e) {

//            var submitModel = element.get("submitModel");

//            //模型数据插入
//            if (e.change == go.ChangedEvent.Insert) {
//                if (e.modelChange == "nodeDataArray") {
//                    submitModel.push({ "id": e.newValue.id, "$": "C", "name": e.newValue.text, "label": e.newValue.text, "loc": e.newValue.loc, "source": that.ObjectTostring(element.lifecycleid) });
//                }

//                if (e.modelChange == "linkDataArray") {
//                    submitModel.push({ "id": e.newValue.id, "$": "C", "name": e.newValue.text, "label": e.newValue.text, "points": that.LinkPointsTostring(e.newValue.points), "from": that.ObjectTostring(e.newValue.from), "to": that.ObjectTostring(e.newValue.to), "source": that.ObjectTostring(element.lifecycleid) });
//                }

//            }

//            //模型数据删除
//            if (e.change == go.ChangedEvent.Remove) {
//                //查询删除的数据是否在数据提交模型中                
//                var arrayIndex = that.ObjectArrayEach(submitModel, "id", e.oldValue.id);
//                //如果在数据提交模型中
//                if (arrayIndex != -1) {
//                    //判断是否为新增数据
//                    if (submitModel[arrayIndex].$ != "C") {
//                        submitModel[arrayIndex].$ = "D";
//                    }
//                    else {
//                        submitModel.splice(arrayIndex, 1);
//                    }
//                }
//                //不在数据提交模型中,则新增一条
//                else {
//                    var model = {};
//                    model["id"] = e.oldValue.id;
//                    model["$"] = "D";
//                    submitModel.push(model);
//                }

//            }
//            //模型数据修改
//            if (e.change == go.ChangedEvent.Property) {

//                //修改的属性名                             
//                var propertyName = e.propertyName;
//                //修改的属性值
//                var newValue = e.newValue;
//                if (propertyName == "points") {
//                    newValue = that.LinkPointsTostring(newValue);
//                }
//                if (propertyName == "from" || propertyName == "to") {
//                    newValue = that.ObjectTostring(newValue);
//                }
//                if (propertyName == "text") {
//                    propertyName = "label";
//                }

//                //查询修改的数据是否在数据提交模型中
//                var submitModelIndex = that.ObjectArrayEach(submitModel, "id", e.object.id);

//                //原始值模型
//                var initialModel = element.get("initialModel");

//                //查询修改的数据是否在原始值模型中
//                var initialModelIndex = that.ObjectArrayEach(initialModel, "id", e.object.id);
//                //原始值
//                var initialValue;
//                if (initialModelIndex != -1) {
//                    initialValue = initialModel[initialModelIndex][propertyName];
//                }


//                //如果在数据提交模型中
//                if (submitModelIndex != -1) {
//                    //与数据原始值不同则更新到提交模型中
//                    if (initialValue != newValue) {
//                        //更新修改的值                        
//                        submitModel[submitModelIndex][propertyName] = newValue;

//                        //如果属性为text,那么name和label一起修改
//                        if (propertyName == "label") {
//                            if (initialValue) {
//                                if (initialModel[initialModelIndex]["name"] == initialModel[initialModelIndex]["label"]) {
//                                    submitModel[submitModelIndex]["name"] = newValue;
//                                }
//                            } else {
//                                submitModel[submitModelIndex]["name"] = newValue;
//                            }
//                        }

//                        //判断是否为新增数据
//                        if (submitModel[submitModelIndex].$ != "C") {
//                            submitModel[submitModelIndex].$ = "U";
//                        }
//                    }
//                    //与原始值数据相同则删除该属性
//                    else {
//                        //删除这条属性
//                        delete submitModel[submitModelIndex][propertyName];
//                        //如果属性为text,那么name和label一起删除
//                        if (propertyName == "label") {
//                            if (initialModel[initialModelIndex]["name"] == initialModel[initialModelIndex]["label"]) {
//                                delete submitModel[submitModelIndex]["name"];
//                            }
//                        }
//                        //如果删除属性后只剩下id属性,那么整条记录删除
//                        var propertyCount = that.getPropertyCount(submitModel[submitModelIndex]);
//                        if (propertyCount == 2) {
//                            submitModel.splice(submitModelIndex, 1);
//                        }
//                    }
//                }
//                //不在数据提交模型中,则新增一条
//                else {
//                    //与数据原始值不同则插入到提交模型中
//                    if (newValue != initialValue) {
//                        var model = {};
//                        model["id"] = e.object.id;
//                        model[propertyName] = newValue;

//                        if (propertyName == "text") {
//                            if (initialModel[initialModelIndex]["name"] == initialModel[initialModelIndex]["label"]) {
//                                model["name"] = newValue;
//                            }
//                        }
//                        model["$"] = "U";
//                        submitModel.push(model);
//                    }

//                }
//            }

//        });
//    }


//    //对象数组条件查询,返回第一个数组匹配对象的index,不匹配则返回-1
//    protected ObjectArrayEach(array, objPropery, objValue) {
//        var arrayIndex = -1;
//        $(array).each(function (index) {

//            if (this[objPropery] == objValue) {
//                arrayIndex = index;
//            }
//        });

//        return arrayIndex;
//    }


//    //对象型属性转换为string
//    protected ObjectTostring(obj) {
//        var objstring = "{\"id\":\"" + obj + "\"}"
//        return objstring;
//    }

//    //链接的Points转换为string
//    protected LinkPointsTostring(points) {
//        if (points) {
//            var strPoint = "";
//            var pointsLength = points.n.length;
//            $(points.n).each(function (index) {
//                strPoint += this.x + ",";
//                if (pointsLength - 1 == index) {
//                    strPoint += this.y;
//                }
//                else {
//                    strPoint += this.y + ",";
//                }
//            });

//            return strPoint;
//        }
//        else {
//            return points;
//        }

//    }

//    //链接的Points转换为数字数组
//    protected LinkPointsToNumberArray(points) {
//        if (points) {
//            var strArray = points.split(",");
//            var floatArray = [];

//            $(strArray).each(function (index) {
//                floatArray.push(Number(this));
//            });

//            return floatArray;
//        }
//        else {
//            return points;
//        }

//    }



//    //创建新数据模型
//    protected CreateNewPartModel(element, klassName, newname) {

//        var ModeData = {};

//        window["platformAjax"]({
//            url: document.body["getnewobjekturl"],
//            sync: true,
//            type: "post",
//            data: { klass: klassName },
//            success: function (result) {
//                var model = eval("(" + result.Data + ")");
//                ModeData["id"] = model.id;
//            }
//        });
//        ModeData["text"] = newname;
//        return ModeData;
//    }


//    //加载视图模型数据
//    protected LoadModel(element) {
//        var that = this;

//        var diagram = element.get("lifecycleDiagram");
//        if (!element.lifecycleid || !element.sourceurl) {
//            return;
//        }

//        window["platformAjax"]({
//            url: element.sourceurl,
//            type: "post",
//            data: { lifecycleId: element.lifecycleid },
//            success: function (result) {
//                //将原始值存入模型中
//                var initialModel = element.get("initialModel");

//                var model = eval("(" + result.Data + ")");

//                var diagramModel = { "class": window["go"].GraphLinksModel, "nodeKeyProperty": "id", "nodeDataArray": [], "linkDataArray": [] };
//                $(model.ListLifecycleState).each(function () {
//                    diagramModel.nodeDataArray.push({ "id": this.Id, "text": this.Label, "loc": this.Loc });

//                    initialModel.push({ "id": this.Id, "name": this.Name, "label": this.Label, "loc": this.Loc });
//                });

//                $(model.ListLifecycleTransition).each(function () {
//                    diagramModel.linkDataArray.push({ "id": this.Id, "text": this.Label, "points": that.LinkPointsToNumberArray(this.Points), "from": this.From, "to": this.To });

//                    initialModel.push({ "id": this.Id, "name": this.Name, "label": this.Label, "points": this.Points, "from": this.From, "to": this.To });
//                });

//                diagram.model = window["go"].Model.fromJson(JSON.stringify(diagramModel));
//            }
//        });
//    }






//    //得到视图数据(临时)
//    protected GetDiagramData(element) {
//        var diagram = element.get("lifecycleDiagram");

//        this.SaveDiagramData(element);

//        return diagram.model.toJson();
//    }

//    //保存视图数据
//    protected SaveDiagramData(element) {
//        var that = this;

//        var submitModel = element.get("submitModel");

//        if (submitModel.length > 0) {
//            window["platformAjax"]({
//                url: document.body["listsaveurl"],
//                type: "post",
//                data: { changes: JSON.stringify(submitModel) },
//                success: function (result) {
//                    //提交成功后清空提交数据模型                                        
//                    element.set("submitModel", []);
//                    //重新加载视图
//                    that.LoadModel(element);
//                }
//            });
//        }
//        else {
//            that.LoadModel(element);
//        }

//    }


//}


///*部件
//  组件名Gf-Widget

//  属性:
//  width:组件宽度,默认值200px
//  height:组件高度,默认值150px 
//  isedit:是否是编辑状态true:编辑状态,false:浏览状态,默认浏览状态  
//  acceptelement:组件接收的元素(isedit为true的时候有效)  
//  widgetid:部件ID
//  sourceurl:数据源url,不填为默认Url
//  widgetstatus:小部件数据状态,new:新增,delete:删除,modify:修改,scan:浏览
//  方法:
//  事件:
//*/
//class GfWidget extends BaseComponent {
//    constructor(extension?: IComponentExtend) {

//        super(extension);

//        this.elementName = "Gf-Widget";

//        this.addProperties("width,height,isedit,acceptelement,widgetid,sourceurl,widgetstatus");

//        this.addMethod("DataSave", "function(){return control.WidgetSave(this); }");

//        this.addMethod("Edit", "function(){return control.WidgetEdit(this); }");                

//    }

//    /**
//    *组件初始化
//    */
//    protected initContent(element) {
//        var that = this;

//        //初始化运行时状态对象
//        element.xtag.runtime = {};

//        element.width = element.width || "200px";

//        element.height = element.height || "150px";

//        element.isedit = element.isedit || "false";

//        element.sourceurl = element.sourceurl || document.body["apppath"] + "/Widget/GetWidgetInfo";  
              
//        element.id = element.id || that.GetUniqueId("Gf-Widget");

//        $(element).addClass("GfWidget");
        
//        //小部件数据加载
//        that.WidgetDataLoad(element);
                                       
//    }
//    /**
//    *加载小部件数据
//    */
//    protected WidgetDataLoad(element) {

//        var that = this;
          
//        //数据提交模型
//        element.set("SubmitModel", []);
      
//        //部件存在加载数据
//        if (element.widgetid) {

//            that.WidgetExistDataLoad(element);

//        }
//        //部件不存在创建新部件
//        else {

//            that.WidgetNewDataLoad(element);
//        }

//    }

//     /**
//    *部件存在加载后台数据
//    */
//    protected WidgetExistDataLoad(element)
//    {
//        var that = this;

//        window["platformAjax"]({

//            url: element.sourceurl,

//            type: "post",

//            data: { widgetId: element.widgetid },

//            success: function (result) {

//                //此时小部件的数据状态为浏览状态
//                element.widgetstatus = "scan";

//                var WidgetModel = eval("(" + result.Data + ")");

//                //初始数据模型
//                element.set("InitialModel", WidgetModel);

//                that.WidgetInit(element);
//            },
//            fail: function (result) {
//            }
//        });
//    }

//    /**
//    *部件不存在新建后台数据
//    */
//    protected WidgetNewDataLoad(element) {
//        var that = this;

//        //数据提交模型
//        var submitModel = element.get("SubmitModel");

//        //此时小部件的数据状态为新增状态
//        element.widgetstatus = "new";
                 
//        //新建Widget对象
//        var WidgetModel = that.CreateNewDataObject("Widget");

//        //加入到数据提交模型中
//        submitModel.push({ "id": WidgetModel.id, "$": "C", "isMaximizable": true, "isClosable": true });

//        //赋值给组件
//        element.widgetid = WidgetModel.id;

//        //模型数据填充
//        WidgetModel.Id = WidgetModel.id;

//        WidgetModel.IsClosable = true;

//        WidgetModel.IsMaximizable = true;

//        //初始数据模型
//        element.set("InitialModel", WidgetModel);

//        that.WidgetInit(element);
//    }

//    /**
//    *小部件初始化
//    */
//    protected WidgetInit(element)
//    {

//        var that = this;
      
//        var WidgetModel = element.get("InitialModel");
           
//        //清空组件内容
//        $(element).empty();

//        //部件容器Div
//        var WidgetPanel = document.createElement("div");

//        $(WidgetPanel).addClass("GfWidgetPanel");

//        $(WidgetPanel).css({

//            "width": element.width,

//            "height": element.height

//        });

//        $(element).append(WidgetPanel);

//        element.set("WidgetPanel", WidgetPanel);

//        //创建布局
//        var WidgetPanel_Layout = document.createElement("div");

//        $(WidgetPanel).append(WidgetPanel_Layout);

//        element.set("WidgetLayout", WidgetPanel_Layout);

//        //初始化布局
//            $(WidgetPanel_Layout).layout({

//            //自适应
//            fit: true

//        });

//        //增加上方北部面板
//        $(WidgetPanel_Layout).layout('add', {

//            region: 'north',

//            height: 28
//        });

//        //增加下方内容面板
//        $(WidgetPanel_Layout).layout('add', {

//            region: 'center'

//        });
       
//        //北部面板Div
//        var WidgetPanel_Layout_LayoutNorth_NorthPanel = document.createElement("div");

//        $(WidgetPanel_Layout_LayoutNorth_NorthPanel).addClass("GfWidgetNorthPanel");        

//        var WidgetPanel_Layout_LayoutNorth = $(WidgetPanel_Layout).layout("panel", "north");

//        $(WidgetPanel_Layout_LayoutNorth).append(WidgetPanel_Layout_LayoutNorth_NorthPanel);

//        element.set("WidgetNorth", WidgetPanel_Layout_LayoutNorth_NorthPanel);

//        //小部件北部初始化
//        that.WidgetNorthInit(element);

//        //部件内容Div
//        var WidgetPanel_Layout_LayoutCenter_CenterPanel = document.createElement("div");

//        $(WidgetPanel_Layout_LayoutCenter_CenterPanel).addClass("WidgetCenterPanel");

//        var WidgetDiv_Layout_LayoutCenter = $(WidgetPanel_Layout).layout("panel", "center");

//        $(WidgetDiv_Layout_LayoutCenter).append(WidgetPanel_Layout_LayoutCenter_CenterPanel);

//        element.set("WidgetCenter", WidgetPanel_Layout_LayoutCenter_CenterPanel);

//        //小部件中心内容初始化
//        that.WidgetCenterInit(element);


//        //部件容器设置改变大小
//        $(WidgetPanel).resizable({

//            minWidth: 120,

//            minHeight: 90,

//            onResize: function (e) {

//                $(WidgetPanel_Layout).layout('resize', {

//                    height: "100%",

//                    width: "100%"
//                });

//                element.width = $(WidgetPanel).width();

//                element.height = $(WidgetPanel).height();
//            }

//        });
       
//        if (element.isedit == "true") {          

//            //部件容器设置可拖动
//            $(WidgetPanel).draggable({

//                revert: true,

//                handle: $(WidgetPanel_Layout_LayoutNorth_NorthPanel),

//                deltaX: 0,

//                deltaY: 0
//            });

//            //部件容器可改变位置            
//            $(WidgetPanel).droppable({

//                //可接受的拖动元素
//                accept: ".GfWidgetPanel",

//                onDragEnter: function (e, source) {
//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                },

//                onDragOver: function (e, source) {
//                    var width = $(source).width();
//                    $(this).css({
//                        "margin-right": width + "px"
//                    });
//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                },

//                onDragLeave: function (e, source) {
//                    $(this).css({
//                        "margin-right": "10px"
//                    });
//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                },

//                onDrop: function (e, source) {

//                    $(source).parents(element.elementname).insertAfter($(this).parents(element.elementname));

//                    $(this).css({

//                        "margin-right": "10px"

//                    });

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                }
//            });
                      
//        }
        
//    }

//    /**
//    *北部面板初始化
//    */
//    protected WidgetNorthInit(element) {
//        var that = this;

//        var WidgetModel = element.get("InitialModel");

//        var WidgetNorth = element.get("WidgetNorth");


//        //部件标题Div
//        var WidgetNorth_TitlePanel = document.createElement("div");

//        $(WidgetNorth_TitlePanel).addClass("GfWidgetTitlePanel");

//        $(WidgetNorth).append(WidgetNorth_TitlePanel);


//        //标题内容
//        var WidgetNorth_TitlePanel_Content = document.createElement("a");

//        $(WidgetNorth_TitlePanel_Content).html(WidgetModel.Title);

//        $(WidgetNorth_TitlePanel_Content).addClass("GfWidgetTitleContent");

//        $(WidgetNorth_TitlePanel).append(WidgetNorth_TitlePanel_Content);

//        element.set("WidgetTitleContent", WidgetNorth_TitlePanel_Content);

//        if (WidgetModel.Title) {

//            element.set("IsAutoChangeWidgetTitle", false);

//        } else {

//            element.set("IsAutoChangeWidgetTitle", true);

//        }
            
//        if (element.isedit == "false") {

//            if (WidgetModel.IsClosable) {

//                //标题右边关闭按钮
//                var WidgetNorth_Close = document.createElement("a");

//                $(WidgetNorth_Close).addClass("GfWidgetClose");

//                $(WidgetNorth_Close).attr("title", "关闭");

//                $(WidgetNorth_Close).click(function () {

//                    that.WidgetCloseClick(element);

//                });

//                $(WidgetNorth).append(WidgetNorth_Close);
//            }
//        }


//        if (WidgetModel.IsMaximizable) {

//            //标题右边放大按钮
//            var WidgetNorth_Enlarge = document.createElement("a");

//            $(WidgetNorth_Enlarge).addClass("GfWidgetEnlarge");

//            $(WidgetNorth_Enlarge).attr("title", "最大化");

//            $(WidgetNorth).append(WidgetNorth_Enlarge);

//            element.set("WidgetEnlarge", WidgetNorth_Enlarge);

//            //放大按钮事件
//            $(WidgetNorth_Enlarge).click(function () {

//                that.WidgetEnlargeClick(element);

//            });


//            //标题右边缩小按钮
//            var WidgetNorth_Shrink = document.createElement("a");

//            $(WidgetNorth_Shrink).addClass("GfWidgetShrink");

//            $(WidgetNorth_Shrink).attr("title", "还原");

//            $(WidgetNorth).append(WidgetNorth_Shrink);

//            element.set("WidgetShrink", WidgetNorth_Shrink);

//            $(WidgetNorth_Shrink).hide();

//            //缩小按钮事件
//            $(WidgetNorth_Shrink).click(function () {

//                that.WidgetShrinkClick(element);

//            });

//        }

//        if (element.isedit == "true") {

//            //标题内容编辑按钮
//            var WidgetNorth_TitlePanel_Edit = document.createElement("a");

//            $(WidgetNorth_TitlePanel_Edit).addClass("fa fa-pencil-square-o GfWidgetTitleEdit");

//            $(WidgetNorth_TitlePanel_Edit).attr("title", "编辑标题");

//            $(WidgetNorth_TitlePanel_Edit).click(function () {

//                that.WidgetTitleEditClick(element);
//            });

//            $(WidgetNorth_TitlePanel).append(WidgetNorth_TitlePanel_Edit);

//            element.set("WidgetTitleEdit", WidgetNorth_TitlePanel_Edit);


//            //输入框Div
//            var WidgetNorth_TitlePanel_InputPanel = document.createElement("div");

//            $(WidgetNorth_TitlePanel_InputPanel).addClass("WidgetTitleInputPanel");

//            $(WidgetNorth_TitlePanel).append(WidgetNorth_TitlePanel_InputPanel);

//            $(WidgetNorth_TitlePanel_InputPanel).hide();


//            //标题输入框
//            var WidgetNorth_TitlePanel_InputPanel_InputText = document.createElement("a");

//            $(WidgetNorth_TitlePanel_InputPanel).append(WidgetNorth_TitlePanel_InputPanel_InputText);

//            $(WidgetNorth_TitlePanel_InputPanel_InputText).textbox({

//                width: 90,

//                height: 16,

//                prompt: WidgetModel.Title,

//                cls:"WidgetTitleInputText",

//                onChange: function (newValue, oldValue) {

//                    that.WidgetTitleChange(element, newValue);

//                    element.set("IsAutoChangeWidgetTitle", false);
//                }
//            });

//            $(WidgetNorth_TitlePanel_InputPanel_InputText).textbox('textbox').bind('mousedown', function (e) {

//                e.stopPropagation();

//            });

//            $(WidgetNorth_TitlePanel_InputPanel_InputText).textbox('textbox').bind('blur', function (e) {

//                that.WidgetInputTextBlur(element);
                
//            });

//            element.set("WidgetTitleInputText", WidgetNorth_TitlePanel_InputPanel_InputText);


//            //删除按钮
//            var WidgetTitleDivDelete = document.createElement("a");

//            $(WidgetTitleDivDelete).addClass("fa fa-trash-o GfWidgetDelete");

//            $(WidgetTitleDivDelete).attr("title", "小部件删除(保存生效)");

//            $(WidgetNorth).append(WidgetTitleDivDelete);

//            $(WidgetTitleDivDelete).click(function () {

//                //部件删除
//                that.WidgetDeleteClick(element);

//            });

//        }

//    }

//    /**
//    *标题编辑按钮点击
//    */    
//    protected WidgetTitleEditClick(element) {

//        var WidgetTitleContent = element.get("WidgetTitleContent");

//        var WidgetTitleEdit = element.get("WidgetTitleEdit");

//        var WidgetTitleInputText = element.get("WidgetTitleInputText");

//        $(WidgetTitleContent).hide();

//        $(WidgetTitleEdit).hide();

//        $(WidgetTitleInputText).parent().show();

//        $(WidgetTitleInputText).textbox('textbox').focus();
//    }

//    /**
//    *标题输入框失去焦点事件
//    */
//    protected WidgetInputTextBlur(element){

//        var WidgetTitleContent = element.get("WidgetTitleContent");

//        var WidgetTitleEdit = element.get("WidgetTitleEdit");

//        var WidgetTitleInputText = element.get("WidgetTitleInputText");

//        $(WidgetTitleEdit).show();

//        $(WidgetTitleContent).show();

//        $(WidgetTitleInputText).parent().hide();

//    }

//    /**
//    *小部件删除按钮点击
//    */
//    protected WidgetDeleteClick(element) {

//        var that = this;

//        that.WidgetDelete(element);

//    }

//    /**
//    *小部件放大按钮点击
//    */
//    protected WidgetEnlargeClick(element) {

//        //小部件容器
//        var WidgetPanel = element.get("WidgetPanel");

//        //小部件布局
//        var WidgetLayout = element.get("WidgetLayout"); 

//        //放大按钮
//        var WidgetEnlarge = element.get("WidgetEnlarge");

//        //缩小按钮
//        var WidgetShrink = element.get("WidgetShrink"); 


//        //组件原始宽度
//        element.set("OriginalWidth", $(WidgetPanel).width());

//        //组件原始高度
//        element.set("OriginalHeight", $(WidgetPanel).height());

//        $(WidgetPanel).css({

//            "width": "100%",

//            "height": "100%"

//        });
//        $(WidgetLayout).layout('resize', {

//            height: "100%",

//            width: "100%"

//        });

//        $(WidgetEnlarge).hide();

//        $(WidgetShrink).show();

//    }

//    /**
//    *小部件缩小按钮点击
//    */
//    protected WidgetShrinkClick(element) {

//        //小部件容器
//        var WidgetPanel = element.get("WidgetPanel");

//        //小部件布局
//        var WidgetLayout = element.get("WidgetLayout");

//        //放大按钮
//        var WidgetEnlarge = element.get("WidgetEnlarge");

//        //缩小按钮
//        var WidgetShrink = element.get("WidgetShrink");

//        $(WidgetPanel).css({

//            "width": element.get("OriginalWidth") + "px",

//            "height": element.get("OriginalHeight") + "px"

//        });
//        $(WidgetLayout).layout('resize', {

//            height: "100%",

//            width: "100%"

//        });

//        $(WidgetEnlarge).show();

//        $(WidgetShrink).hide();

//    }

//    /**
//    *小部件关闭按钮点击
//    */
//    protected WidgetCloseClick(element) {

//        //小部件容器
//        var WidgetPanel = element.get("WidgetPanel"); 
        
//        $(WidgetPanel).remove();

//    }
  
//    /**
//    *小部件删除
//    */
//    protected WidgetDelete(element) {

//        var that = this;

//        //数据提交模型
//        var SubmitModel = element.get("SubmitModel");

//        //小部件容器
//        var WidgetPanel = element.get("WidgetPanel");

//        //删除元素
//        $(WidgetPanel).remove();

//        //小部件状态设置为删除
//        element.widgetstatus = "delete";

//        //从提交模型中查询待删除的数据        
//        var submitModelIndex = that.ObjectArrayEach(SubmitModel, "id", element.widgetid);

//        //不在提交模型中则新增一条
//        if (submitModelIndex == -1) {

//            SubmitModel.push({ "id": element.widgetid, "$": "D" });

//        }
//        else {

//            //判断是否为新增数据
//            if (SubmitModel[submitModelIndex].$ != "C") {

//                SubmitModel[submitModelIndex].$ = "D";

//            }
//            else {

//                SubmitModel.splice(submitModelIndex, 1);

//            }
//        }
//    }

//    /**
//    *小部件修改
//    @param submitModelPropertyName 提交模型属性名
//    @param submitModelPropertyValue 提交模型属性值
//    */
//    protected WidgetChange(element, submitModelPropertyName, submitModelPropertyValue) {

//        var that = this;

//        //小部件状态设置为修改
//        element.widgetstatus = "modify";

//        var SubmitModel = element.get("SubmitModel");

//        //查询修改的数据是否在数据提交模型中
//        var submitModelIndex = that.ObjectArrayEach(SubmitModel, "id", element.widgetid);

//        //如果在数据提交模型中
//        if (submitModelIndex != -1) {

//            //更新修改的值                        
//            SubmitModel[submitModelIndex][submitModelPropertyName] = submitModelPropertyValue;

//        }
//        //不在数据提交模型中,则新增一条
//        else {
//            var model = {};

//            model["id"] = element.widgetid;

//            model[submitModelPropertyName] = submitModelPropertyValue;

//            model["$"] = "U";

//            SubmitModel.push(model);
//        }

//    }

//    /**
//    *小部件标题修改
//    *@param titleContent 标题名称
//    */
//    protected WidgetTitleChange(element, titleContent) {

//        var that = this;

//        //部件标题
//        var WidgetTitleContent = element.get("WidgetTitleContent");

//        //标题修改
//        $(WidgetTitleContent).html(titleContent);

//        that.WidgetChange(element, "title", titleContent);

//    }

//    /**
//    *中心内容面板初始化
//    */
//    protected WidgetCenterInit(element) {

//        var that = this;

//        //菜单视图模型
//        element.set("MenuModel", []);

//        var WidgetModel = element.get("InitialModel"); 

//        var WidgetCenter = element.get("WidgetCenter");

//        if (element.isedit == "true") {

//            //部件内容设置可接收元素
//            $(WidgetCenter).droppable({

//                //可接受的拖动元素
//                accept: element.acceptelement,

//                onDragEnter: function (e, source) {

//                    //拖动元素进入时组件添加背景色
//                    $(this).addClass('DraggableEnter');

//                    element.triggerEventHandler("AfterDragEnter");

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                },

//                //拖动元素进入时触发
//                onDragOver: function (e, source) {

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();

//                },

//                //拖动元素离开时触发
//                onDragLeave: function (e, source) {

//                    //拖动元素离开组建时去除背景色
//                    $(this).removeClass('DraggableEnter');

//                    element.triggerEventHandler("AfterDragLeave");

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();

//                },

//                //元素拖动时触发
//                onDrop: function (e, source) {
                    
//                    var node= $(source).closest("gf-tree")[0].getNode(source);

//                    //去除背景色
//                    $(this).removeClass('DraggableEnter');

//                    //构建一个菜单对象数组                
//                    var menuModelArray = [{ menuId: node.id.replace("-","@"), menuName: node.text, menuShowMode: node.ShowMode, menuFaIcon: node.iconCls }];

//                    //增加小部件菜单
//                    that.WidgetMenuAdd(element, menuModelArray);

//                    element.triggerEventHandler("AfterDragEnd");

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();

//                }
//            });
//        }
//        //加载部件菜单
//        if (WidgetModel.ListWidgetMenuItem) {

//            var widgetMenuModelArray = [];

//            $(WidgetModel.ListWidgetMenuItem).each(function () {

//                widgetMenuModelArray.push({ id: this.Id, menuId: this.MenuId, menuName: this.MenuLabel, menuShowMode: this.MenuShowMode, menuSortOrder: this.SortOrder, menuFaIcon: this.MenuFaIcon });

//            });

//            that.WidgetMenuModelLoad(element, widgetMenuModelArray);
//        }


//    }

//    /**
//    *新增小部件菜单
//    * @param menuModelArray 菜单对象数组:[{menuId:菜单ID, menuName: 菜单名称, menuShowMode: 菜单展示模式, menuFaIcon: 菜单字体图标 }]
//    */   
//    protected WidgetMenuAdd(element, menuModelArray) {

//        var that = this;

//        var WidgetCenter = element.get("WidgetCenter");

//        //数据提交模型
//        var SubmitModel = element.get("SubmitModel");

//        //菜单视图模型
//        var MenuModel = element.get("MenuModel");

//        //待添加菜单视图模型
//        var AddMenuModel = [];

//        //判断添加的数据是否在视图模型中,如果不在模型中则添加
//        $(menuModelArray).each(function () {

//            var arrayIndex = that.ObjectArrayEach(MenuModel, "menuId", this.menuId);

//            //不在模型中则添加
//            if (arrayIndex == -1) {

//                var WidgetMenuItemModel = that.CreateNewDataObject("WidgetMenuItem");

//                this.id = WidgetMenuItemModel.id;

//                //计算菜单排序
//                if (!this.menuSortOrder) {

//                    var sortOrder = that.CalculationMenuSortOrder(element);

//                    this.menuSortOrder = sortOrder;
//                }

//                AddMenuModel.push(this);

//                //加入到数据提交模型中
//                SubmitModel.push({ "id": WidgetMenuItemModel.id, "$": "C", "source": that.ObjectTostring(element.widgetid), "related": that.ObjectTostring(this.menuId), "sortOrder": this.menuSortOrder });
//            }

//        });
        
//        //视图模型为0条,待添加的视图模型为1条时显示结果视图
//        if (MenuModel.length == 0 && AddMenuModel.length == 1) {

//            //加载结果视图
//            that.MenuResultViewLoad(element, AddMenuModel[0]);

//             //将标题改为菜单名
//            if (element.get("IsAutoChangeWidgetTitle")) {            

//                //修改标题
//                that.WidgetTitleChange(element, AddMenuModel[0].menuName);

//            }
//            //视图模型增加一条数据
//            MenuModel.push(AddMenuModel[0]);
//        }
//        //视图模型为1条,待添加的视图模型为1条时提示用户是否覆盖(此时一定显示的结果视图)
//        else if (MenuModel.length == 1 && AddMenuModel.length == 1) {

//            $.messager.confirm('消息', '是否覆盖', function (r) {

//                //确定覆盖
//                if (r) {

//                    //删除视图模型中数据
//                    that.WidgetMenuDelete(element, MenuModel[0].id);

//                    //加载结果视图
//                    that.MenuResultViewLoad(element, AddMenuModel[0]);

//                    //将标题改为菜单名
//                    if (element.get("IsAutoChangeWidgetTitle")) {

//                        //修改标题
//                        that.WidgetTitleChange(element, AddMenuModel[0].menuName);

//                    }

//                    //视图模型增加一条数据
//                    MenuModel.push(AddMenuModel[0]);

//                }
//                //不覆盖变为快捷方式
//                else {

//                    //视图模型增加一条数据
//                    MenuModel.push(AddMenuModel[0]);

//                    //清空结果视图
//                    $(WidgetCenter).empty();

//                    //加载快捷方式
//                    $(MenuModel).each(function () {

//                        that.MenuShortcutLoad(element, this);

//                    });

//                    if (element.get("IsAutoChangeWidgetTitle")) {

//                        //修改标题
//                        that.WidgetTitleChange(element, "快捷方式");

//                    }                   
//                }

//            });
//        }
//        //插入的数据模型为多条时
//        else {
//            $(AddMenuModel).each(function () {

//                that.MenuShortcutLoad(element, this);

//                MenuModel.push(this);

//            });
//            if (AddMenuModel.length > 0) {

//                //将标题改为快捷方式
//                if (element.get("IsAutoChangeWidgetTitle")) {

//                    //修改标题
//                    that.WidgetTitleChange(element, "快捷方式");

//                }    
//            }
//        }
        
//    }

//    /**
//    *加载小部件菜单
//    * @param widgetMenuModelArray 小部件菜单对象数组:[{id:小部件菜单对象ID,menuId:菜单ID, menuName: 菜单名称, menuShowMode: 菜单展示模式,menuSortOrder:小部件菜单排序,menuFaIcon: 菜单字体图标 }]
//    */
//    protected WidgetMenuModelLoad(element, widgetMenuModelArray) {
//        var that = this;       

//        //菜单视图模型
//        var MenuModel = element.get("MenuModel");

//        var WidgetCenter = element.get("WidgetCenter");

//        //清空Div内容
//        $(WidgetCenter).empty();

//        //加载数据为1条显示结果视图
//        if (widgetMenuModelArray.length == 1) {

//            //加载菜单结果视图
//            that.MenuResultViewLoad(element, widgetMenuModelArray[0]);

//            //插入到视图模型中
//            MenuModel.push(widgetMenuModelArray[0]);

//        }
//        //加载数据为多条显示快捷方式
//        else {

//            //加载菜单快捷方式
//            $(widgetMenuModelArray).each(function () {

//                that.MenuShortcutLoad(element, this);

//                MenuModel.push(this);

//            });         
//        }   
//    }

//    /**
//    *删除小部件菜单
//    * @param id 小部件菜单ID
//    */
//    protected WidgetMenuDelete(element, id) {
        
//        var that = this;

//        //视图模型
//        var MenuModel = element.get("MenuModel"); 

//        //数据提交模型
//        var SubmitModel = element.get("SubmitModel");

//        //下方容器
//        var WidgetCenter = element.get("WidgetCenter");

//        //视图模型大于1判断为快捷方式视图,界面上找到这个快捷方式并删除
//        if (MenuModel.length > 1) {

//            $(WidgetCenter).find("[id='" + id + "']").remove();

//        }
//        //小于1判断为结果视图,直接清空页面
//        else {

//            $(WidgetCenter).empty();

//        }

//        //从视图模型中查询待删除的数据
//        var menuModelIndex = that.ObjectArrayEach(MenuModel, "id", id);
       
//        //从视图模型中删除
//        MenuModel.splice(menuModelIndex, 1);

//        //从提交模型中查询待删除的数据        
//        var submitModelIndex = that.ObjectArrayEach(SubmitModel, "id", id);

//        //不在提交模型中则新增一条
//        if (submitModelIndex == -1) {

//            SubmitModel.push({ "id": id, "$": "D" });

//        }
//        else {

//            //判断是否为新增数据
//            if (SubmitModel[submitModelIndex].$ != "C") {

//                SubmitModel[submitModelIndex].$ = "D";

//            }
//            else {

//                SubmitModel.splice(submitModelIndex, 1);

//            }            
//        }                
//    }

//    /**
//    *修改小部件菜单
//    * @param id 小部件菜单ID
//    * @param menuModelPropertyName 菜单视图模型属性名
//    * @param menuModelPropertyValue 菜单视图模型属性值
//    */
//    protected WidgetMenuChange(element, id, menuModelPropertyName, menuModelPropertyValue) {

//        var that = this;
        
//        //视图模型
//        var MenuModel = element.get("MenuModel");

//        //数据提交模型
//        var SubmitModel = element.get("SubmitModel");

//        //视图模型中查询数据
//        var menuModelArrayIndex = that.ObjectArrayEach(MenuModel, "id", id);

//        MenuModel[menuModelArrayIndex][menuModelPropertyName] = menuModelPropertyValue;

//        //查询修改的数据是否在数据提交模型中
//        var submitModelIndex = that.ObjectArrayEach(SubmitModel, "id", id);

//        //区分视图模型属性名对应的提交模型的属性名
//        var submitModelPropertyName = "";

//        if (menuModelPropertyName == "menuSortOrder") {

//            submitModelPropertyName = "sortOrder";

//        } else {

//            return;

//        }

//        //如果在数据提交模型中
//        if (submitModelIndex != -1) {

//            //更新修改的值                        
//            SubmitModel[submitModelIndex][submitModelPropertyName] = menuModelPropertyValue;

//            //判断是否为新增数据
//            if (SubmitModel[submitModelIndex].$ != "C") {

//                SubmitModel[submitModelIndex].$ = "U";

//            }
//        }
//        //不在数据提交模型中,则新增一条
//        else {
//            var model = {};

//            model["id"] = id;

//            model[submitModelPropertyName] = menuModelPropertyValue;

//            model["$"] = "U";

//            SubmitModel.push(model);
//        }


//    }

//    /**
//    *菜单快捷方式加载
//    * @param widgetMenuModel 小部件菜单对象 {id:小部件菜单对象ID,menuId:菜单ID, menuName: 菜单名称, menuShowMode: 菜单展示模式,menuSortOrder:小部件菜单排序,menuFaIcon: 菜单字体图标 }
//    */    
//    protected MenuShortcutLoad(element, widgetMenuModel)
//    {
//        var that = this;

//        var WidgetCenter = element.get("WidgetCenter"); 
      
//        //创建一个快捷方式的Button
//        var shortcutButton = document.createElement("a");    
            
//        $(shortcutButton).attr("id", widgetMenuModel.id);

//        $(shortcutButton).attr("menuid", widgetMenuModel.menuId);

//        $(shortcutButton).attr("showmode", widgetMenuModel.menuShowMode);

//        $(shortcutButton).attr("menuname", widgetMenuModel.menuName);

//        $(shortcutButton).attr("sortorder", widgetMenuModel.menuSortOrder);   

//        $(shortcutButton).attr("menufaicon", widgetMenuModel.menuFaIcon);   
             
//        $(shortcutButton).addClass("ShortcutButton");        
       
//        $(shortcutButton).linkbutton({

//            iconCls: widgetMenuModel.menuFaIcon,

//            text: widgetMenuModel.menuName

//        });

//        if (element.isedit == "true") {

//            //设置元素设置为可拖动
//            $(shortcutButton).draggable({

//                onBeforeDrag: function (e) {
//                    //鼠标右键不能拖动
//                    if (e.which == 3)
//                    {
//                        return false;
//                    }
//                },

//                revert: true            
//            });  
                      
//            //按钮可改变位置            
//            $(shortcutButton).droppable({

//                //可接受的拖动元素
//                accept: "#" + element.id + " .ShortcutButton",

//                onDragEnter: function (e, source) {

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();

//                },

//                onDragOver: function (e, source) {  
                                      
//                    var width = $(source).width();

//                    $(this).css({

//                        "margin-right": width + "px"

//                    });

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                },

//                onDragLeave: function (e, source) {

//                    $(this).css({

//                        "margin-right": "0px"

//                    });

//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                },

//                onDrop: function (e, source) {

//                    $(this).css({

//                        "margin-right": "0px"

//                    });

//                    $(source).insertAfter(this);
                    
//                    //前一个元素的排序值
//                    var beforeMenuSortOrder = parseFloat($(this).attr("sortorder"));

//                    var newSortOrder = 0;

//                    if ($(source).next().length > 0) {

//                        //后一个元素的排序值
//                        var afterMenuSortOrder = parseFloat($(source).next().attr("sortorder"));

//                        //计算改变后的排序值
//                        newSortOrder = (beforeMenuSortOrder + afterMenuSortOrder) / 2;

//                    } else {

//                        newSortOrder = beforeMenuSortOrder + 1;

//                    }
                   
//                    that.WidgetMenuChange(element, $(source).attr("id"), "menuSortOrder", newSortOrder);

//                    $(source).attr("sortorder", newSortOrder);
                   
//                    //阻止事件冒泡,防止嵌套
//                    e.stopPropagation();
//                }
//            });


//            //快捷方式按钮右键菜单
//            var RightMenuDiv = document.createElement("div");   
                            
//            $(RightMenuDiv).menu({
                                
//            });

//            //增加菜单删除按钮
//            $(RightMenuDiv).menu('appendItem', {

//                text: '删除',

//                iconCls: 'fa fa-trash-o ShortcutButtonRightMenu GfWidget',

//                onclick: function () { that.WidgetMenuDelete(element, $(shortcutButton).attr("id")); }             
//            });

        
//            $(shortcutButton).bind('contextmenu', function (e) {
                       
//                e.preventDefault();
               
//                $(RightMenuDiv).menu('show', {

//                    left: e.pageX,

//                    top: e.pageY

//                });
               
//            });
//        }
//        else {

//            $(shortcutButton).click(function () {

//                that.MenuClick(widgetMenuModel.menuId, widgetMenuModel.menuShowMode);

//            });
                      
//        }

//        //快捷方式按钮加入到组件
//        $(WidgetCenter).append(shortcutButton);       
//    }

//    /**
//    *菜单快捷方式点击
//    * @param menuId 菜单ID
//    * @param showMode 菜单点击显示模式
//    */
//    protected MenuClick(menuId, showMode) {       
                
//        window["platformAjax"]({

//            url: document.body["menuhandleurl"],

//            data: { menuId: menuId, parentMenuId: "" },

//            success: function (result) {   
                         
//                var tabs = document.querySelector("#frametabs");

//                switch (result.HandleType) {

//                    case 'Url':
//                        if (showMode == "1") {

//                            tabs["add"](menuId, result.Title, result.Url, "", result.IsPage);

//                        }
//                        else if (showMode == "2" || showMode == "3") {

//                            document.body["openDialog"]({

//                                id: menuId + "dialog",

//                                title: result.Title,

//                                modal: result.ShowMode == "2",

//                                href: result.Url

//                            });
//                        }
//                        else if (showMode == "4") {

//                            window.open(result.Url, result.Title);

//                        }

//                        break;
//                    case 'Content':

//                        if (showMode == "1") {

//                            tabs["addContent"](menuId, result.Title, result.Content);

//                        }
//                        else if (showMode == "2" || showMode == "3") {

//                            document.body["openDialog"]({

//                                id: menuId + "dialog",

//                                title: result.Title,

//                                modal: result.ShowMode == "2",

//                                content: result.Content
//                            });
//                        }
//                        else if (showMode == "4") {

//                            tabs["addContent"](menuId, result.Title, result.Content);

//                        }

//                        break;
//                    case 'Script':

//                        eval(result.Script);

//                        break;
//                }
//            }
//        });
//    }

//    /**
//    *菜单结果视图加载
//    * @param widgetMenuModel 小部件菜单对象 {id:小部件菜单对象ID,menuId:菜单ID, menuName: 菜单名称, menuShowMode: 菜单展示模式,menuSortOrder:小部件菜单排序,menuFaIcon: 菜单字体图标 }
//    */
//    protected MenuResultViewLoad(element, widgetMenuModel)
//    {               
      

//        var WidgetCenter = element.get("WidgetCenter"); 

//        window["platformAjax"]({

//            url: document.body["menuhandleurl"],

//            data: { menuId: widgetMenuModel.menuId, parentMenuId: "" },

//            success: function (result) {
                
//                switch (result.HandleType) {

//                    case 'Url':

//                        $(WidgetCenter).load(result.Url);

//                        break;
//                    case 'Content':

//                        $(WidgetCenter).html(result.Content);

//                        break;
//                }
//            }
//        });



                          
//    }   

//    /**
//    *Widget保存
//    */
//    protected WidgetSave(element)
//    {
//        var that = this;
        
//        var SubmitModel = element.get("SubmitModel");

//        if (SubmitModel.length > 0) {

//            window["platformAjax"]({

//                url: document.body["listsaveurl"],

//                type: "post",

//                data: { changes: JSON.stringify(SubmitModel) },

//                success: function (result) {

//                    //数据提交模型清空
//                    element.set("SubmitModel", []);
                       
//                }
//            });
//        }
//        else {
            
//        }

//    }

//    /**
//    *计算新增小部件菜单sortOrder
//    */
//    protected CalculationMenuSortOrder(element) {

//        //菜单视图模型
//        var MenuModel = element.get("MenuModel");

//        //默认排序
//        var sortOrder = 0;

//        $(MenuModel).each(function () {
//            if (this.menuSortOrder) {
//                if (parseFloat(this.menuSortOrder) > sortOrder) {
//                    sortOrder = parseFloat(this.menuSortOrder);
//                }
//            }
//        });

//        return sortOrder + 1;
//    }

//    /**
//    *Widget编辑
//    */
//    protected WidgetEdit(element) {

//        var that = this;

//        if (element.isedit == "false") {

//            element.isedit = "true";


           
//        } else {

//            element.isedit = "false";

//        }

//        this.WidgetInit(element);

//        return element.isedit;

//    }

//    /**
//    *创建新对象
//    *@param klassName 对象类名
//    */    
//    protected CreateNewDataObject(klassName) {

//        var model;

//        window["platformAjax"]({

//            url: document.body["getnewobjekturl"],

//            sync: true,

//            type: "post",

//            data: { klass: klassName },

//            success: function (result) {
//                model = eval("(" + result.Data + ")");
//            }
//        });
//        return model;
//    }

//    /**
//    *对象数组条件查询,返回第一个数组匹配对象的index
//    *@param array 待查询数组
//    *@param objPropery 待查询的属性
//    *@param objValue 待查询的属性值
//    */
//    protected ObjectArrayEach(array, objPropery, objValue) {

//        var arrayIndex = -1;

//        $(array).each(function (index) {

//            if (this[objPropery] == objValue) {
//                arrayIndex = index;
//            }
//        });

//        return arrayIndex;
//    }

//    /**
//    *对象型属性转换为string
//    *@param objektId 对象ID
//    */   
//    protected ObjectTostring(objectId) {

//        var objstring = "{\"id\":\"" + objectId + "\"}"

//        return objstring;
//    }

//}


///*欢迎页
//  组件名Gf-Dashboard

//  属性:
//  isedit:是否是编辑状态true:编辑状态,false:浏览状态,默认浏览状态
//  sourceurl:数据源Url,不填为默认Url
  
//  方法:

//  事件:

//*/
//class GfDashboard extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Dashboard";
//        this.addProperties("isedit");
//    }

//    //初始化
//    protected initContent(element) {
        
//        var that = this;
             
//        //组件默认浏览状态
//        element.isedit = element.isedit || "false";

//        element.sourceurl = element.sourceurl || document.body["apppath"] + "/Dashboard/GetDashboardInfo"; ;

//        $(element).addClass("GfDashboard");

//        //加载欢迎页数据
//        that.DashboardDataLoad(element);

    
//    }

//    /**
//    *加载欢迎页数据    
//    */
//    protected DashboardDataLoad(element) {

//        var that = this;

//        //数据提交模型
//        element.set("SubmitModel", []);

//        window["platformAjax"]({

//            url: element.sourceurl,

//            type: "post",

//            data: {},

//            success: function (result) {

//                var DashboardModel = eval("(" + result.Data + ")");

//                //存储加载的数据
//                element.set("InitialModel", DashboardModel);

//                //欢迎页初始化
//                that.DashboardInit(element);

//            },

//            fail: function (result) {
//            }
//        });

       
      
//    }

//    /**
//    *欢迎页初始化  
//    */
//    protected DashboardInit(element) {

//        var that = this;

//        //清空组件内容
//        $(element).empty();
       
//        //组件容器Div
//        var DashboardPanel = document.createElement("div");

//        $(DashboardPanel).addClass("GfDashboardPanel");

//        element.appendChild(DashboardPanel)


//        //创建布局Div
//        var DashboardPanel_Layout = document.createElement("div");

//        $(DashboardPanel).append(DashboardPanel_Layout);

//        $(DashboardPanel_Layout).layout({

//            fit: true

//        });


//        //增加北部面板
//        $(DashboardPanel_Layout).layout('add', {

//            region: 'north',

//            height: 41

//        });

//        //增加下方内容面板
//        $(DashboardPanel_Layout).layout('add', {

//            region: 'center'

//        });

//        //北部面板容器Div
//        var DashboardPanel_Layout_LayoutNorth_NorthPanel = document.createElement("div");

//        $(DashboardPanel_Layout_LayoutNorth_NorthPanel).addClass("NorthPanel");

//        var DashboardPanel_Layout_LayoutNorth = $(DashboardPanel_Layout).layout("panel", "north");

//        $(DashboardPanel_Layout_LayoutNorth).append(DashboardPanel_Layout_LayoutNorth_NorthPanel);

//        element.set("DashboardNorth", DashboardPanel_Layout_LayoutNorth_NorthPanel);

//        //欢迎页北部初始化
//        that.DashboardNorthInit(element);

//        //内容面板容器Div
//        var DashboardPanel_Layout_LayoutNorth_CenterPanel = document.createElement("div");

//        $(DashboardPanel_Layout_LayoutNorth_CenterPanel).addClass("CenterPanel");

//        var DashboardPanel_Layout_LayoutCenter = $(DashboardPanel_Layout).layout("panel", "center");

//        $(DashboardPanel_Layout_LayoutCenter).append(DashboardPanel_Layout_LayoutNorth_CenterPanel);

//        element.set("DashboardCenter", DashboardPanel_Layout_LayoutCenter);
       
//        //欢迎页下方内容初始化
//        that.DashboardCenterInit(element);

//        //菜单拖动初始化
//        that.MenuDragInit(element);
//    }

//    /**
//    *菜单拖动初始化  
//    */
//    protected MenuDragInit(element) {

//        //拖动代理样式
//        var DraggablePanel = document.createElement("div");

//        $(DraggablePanel).addClass("GfDashboard DraggablePanel");

//        //拖动图标
//        var DraggableEnable = document.createElement("span");

//        $(DraggableEnable).addClass("DraggableDisable");

//        $(DraggablePanel).append(DraggableEnable);

//        element.set("DraggableImg", DraggableEnable);

//        //拖动内容
//        var DraggableContent = document.createElement("div");

//        $(DraggablePanel).append(DraggableContent);

//        //取得菜单组件集合
//        var MenuTree = $("#westDiv").find("gf-tree");

//        //菜单项拖动设置
//        $(MenuTree).find(".tree-node").draggable({

//            revert: true,

//            proxy: function (source) {

//                var cloneSource = $(source).clone();

//                $(cloneSource).find(".tree-indent").remove();

//                $(cloneSource).find(".GfDashboard.DraggableTips").remove();
                

//                $(DraggableContent).html($(cloneSource).html());

//                var drag = $(DraggablePanel).appendTo('body');

//                return drag;
//            },

//            disabled: true

//        });

//        element.set("MenuTree", MenuTree);

//    }

//    /**
//    *欢迎页北部初始化
//    */
//    protected DashboardNorthInit(element)
//    {
//        var that = this;

//        var DashboardNorth = element.get("DashboardNorth");

//        //增加部件按钮
//        var AddMenuButton = document.createElement("a");

//        $(AddMenuButton).addClass("ToolButton");

//        $(AddMenuButton).linkbutton({

//            width: 72,

//            height: 20,

//            text: "新增小部件",

//            onClick: function () { that.AddWidgetButtonClick(element) }

//        });

//        element.set("AddMenuButton", AddMenuButton);

//        //编辑按钮
//        var EditButton = document.createElement("a");

//        $(EditButton).addClass("ToolButton");

//        $(EditButton).linkbutton({

//            width: 72,

//            height: 20,

//            text: "编辑",

//            onClick: function () { that.EditButtonClick(element) }

//        });
//        element.set("EditButton", EditButton);

//        //保存按妞
//        var SaveButton = document.createElement("a");

//        $(SaveButton).addClass("ToolButton");

//        $(SaveButton).linkbutton({

//            width: 72,

//            height: 20,

//            text: "保存",

//            onClick: function () { that.SaveButtonClick(element) }

//        });
//        element.set("SaveButton", SaveButton);

//        $(DashboardNorth).append(EditButton);

//        $(DashboardNorth).append(AddMenuButton);

//        $(DashboardNorth).append(SaveButton);

//        //按钮显示
//        that.ButtonDisplay(element);
//    }

//    /**
//    *增加小部件按钮点击
//    */
//    protected AddWidgetButtonClick(element)
//    {
//        if (element.isedit == "true") {

//            this.AddWidget(element);

//        }
//    }

//    /**
//    *组件销毁后关闭编辑状态
//    */
//    protected remove(element) {

//        super.remove(element);

//        element.isedit = "false";

//        this.MenuDragControl(element);
//    }

//    /**
//    *增加部件
//    */
//    protected AddWidget(element) {

//        var that = this;

//        var DashboardCenter = element.get("DashboardCenter");

//        //创建部件
//        var Widget = document.createElement("gf-widget");

//        $(Widget).attr("acceptelement","#westDiv .tree-node");

//        $(Widget).attr("isedit", element.isedit);

//        $(DashboardCenter).append(Widget);

//        that.RegisterGfwidgetDrag(element, Widget);

//        Widget["init"]();

//    }

//    /**
//    *编辑按钮点击
//    */
//    protected EditButtonClick(element) {

//        var that = this;

//        var EditButton = element.get("EditButton");

//        if (element.isedit == "true") {

//            $(EditButton).linkbutton({ "text": "编辑" });

//            element.isedit = "false";

//        } else {

//            $(EditButton).linkbutton({ "text": "取消编辑" });

//            element.isedit = "true";

//        }
        
//        that.ButtonDisplay(element);

//        var DashboardCenter = element.get("DashboardCenter");

//        var gfwidget = $(DashboardCenter).find("gf-widget");

//        $(gfwidget).each(function () {

//            this.Edit();
     
//        });

//        //菜单拖拽控制
//        that.MenuDragControl(element);

//    }

//    /**
//    *按钮显示控制
//    */    
//    protected ButtonDisplay(element) {

//        var AddMenuButton = element.get("AddMenuButton");

//        var EditButton = element.get("EditButton");

//        var SaveButton = element.get("SaveButton");

//        if (element.isedit == "true") {

//            $(AddMenuButton).show();

//            $(EditButton).show();

//            $(SaveButton).show();

//        } else {

//            $(AddMenuButton).hide();

//            $(EditButton).show();

//            $(SaveButton).hide();

//        }

//    }


   
//    /**
//    *菜单拖动控制
//    */
//    protected MenuDragControl(element) {


//        var that = this;

//        var MenuTree = element.get("MenuTree");

//        //菜单拖动提示
//        var MenuDragTips = document.createElement("div");

//        $(MenuDragTips).addClass("GfDashboard DraggableTips");

//        $(MenuTree).each(function () {

//            if (element.isedit == "false") {

//                //菜单不可拖动
//                $(this).find(".tree-node").draggable("disable");

//                //菜单拖动提示去掉
//                $(this).find(".tree-node").find(".GfDashboard.DraggableTips").remove();

//                //菜单点击事件开启
//                this.isclick = "true";

//            } else {

//                //菜单可拖动
//                $(this).find(".tree-node").draggable("enable");

//                //菜单拖动提示
//                $(this).find(".tree-node").prepend(MenuDragTips);

//                //菜单点击事件关闭            
//                this.isclick = "false";

//            }

//        });

//        var DashboardCenter = element.get("DashboardCenter");

//        var gfwidget = $(DashboardCenter).find("gf-widget");
            
//        $(gfwidget).each(function () {

//            that.RegisterGfwidgetDrag(element, this);

//        });

//    }

//    /**
//    *注册小部件拖动事件
//    *@param gfwidget 小部件对象
//    */
//    protected RegisterGfwidgetDrag(element, gfwidget) {

//        //拖拽图标
//        var DraggableImg = element.get("DraggableImg");

//        gfwidget["registerEventHandler"]("AfterDragEnter", function () {

//            //菜单拖拽成功图标
//            $(DraggableImg).removeClass("DraggableDisable").addClass("DraggableEnable");

//        });

//        gfwidget["registerEventHandler"]("AfterDragLeave", function () {

//            //菜单拖拽失败图标
//            $(DraggableImg).removeClass("DraggableEnable").addClass("DraggableDisable");

//        });

//        gfwidget["registerEventHandler"]("AfterDragEnd", function () {

//            //菜单拖拽失败图标
//            $(DraggableImg).removeClass("DraggableEnable").addClass("DraggableDisable");

//        });
//    }
    

//    /**
//    *保存按钮点击
//    */
//    protected SaveButtonClick(element) {

//        var that = this;


//        if (element.isedit == "true") {

//            var DashboardCenter = element.get("DashboardCenter");

//            //初始数据模型
//            var InitialModel = element.get("InitialModel");

//            //提交数据模型
//            var SubmitModel = element.get("SubmitModel");

//            //部件保存
//            var gfwidget = $(DashboardCenter).find("gf-widget");

//            $(gfwidget).each(function () {

//                this.DataSave();

//            });
           
//            //得到将要保存的Html
//            var DashboardCenterHtml = that.GetDashboardCenterHtml(element);

//            //判断页面是否修改
//            if (InitialModel.Content != DashboardCenterHtml) {

//                //如果是自己的欢迎页直接更新
//                if (InitialModel.IsMyOwn == true) {

//                    SubmitModel.push({ "id": InitialModel.DashboardId, "$": "U", "content": DashboardCenterHtml });

//                    //新增欢迎页小部件关联
//                    $(gfwidget).each(function () {

//                        if (this.widgetstatus == "new") {

//                            var newDashboardWidgetModel = that.CreateNewDataObject("DashboardWidget");

//                            SubmitModel.push({ "id": newDashboardWidgetModel.id, "$": "C", "source": that.ObjectTostring(InitialModel.DashboardId), "related": that.ObjectTostring(this.widgetid) });

//                        }
//                        if (this.widgetstatus == "delete") {

//                            //判断初始数据模型是否有这条数据
//                            var dashboardWidgetIndex = that.ObjectArrayEach(InitialModel.DashboardWidgetList, "WidgetId", this.widgetid);

//                            //如果有这条数据则删除
//                            if (dashboardWidgetIndex != -1) {

//                                SubmitModel.push({ "id": InitialModel.DashboardWidgetList[dashboardWidgetIndex].DashboardWidgetId, "$": "D" });

//                            }
//                        }

//                    });
//                }
//                //不是自己的欢迎页新增一个自己的欢迎页
//                else {

//                    //新增欢迎页
//                    var newDashboardModel = that.CreateNewDataObject("Dashboard");

//                    SubmitModel.push({ "id": newDashboardModel.id, "$": "C", "content": DashboardCenterHtml, "name": "欢迎页", "label": "欢迎页" });

//                    //新增身份个性化
//                    var newIdentityPersonalizationModel = that.CreateNewDataObject("IdentityPersonalization");

//                    SubmitModel.push({ "id": newIdentityPersonalizationModel.id, "$": "C", "source": that.ObjectTostring(InitialModel.MySelfIdentityId), "related": that.ObjectTostring(newDashboardModel.id) });

//                    //新增欢迎页小部件关联
//                    $(gfwidget).each(function () {

//                        if (this.widgetstatus != "delete") {

//                            var newDashboardWidgetModel = that.CreateNewDataObject("DashboardWidget");

//                            SubmitModel.push({ "id": newDashboardWidgetModel.id, "$": "C", "source": that.ObjectTostring(newDashboardModel.id), "related": that.ObjectTostring(this.widgetid) });

//                        }
//                    });
//                }

              


//            }

//        }


//        that.DashboardSave(element)

//    }


//    /**
//    *得到中心内容面板的Html
//    */
//    protected GetDashboardCenterHtml(element) {

//        var DashboardCenterHtml = "";

//        var DashboardCenter = element.get("DashboardCenter");

//        //找到小部件
//        var gfwidget = $(DashboardCenter).find("gf-widget");

//        //循环拼接html
//        $(gfwidget).each(function () {

//            //删除状态的不拼接
//            if (this.widgetstatus != "delete") {

//                var widgethtml = "<gf-widget ";

//                widgethtml += "acceptelement=\"" + this.acceptelement + "\" ";

//                widgethtml += "width=\"" + this.width + "\" ";

//                widgethtml += "height=\"" + this.height + "\" ";

//                widgethtml += "widgetid=\"" + this.widgetid + "\" ";

//                widgethtml += "autoinit=\"true\"";

//                widgethtml += ">";

//                widgethtml += "</gf-widget>";

//                DashboardCenterHtml += widgethtml;

//            }
           
//        });

//        return DashboardCenterHtml;
//    }


//    /**
//    *欢迎页保存
//    */    
//    protected DashboardSave(element) {

//        var that = this;
        
//        var SubmitModel = element.get("SubmitModel");

//        if(SubmitModel.length > 0) {

//            window["platformAjax"]({

//                url: document.body["listsaveurl"],

//                type: "post",

//                data: { changes: JSON.stringify(SubmitModel) },

//                success: function (result) {

//                    //数据提交模型清空
//                    element.set("SubmitModel", []);

                    
//                }
//            });
//        }
//    }

//    /**
//    *欢迎页中心内容初始化
//    */
//    protected DashboardCenterInit(element) {        

//        var DashboardCenter = element.get("DashboardCenter");

//        var DashboardModel= element.get("InitialModel");

//        $(DashboardCenter).html(DashboardModel.Content);
        
//    }

//    /**
//    *创建新对象
//    *@param klassName 对象类名
//    */
//    protected CreateNewDataObject(klassName) {

//        var model;

//        window["platformAjax"]({

//            url: document.body["getnewobjekturl"],

//            sync: true,

//            type: "post",

//            data: { klass: klassName },

//            success: function (result) {
//                model = eval("(" + result.Data + ")");
//            }
//        });
//        return model;
//    }

//    /**
//    *对象数组条件查询,返回第一个数组匹配对象的index
//    *@param array 待查询数组
//    *@param objPropery 待查询的属性
//    *@param objValue 待查询的属性值
//    */
//    protected ObjectArrayEach(array, objPropery, objValue) {

//        var arrayIndex = -1;

//        $(array).each(function (index) {

//            if (this[objPropery] == objValue) {
//                arrayIndex = index;
//            }
//        });

//        return arrayIndex;
//    }

//    /**
//    *对象型属性转换为string
//    *@param objektId 对象ID
//    */
//    protected ObjectTostring(objectId) {

//        var objstring = "{\"id\":\"" + objectId + "\"}"

//        return objstring;
//    }
//}

////【视图模型编辑组件】
//class GfViewEditor extends GfPropertyView {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.addProperties("klass,filebrowserBrowseUrl,layouttype,filebrowserUploadUrl,toolbar,applicationPath,maxlength");

//        this.properties["haschange"] = `{ attribute: {}, get: function()  { return this.get("selecteditor").haschange;} }`;
//        this.elementName = "Gf-ViewEditor";
//        this.methods["getValue"] = `function() {  
//            var strvalue ="";
//            var selecteditor = this.get("selecteditor");
//            if(selecteditor)
//            {
//                strvalue = selecteditor.getValue(); 
//            }

//            strvalue = strvalue.replace("<div name='flowlayout' style='display:none'>&nbsp;</div>", "") ;
//            strvalue = strvalue.replace("<div name='customeditor' style='display:none'>&nbsp;</div>", "") ;
//            var layouttype = this.get("layouttype");
//            if(layouttype)
//            {
//                strvalue = "<div name='"+ layouttype +"' style='display:none'>&nbsp;</div>" +  strvalue ;
//            }
//            return strvalue;
//        }`;
//        this.methods["setDisplay"] = `function(display) { 
//        }`;
//    }

//    protected innerSetValue(element, value) {
//        var selecteditor = element.get("selecteditor");
//        if (selecteditor) {
//            selecteditor.setValue(value);
//        }
//    }

//    protected initContent(element) {

//        var div = document.createElement("div");
//        $(div).addClass("GfViewEditor")
//        $(div).css("width", "100%");
//        $(div).css("height", "800px;");
//        $(div).css("border", "1px solid #A1A1A1");
//        element.set("div", div);
//        element.appendChild(div);


//        var layout = document.createElement("div");
//        element.set("layout", layout);
//        $(layout).css("min-height", "500px");
//        div.appendChild(layout);

//        $(layout).layout({
//            fit: true
//        });

//        $(layout).layout('add', {
//            region: 'center',
//            collapsible: true,
//            split: true
//        });
//        $(layout).layout('add', {
//            region: 'west',
//            width: 0,
//            collapsible: true,
//            split: true
//        });

//        var center = $(layout).find('.layout-panel-center').find('.layout-body');
//        var west = $(layout).find('.layout-panel-west').find('.layout-body');
//        element.set("layout", layout);
//        element.set("center", center);
//        element.set("west", west);

//        element.applicationPath = document.body["apppath"];
//        var center = element.get("center");
//        center.html("");

//        var divtabs = document.createElement("div");
//        $(divtabs).css("width", "99.7%");
//        $(divtabs).css("height", "99.7%");
//        element.set("divtabs", divtabs);
//        center.append(divtabs);

//        let floweditor = document.createElement("Gf-RichContentPropertyView");
//        floweditor["toolbar"] = "None";
//        floweditor["resize_enabled"] = false;
//        floweditor["height"] = "780px";
//        floweditor["width"] = "99.7%";
//        element.set("floweditor", floweditor);
//        var isflow = false;
//        if (element.value.indexOf("<div name='flowlayout' style='display:none'>&nbsp;</div>") > -1) {
//            isflow = true;
//            floweditor["value"] = element.value;
//            element.set("layouttype", "flowlayout");
//            element.set("selecteditor", floweditor);
//        }

//        let customeditor = document.createElement("Gf-RichContentPropertyView");
//        customeditor["toolbar"] = "Full";
//        customeditor["resize_enabled"] = false;
//        customeditor["height"] = "780px";
//        customeditor["width"] = "99.7%";
//        element.set("customeditor", customeditor);
//        var iscustom = false;
//        if (element.value.indexOf("<div name='customlayout' style='display:none'>&nbsp;</div>") > -1) {
//            iscustom = true;
//            customeditor["value"] = element.value;
//            element.set("layouttype", "customlayout");
//            element.set("selecteditor", customeditor);
//        }

//        if (!iscustom && !isflow) {
//            isflow = true;
//            floweditor["value"] = element.value;
//            element.set("layouttype", "flowlayout");
//            element.set("selecteditor", floweditor);
//        }

//        $(divtabs).tabs({
//            width: 'auto',
//            height: 'auto',
//            border: false,
//            scrollDuration: 0,
//            onSelect: function (title, index) {
//                var floweditor = element.get("floweditor");
//                var customeditor = element.get("customeditor");
//                if (title == "流式布局") {
//                    if (floweditor) {
//                        element.set("selecteditor", floweditor);
//                        element.set("layouttype", "flowlayout");
//                    }
//                } else if (title == "自定义布局") {
//                    if (customeditor) {
//                        element.set("selecteditor", customeditor);
//                        element.set("layouttype", "customlayout");
//                    }
//                }
//            }
//        });

//        $(divtabs).tabs('add', {
//            title: '流式布局',
//            content: floweditor,
//            selected: isflow,
//            closable: false
//        });

//        $(divtabs).tabs('add', {
//            title: '固定布局',
//            content: "",
//            selected: false,
//            closable: false
//        });

//        $(divtabs).tabs('add', {
//            title: '自定义布局',
//            content: customeditor,
//            selected: iscustom,
//            closable: false
//        });

//        floweditor["init"]();
//        customeditor["init"]();

//    }

//    protected setState(element, state) {
//        var control = this;
//        var div = element.get("div");
//        var west = element.get("west");
//        var center = element.get("center");
//        var layout = element.get("layout");

//        if (div) {
//            var floweditor = element.get("floweditor");
//            var customeditor = element.get("customeditor");
//            if (state == "edit") {
//                $(west).width(200);
//                $(layout).layout("resize", {
//                    width: "100%",
//                    height: "100%"
//                });

//                if (floweditor) {
//                    floweditor.setState("edit");
//                }
//                if (customeditor) {
//                    customeditor.setState("edit");
//                }
//                $(div).resizable({
//                    onStartResize: function (e) {
//                    },
//                    onResize: function (e) {
//                        var floweditor = element.get("floweditor");
//                        floweditor["setHeight"]($(this).css('height').replace("px", ""));
//                        var customeditor = element.get("customeditor");
//                        customeditor["setHeight"]($(this).css('height').replace("px", ""));
//                        var layout = element.get("layout");
//                        $(layout).layout("resize", {
//                            width: "100%",
//                            height: "100%"
//                        });
//                    },
//                    onStopResize: function (e) {

//                    }
//                });
//                control.ajax(element, {
//                    url: "/GroupflyGroup.Platform.Web/Platform/GetKlassPropertys",
//                    data: { id: element.objektid },
//                    success: function (result) {

//                        setTimeout(function () {
//                            var div = element.get("div");
//                            var floweditor = element.get("floweditor");
//                            floweditor["setHeight"]($(div).css('height').replace("px", ""));
//                            var customeditor = element.get("customeditor");
//                            customeditor["setHeight"]($(div).css('height').replace("px", ""));
//                        }, 300);
//                        var layout = element.get("layout");
//                        var west = element.get("west");


//                        west.find("table").remove();

//                        var tree = document.createElement("Gf-Tree");
//                        tree["data"] = result.Data;
//                        tree["hidefoldericon"] = true;
//                        tree["autoinit"] = "";
//                        tree["url"] = "/GroupflyGroup.Platform.Web/Platform/GetSubPropertys";
//                        tree["iscustomelement"] = "";
//                        tree["initcompleted"] = "";
//                        tree["registerEventHandler"]("onNodeClick", function (node) {
//                            var selecteditor = element.get("selecteditor");
//                            if (!node.isDirectory) {
//                                if (node.id.indexOf("@ObjektDetailView") > -1) {
//                                    if (node.childrenViews.indexOf(element.objektid) > -1 || node.id == element.objektid) {
//                                        alert("，该视图与当前视图形成循环，无法添加！")
//                                    } else {
//                                        selecteditor["insertHtml"]("<img align=\"absMiddle\" class=\"CALENDAR\" element_type=\"xd_view\" id=\"DATA_1502437208833\" img_type=\"date\" name=\"DATA_1502437208833\" parentid=\"" + node.parentId + "\" pathname=\"" + node.pathname + "\" src=\"" + document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/plugins/xd_view/view.jpg\" style=\"height:110px;width:110px;\" value=\"" + node.text + "\" viewid=\"" + node.id + "\" viewname=\"" + node.name + "\" />");
//                                    }
//                                } else if (node.id.indexOf("@ObjektCollectionView") > -1) {
//                                    selecteditor["insertHtml"]("<img align=\"absMiddle\" class=\"CALENDAR\" element_type=\"xd_view\" id=\"DATA_1502437208833\" img_type=\"date\" name=\"DATA_1502437208833\" parentid=\"" + node.parentId + "\" pathname=\"" + node.pathname + "\" src=\"" + document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/plugins/xd_view/view.jpg\" style=\"height:110px;width:110px;\" value=\"" + node.text + "\" viewid=\"" + node.id + "\" viewname=\"" + node.name + "\" />");
//                                } else if (node.id.indexOf("@ObjektCollectionView") > -1) {
//                                    selecteditor["insertHtml"]("<img align=\"absMiddle\" class=\"CALENDAR\" element_type=\"xd_view\" id=\"DATA_1502437208833\" img_type=\"date\" name=\"DATA_1502437208833\" parentid=\"" + node.parentId + "\" pathname=\"" + node.pathname + "\" src=\"" + document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/plugins/xd_view/view.jpg\" style=\"height:110px;width:110px;\" value=\"" + node.text + "\" viewid=\"" + node.id + "\" viewname=\"" + node.name + "\" />");
//                                } else if (node.id.indexOf("@Property") > -1) {
//                                    selecteditor["insertHtml"]("<input element_type=\"xd_property\" align=\"absMiddle\" class=\"AUTO\" datafld=\"SYS_DATE_CN\"  id=\"DATA_1501643216318\" input_type=\"property\" name=\"DATA_1501643216318\" style=\"font-size:12px;width:133px;\" parentid=\"" + node.parentId + "\"  pathname=\"" + node.pathname + "\"   propertyid=\"" + node.id + "\" propertyname=\"" + node.name + "\" value=\"" + node.text + "\" />");
//                                }
//                            }
//                        });
//                        element.set("tree", tree);
//                        tree["init"]();
//                        west.append(tree);
//                    }
//                });

//            } else {
//                if (floweditor) {
//                    floweditor.setState("read")
//                }
//                if (customeditor) {
//                    customeditor.setState("read")
//                }
//                $(west).width(0);
//            }
//        }
//        super.setState(element, state);
//    }

//    protected create(element) {
//        var control = this;
//        element.registerEventHandler("onbeforeinit", function () {
//            if (typeof CKEDITOR === "undefined") {
//                control.includeJS(document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/ckeditor.js");
//                control.includeJS(document.body["apppath"] + "/Platform/Content/Scripts/ckeditor/ck_utility.js");
//            }
//        });
//        super.create(element);
//    }
//}

////【视图模型展示组件】
//class GfView extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-View";
//        this.addProperties("width,height,objektid,viewid,rootviewid,state");
//        this.addMethod("SaveData", "function(){return control.SaveData(this); }");
//    }

//    //初始化
//    protected initContent(element) {


//        var control = this;
//        control.ajax(element, {
//            url: "/GroupflyGroup.Platform.Web/Platform/GetView",
//            data: { objektid: element.objektid, viewid: element.viewid, rootviewid: element.rootviewid },
//            success: function (result) {
//                var obj = JSON.parse(result.Data);
//                element.set("ViewObjekt", obj);
//                var div = document.createElement("div");
//                $(div).addClass("GfView");
//                var html = obj.htmlview;
//                var isflow = false;
//                if (html.indexOf("<div name='flowlayout' style='display:none'>&nbsp;</div>") > -1) {
//                    isflow = true;

//                    html = html.replace(new RegExp("<p>", "gm"), "")
//                    html = "<div>" + html.replace(new RegExp("</p>", "gm"), "") + "</div>"
//                }

//                html = html.replace("<div name='flowlayout' style='display:none'>&nbsp;</div>", "");
//                html = html.replace("<div name='customeditor' style='display:none'>&nbsp;</div>", "");

//                var htmlviewobj = $(html);
//                var inputs = [];
//                for (var propertyname in obj) {
//                    var property = obj[propertyname]
//                    if (property.hidden == "false") {
//                        var elementname = property['elementname'];
//                        var uidiv = $(htmlviewobj).find("div[name='" + property['divname'] + "']");
//                        if (isflow) {
//                            uidiv.css("float", "left");
//                        }
//                        if (elementname && uidiv.length > 0) {
//                            var ui = document.createElement(elementname);
//                            uidiv[0].append(ui);

//                            if (elementname == 'Gf-Calcu') {
//                                ui['formula'] = property['formula'];
//                                ui['title'] = property['divname'];
//                            }
//                            else if (elementname == 'Gf-View') {
//                                ui['objektid'] = property['objektid'];
//                                ui['viewid'] = property['viewid'];
//                                ui['rootviewid'] = property['rootviewid'];
//                            }
//                            else {
//                                ui['name'] = property['name'];
//                                ui['label'] = property['label'];
//                                ui['description'] = property['description'];
//                                ui['filterid'] = property['filterid'];
//                                ui['objektid'] = property['objektid'];
//                                ui['propertyname'] = property['propertyname'];
//                                ui['width'] = property['width'];
//                                ui['height'] = property['height'];
//                                ui['state'] = "read";//"edit""
//                                ui['autosave'] = property['autosave'] == "true";
//                                ui['readonly'] = property['readonly'] == "true";
//                                ui['hidden'] = property['hidden'] == "true";
//                                ui['required'] = property['required'] == "true";
//                                ui['prec'] = property['prec'];
//                                ui['scale'] = property['scale'];

//                                if (elementname == 'Gf-ObjektPropertyView') {
//                                    ui['value'] = JSON.stringify(property['value']);
//                                    ui['idfield'] = property['idfield'];
//                                    ui['namefield'] = property['namefield'];
//                                    ui['href'] = property['href'];
//                                    ui['klass'] = property['klass'];
//                                }
//                                else if (elementname == 'Gf-ListPropertyView') {
//                                    ui['value'] = JSON.stringify(property['value']);
//                                    ui['valuefield'] = property['valuefield'];
//                                    ui['textfield'] = property['textfield'];
//                                    ui['defaultoption'] = property['defaultoption'];
//                                    ui['data'] = property['data'];
//                                    if (property['value'] && property['value'].color) {
//                                        uidiv.css("background-color", "#" + property['value'].color);
//                                    }
//                                }
//                                else {
//                                    ui['value'] = property['value'];
//                                }
//                            }
//                            inputs.push(ui);
//                        }
//                        else {
//                            //uidiv[0].append(property['value']);
//                        }
//                    }
//                }
//                element.set("inputs", inputs);

//                $(div).append(htmlviewobj);
//                element.appendChild(div);
//                //后处理
//                for (var inputitem in inputs) {
//                    inputs[inputitem]["init"]();
//                }
//            }
//        });
//    }

//    //状态
//    protected setState(element, state) {

//    }

//    //保存数据
//    protected SaveData(element) {

//    }

//    protected create(element) {
//        var control = this;
//        element.registerEventHandler("onbeforeinit", function () {
//            //control.includeStyle(document.body["apppath"] + "/Platform/Content/Css/FeBackCommon.css");
//        });
//        super.create(element);
//    }
//}


////【视图模型计算组件】
//class GfCalcu extends BaseComponent {
//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-Calcu";
//        this.addProperties("width,height,formula");
//        this.addMethod("SaveData", "function(){return control.SaveData(this); }");
//    }

//    //初始化
//    protected initContent(element) {
//        var div = document.createElement("div");
//        $(div).addClass("GfCalcu");
//        $(div).attr("width", "99.7%");
//        $(div).css("width", "99.7%");

//        var calformula = element.formula;

//        var p = /\[([^\]]*)\]/g;
//        var s = [], m;
//        while (m = p.exec(element.formula)) {
//            s.push(m[0])
//        }

//        for (var key in s) {
//            let propertyvalue = $("div[name='" + s[key].replace("[", "").replace("]", "") + "']").children();
//            if (propertyvalue) {
//                calformula = calformula.replace(s[key], propertyvalue.attr("value"))
//            }
//        }

//        element.value = eval(calformula);
//        div.innerHTML = element.value;

//        element.appendChild(div);
//    }

//    //状态
//    protected setState(element, state) {

//    }

//    //保存数据
//    protected SaveData(element) {
        
//    }
//}

////【对象明细视图】
//class GfObjektDetailView extends BaseComponent {

//    constructor(extension?: IComponentExtend) {
//        super(extension);
//        this.elementName = "Gf-ObjektDetailView";
//        this.addProperties("objektid,klass,viewtype,width");
//        this.addMethod("save", `function() { control.save(this); }`);
//    }

//    protected initContent(element) {
//        if (!element.state) element.state = "read";
//        var div = document.createElement("div");

//        $(div).css("height", "500px")
//        $(div).css("width", "500px")
//        element.set("div", div);
//        element.appendChild(div);

//        var tabid = this.GetUniqueId("tab");
//        $(div).html(`<div id="` + tabid + `" is="Gf-Tabs" class="frametabs"  width = "100%" height= "100%"  fit lazyload autoinit></div>`);
//        element.set("tabid", tabid);

//        this.buildTabs(element, true);

//    }

//    protected setState(element, state) {
//        //var forminputs = element.get("inputs");
//        //$(forminputs).each(function () {
//        //    this.setState(state);
//        //});
//        //var toolbar = element.get("toolbar");
//        //toolbar.setState(state);
//        super.setState(element, state);
//    }

//    protected buildTabs(element, firstLoad) {
//        var control = this;
//        control.ajax(element, {
//            url: "/GroupflyGroup.Platform.Web/Platform/GetViewList",
//            data: { klass: element.klass, viewtype: element.viewtype },
//            success: function (result) {

//                var tabid = element.get("tabid");
//                var tab = document.getElementById(tabid);
//                var obj = JSON.parse(result.Data);
//                element.set("ServerObjekt", obj);

//                tab["lazyload"] = true;
//                tab["init"]();
//                tab["closeAll"]();
//                for (var viewobj in obj) {
//                    var view = obj[viewobj]
//                    if (view.hidden == "false") {
//                        var viewid = view['viewid'];
//                        var viewname = view['viewname'];
//                        var id = control.GetUniqueId(element.klass);
//                        var href = "/GroupflyGroup.Platform.Web/Platform/GetCustomFormView" + "?objektid=" + element.objektid + "&viewid=" + viewid;
//                        tab["add"](id, viewname, href, "", false);
//                    }
//                }
//                tab["setState"](element.state);
//                tab["select"](0);
//                control.setState(element, element.state);
//                if (firstLoad) {
//                    element.triggerEventHandler("oninitLoaded");
//                }
//            }
//        });
//    }

//    protected haschange(element) {
//        var haschange = false;
//        return haschange;
//    }

//    protected setChangeObject(element, change) {
//        element.set("changeObject", change);
//    }

//    protected save(element) {

//    }
//}